<?xml version="1.0" encoding="UTF-8"?>
<tsRef>
	<type id="stringList"/>
	<type id="charRangeMap" extends="array"/>
	<type id="wrap"/>
	<type id="wrapSplitChar" extends="wrap">
		<property name="splitChar" type="string">
			<description><![CDATA[defines an alternative splitting character (default is “|” - the vertical line)]]></description>
			<default><![CDATA[|]]></default>
		</property>
	</type>
	<type id="HRULER">
		<property name="lineColor" type="string">
			<description><![CDATA[The color of the ruler.]]></description>
			<default><![CDATA[black]]></default>
		</property>
		<property name="lineThickness" type="stdWrap">
			<description><![CDATA[integer, range: 1-50]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="spaceLeft" type="int">
			<description><![CDATA[space before the line (to the left)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spaceRight" type="int">
			<description><![CDATA[space after the line (to the right)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[ ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tableWidth" type="string">
			<description><![CDATA[Width of the ruler (“width” attribute in a table)]]></description>
			<default><![CDATA[99%]]></default>
		</property>
	</type>
	<type id="HTML">
		<property name="value" type="stdWrap">
			<description><![CDATA[Raw HTML-code.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="HTMLparser">
		<property name="allowTags" type="string">
			<description><![CDATA[Default allowed tags]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="globalNesting" type="string">
			<description><![CDATA[List of tags (among the already set tags), which will be forced to have the nesting-flag set to “global”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="htmlSpecialChars" type="int">
			<description><![CDATA[values: -1 / 0 / 1 / 2
			This regards all content which is NOT tags: 
“0” means “disabled” - nothing is done
“1” means the content outside tags is htmlspecialchar()'ed (PHP-function which converts &”<> to &...;)
“2” is the same as “1” but entities like “&amp;” or “&#234” are untouched.
“-1” does the opposite of “1” - converts &lt; to <, &gt; to >, &quot; to “ etc.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="keepNonMatchedTags" type="string">
			<description><![CDATA[If set (true=1), then all tags are kept regardless of tags present as keys in $tags-array. 
If "protect", then the preserved tags have their <> converted to &lt; and &gt;
Default is to REMOVE all tags, which are not specifically assigned to be allowed! So you might probably want to set this value!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="localNesting" type="string">
			<description><![CDATA[List of tags (among the already set tags), which will be forced to have the nesting-flag set to true]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noAttrib" type="string">
			<description><![CDATA[List of tags (among the already set tags), which will be forced to have the allowedAttribs value set to zero (which means, all attributes will be removed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeTags" type="string">
			<description><![CDATA[List of tags (among the already set tags), which will be configured so they are surely removed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rmTagIfNoAttrib" type="string">
			<description><![CDATA[List of tags (among the already set tags), which will be forced to have the rmTagIfNoAttrib set to true]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tags.[tagname]" type="HTMLparser_tags">
			<description><![CDATA[Either set this property to 0 or 1 to allow or deny the tag. If you enter ->HTMLparser_tags properties, those will automatically overrule this option, thus it's not needed then.
[tagname] in lowercase.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="xhtml_cleaning" type="boolean">
			<description><![CDATA[Cleans up the content for XHTML compliance. Still slightly experimental and supports only some clean up operations (like convertion tags and attributes to lower case).]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="HTMLparser_tags">
		<property name="allowedAttribs" type="string">
			<description><![CDATA['0' (zero) = no attributes allowed, '[commalist of attributes]' = only allowed attributes. If blank/not set, all attributes are allowed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fixAttrib" type="array">
			<description><![CDATA[fixAttrib.[attribute].always = true / false
If set, the attribute is always processed. Normally an attribute is processed only if it exists

fixAttrib.[attribute].casesensitiveComp = true / false
If set, the comparison in .removeIfEquals and .list will be case-sensitive. At this point, it's insensitive.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fixAttrib.[attribute]" type="HTMLparser_tags_fixAttrib">
			<description><![CDATA[If no attribute exists by this name, this value is set as default value (if this value is not blank)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nesting" type="">
			<description><![CDATA[If set true, then this tag must have starting and ending tags in the correct order. Any tags not in this order will be discarded. Thus '</B><B><I></B></I></B>' will be converted to '<B><I></B></I>'. 
Is the value "global" then true nesting in relation to other tags marked for "global" nesting control is preserved. This means that if <B> and <I> are set for global nesting then this string '</B><B><I></B></I></B>' is converted to '<B></B>']]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="overrideAttribs" type="string">
			<description><![CDATA[If set, this string is preset as the attributes of the tag. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="protect" type="boolean">
			<description><![CDATA[If set, the tag <> is converted to &lt; and &gt;]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="remap" type="string">
			<description><![CDATA[If set, the tagname is remapped to this tagname]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rmTagIfNoAttrib" type="boolean">
			<description><![CDATA[If set, then the tag is removed if no attributes happend to be there.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="HTMLparser_tags_fixAttrib">
		<property name="default" type="string">
			<description><![CDATA[If no attribute exists by this name, this value is set as default value (if this value is not blank)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="list" type="stringList">
			<description><![CDATA[Attribute value must be in this list. If not, the value is set to the first element.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prefixLocalAnchors" type="integer">
			<description><![CDATA[If the first char is a “#” character (anchor of fx. <a> tags) this will prefix either a relative or absolute path.
If the value is “1” you will get the absolute path (t3lib_div::getIndpEnv('TYPO3_REQUEST_URL'))
If the value is “2” you will get the relative path (stripping of t3lib_div::getIndpEnv('TYPO3_SITE_URL'))

Example:

...fixAttrib.href.prefixLocalAnchors = 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prefixRelPathWith" type="string">
			<description><![CDATA[If the value of the attribute seems to be a relative URL (no scheme like “http” and no “/” as first char) then that value of this property will be prefixed the attribute.

Example:

...fixAttrib.src.prefixRelPathWith = http://192.168.230.3/typo3/32/dummy/]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="range" type="intList">
			<description><![CDATA[Setting integer range. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeIfEquals" type="string">
			<description><![CDATA[If the attribute value matches the value set here, then it is removed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeIfFalse" type="stingList">
			<description><![CDATA[boolean/”blank” string
If set, then the attribute is removed if it is "false". If this value is set to "blank" then the value must be a blank string (that means a "zero" value will not be removed)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="set" type="string">
			<description><![CDATA[Force the attribute value to this value.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="trim" type="boolean">
			<description><![CDATA[If any of these keys are set, the value is passed through the respective PHP-functions.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="unset" type="boolean">
			<description><![CDATA[ If set, the attribute is unset.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="userFunc" type="string">
			<description><![CDATA[User function for processing of the attribute.

Example:

...fixAttrib.href.userFunc = tx_realurl->test_urlProc]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="IMAGE">
		<property name="altText" type="stdWrap">
			<description><![CDATA[If no titltext is specified, it will use the alttext insteadIf no alttext is specified, it will use an empty alttext

("alttext" is the old spelling of this attribute. It will be used only if "altText" does not specify a value or properties)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="border" type="int">
			<description><![CDATA[Value of the “border” attribute of the image tag.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="file" type="imgResource">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="if" type="if">
			<description><![CDATA[if "if" returns false the image is not shown!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imageLinkWrap" type="imageLinkWrap">
			<description><![CDATA[boolean / imageLinkWrap

CAUTION: only active if set to 1:
imageLinkWrap = 1

Additional Note: ONLY active if linkWrap is NOT set and file is NOT GIFBUILDER (as it works with the original imagefile)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="linkWrap" type="wrap">
			<description><![CDATA[(before ".wrap")]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="longdescURL" type="stdWrap">
			<description><![CDATA["longdesc" attribute (URL pointing to document with extensive details about image).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="IMGMAP">
		<property name="altText" type="string">
			<description><![CDATA[Value of the alt-attribute.

(Used from TEXT Gifbuilding objects, this has stdWrap properties. Otherwise not)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="explode" type="intList">
			<description><![CDATA[This "explodes" or "implodes" the image-map. Useful to let the hot area cover a little more than just the letters of the text.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noBlur" type="boolean">
			<description><![CDATA[Normally graphical links are "blurred" if the browser is MSIE. This removes the ugly box around a link. 
If this property is set, the link is NOT blurred with "onFocus".]]></description>
			<default><![CDATA[For IMGMENU menu objects provided automatically]]></default>
		</property>
		<property name="target" type="target">
			<description><![CDATA[target for link]]></description>
			<default><![CDATA[For IMGMENU menu objects provided automatically]]></default>
		</property>
		<property name="titleText" type="string">
			<description><![CDATA[Value of the title attribute.

(Used from TEXT Gifbuilding objects, this has stdWrap properties. Otherwise not)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="url" type="string">
			<description><![CDATA[url to link]]></description>
			<default><![CDATA[For IMGMENU menu objects provided automatically]]></default>
		</property>
	</type>
	<type id="IMGTEXT" extends="cObjArray">
		<property name="1" type="IMAGE">
			<description><![CDATA[Rendering of the images
The register "IMAGE_NUM" is set with the number of image being rendered for each rendering of a image-object. Starting with zero.
The image-object should not be of type GIFBUILDER!
Important:
"file.import.current = 1" fetches the name of the images! 
</description>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="IMAGE">
			<description><![CDATA[Rendering of the images
The register "IMAGE_NUM" is set with the number of image being rendered for each rendering of a image-object. Starting with zero.
The image-object should not be of type GIFBUILDER!
Important:
"file.import.current = 1" fetches the name of the images! 
</description>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="IMAGE">
			<description><![CDATA[Rendering of the images
The register "IMAGE_NUM" is set with the number of image being rendered for each rendering of a image-object. Starting with zero.
The image-object should not be of type GIFBUILDER!
Important:
"file.import.current = 1" fetches the name of the images! 
</description>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="altText" type="stdWrap">
			<description><![CDATA[Default altText/titleText if no alternatives are provided by the ->IMAGE cObjects 

If no titltext is specified, it will use the alttext insteadIf no alttext is specified, it will use an empty alttext]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="border" type="stdWrap ">
			<description><![CDATA[If true, a border i generated around the images.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="borderCol" type="stdWrap">
			<description><![CDATA[Color of the border, if ".border" is set]]></description>
			<default><![CDATA[black]]></default>
		</property>
		<property name="borderThick" type="stdWrap">
			<description><![CDATA[Width of the border around the pictures]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="caption" type="stdWrap">
			<description><![CDATA[Caption]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="captionAlign" type="stdWrap">
			<description><![CDATA[Caption alignment]]></description>
			<default><![CDATA[default = ".textPos"]]></default>
		</property>
		<property name="captionSplit" type="boolean">
			<description><![CDATA[If this is set, the caption text is split by the character (or string) from ".token" , and every item is displayed under an image each in the image block.
.token = (string /stdWrap) Character to split the caption elements (default is chr(10))
.cObject = cObject, used to fetch the caption for the split
.stdWrap = stdWrap properties used to render the caption.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="colRelations" type="stdWrap">
			<description><![CDATA[This value defines the width-relations of the images in the columns of IMGTEXT. The syntax is "[int] : [int] : [int] : ..." for each column. If there are more imagecolumns than figures in this value, it's ignored. If the relation between two of these figures exceeds 10, this function is ignore. 
It works only fully if all images are downscaled by their maxW-definition.

Example:
If 6 images are placed in three columns and their width's are high enough to be forcibly scaled, this value will scale the images in the to be eg. 100, 200 and 300  pixels from left to right
1 : 2 : 3]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="colSpace" type="stdWrap">
			<description><![CDATA[space between columns]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cols" type="stdWrap ">
			<description><![CDATA[Columns]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="editIcons" type="string">
			<description><![CDATA[(See stdWrap.editIcons)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="equalH" type="stdWrap">
			<description><![CDATA[If this value is greater than zero, it will secure that images in a row has the same height. The width will be calculated.
If the total width of the images raise above the "maxW"-value of the table the height for each image will be scaled down equally so that the images still have the same height but is within the limits of the totalWidth.
Please note that this value will override the properties "width", "maxH", "maxW", "minW", "minH" of the IMAGE-objects generating the images. Furthermore it will override the "noRows"-property and generate a table with no columns instead!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="image_compression" type="stdWrap">
			<description><![CDATA[Image Compression:
0= Default
1= Dont change! (removes all parameters for the image_object!!)
(adds gif-extension and color-reduction command)
10= GIF/256
11= GIF/128
12= GIF/64
13= GIF/32
14= GIF/16
15= GIF/8
(adds jpg-extension and quality command)
20= IM: -quality 100
21= IM: -quality 90 <=> Photoshop 60     (JPG/Very High)
22= IM: -quality 80    (JPG/High)
23= IM: -quality 70
24= IM: -quality 60 <=> Photoshop 30   (JPG/Medium)
25= IM: -quality 50
26= IM: -quality 40  (JPG/Low)
27= IM: -quality 30 <=> Photoshop 10 
28= IM: -quality 20   (JPG/Very Low)

The default ImageMagick quality seems to be 75. This equals Photoshop quality 45. Images compressed with ImageMagick with the same visual quality as a Photoshop-compressed image seems to be largely 50% greater in size!!

NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="image_effects" type="stdWrap">
			<description><![CDATA[Adds these commands to the parameteres for the scaling. This function has no effect if "image_compression" above is set to 1!!

1 => "-rotate 90",
2 => "-rotate 270",
3 => "-rotate 180",
10 => "-colorspace GRAY",
11 => "-sharpen 70",
20 => "-normalize",
23 => "-contrast",
25 => "-gamma 1.3",
26 => "-gamma 0.8"

NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="image_frames" type="array ">
			<description><![CDATA[Frames:
.key points to the frame used.

".image_frames.x" is imgResource-mask (".m")properties which will override to the [imgResource].m properties of the imageObjects. This is used to mask the images into a frame. See how it's done in the default configuration and IMGTEXT in the static_template-table. 

Example:
1 {
  mask = media/uploads/darkroom1_mask.jpg
  bgImg = GIFBUILDER
  bgImg {
    XY = 100,100
    backColor = {$bgCol}
  }
  bottomImg = GIFBUILDER
  bottomImg {
    XY = 100,100
    backColor = black
  }
  bottomImg_mask = media/uploads/darkroom1_bottom.jpg
}

NOTE: This cancels the jpg-quality settings sent as ordinary ".params" to the imgResource. In addition the output of this operation will always be jpg or gif!
NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgList" type="stdWrap">
			<description><![CDATA[list of images from ".imgPath"

Example:
This imports the list of images from tt_content's image-field
"imgList.field = image"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgMax" type="stdWrap">
			<description><![CDATA[max number of images]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgObjNum" type="int">
			<description><![CDATA[ +optionSplit
Here you define, which IMAGE-cObjects from the array "1,2,3,4..." in this object that should render the images.
"current" is set to the image-filename.

Example:
"imgObjNum = 1 |*||*| 2":
This would render the first two images with "1. ..." and the last image with "2. ...", provided that the ".imgList" contains 3 images.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgPath" type="stdWrap">
			<description><![CDATA[Path to the images

Example:
"uploads/pics/"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgStart" type="stdWrap">
			<description><![CDATA[start with image-number ".imgStart"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="longdescURL" type="stdWrap">
			<description><![CDATA[Default longdescURL if no alternatives are provided by the ->IMAGE cObjects 

"longdesc" attribute (URL pointing to document with extensive details about image).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxW" type="stdWrap">
			<description><![CDATA[max width of the image-table. 
This will scale images not in the right size! Takes the number of columns into account!

NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxWInText" type="stdWrap">
			<description><![CDATA[max width of the image-table, if the text is wrapped around the image-table (on the left or right side).
This will scale images not in the right size! Takes the number of columns into account!

NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER]]></description>
			<default><![CDATA[50% of maxW]]></default>
		</property>
		<property name="noCols" type="stdWrap">
			<description><![CDATA[If set, the columns are not made in the table. The images are all put in one row separated by a clear giffile to space them apart.
If noRows is set, noCols will be unset. They cannot be set simultaneously.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noRows" type="stdWrap">
			<description><![CDATA[If set, the rows are not divided by a table-rows. Thus images are more nicely shown if the height differs a lot (normally the width is the same!)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noStretchAndMarginCells" type="boolean">
			<description><![CDATA[If set (1), the cells used to add left and right margins plus stretch out the table will not be added. You will loose the ability to set margins for the object if entered “in text”. So it's not recommended, but it has been requested by some people for reasons.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rowSpace" type="stdWrap">
			<description><![CDATA[space between rows]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rows" type="stdWrap">
			<description><![CDATA[Rows (higher priority thab "cols")]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spaceBelowAbove" type="stdWrap">
			<description><![CDATA[Pixelsspace between content an images when position of image is above or belox text (but not in text)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tableStdWrap" type="stdWrap">
			<description><![CDATA[This passes the final <table> code for the image block to the stdWrap function.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="text" type="stdWrap">
			<description><![CDATA[Use this to import / generate the content, that should flow around the imageblock.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textMargin" type="stdWrap">
			<description><![CDATA[margin between the image and the content]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textMargin_outOfText" type="boolean">
			<description><![CDATA[If set, the textMargin space will still be inserted even if the image is placed above or below the text. 
This flag is only for a kind of backwards compatibility because this "feature" was recently considered a bug and thus corrected. So if anyone has depended on this way things are done, you can compensate with this flag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textPos" type="stdWrap">
			<description><![CDATA[Textposition:
bit[0-2]: 000 = centre, 001 = right, 010 = left
bit[3-5]: 000 = over, 001 = under, 010 text

0 - Above: Centre
1 - Above: Right
2 - Above: Left
8 - Below: Centre
9 - Below: Right
10 - Below: Left
17 - In Text: Right
18 - In Text: Left
25 - In Text: Right (no wrap)
26 - In Text: Left (no wrap)]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="LOAD_REGISTER" extends="array">
		<property name="[myRegisterVar1]" type="stdWrap">
			<description><![CDATA[Example:
(This sets "contentWidth", "label" and "head")

page.27 = LOAD_REGISTER
page.27 {
  contentWidth = 500 

  label.field = header

  head = some text
  head.wrap = <B> | </B>
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="[myRegisterVar2]" type="stdWrap">
			<default><![CDATA[
]]></default>
		</property>
		<property name="[myRegisterVar3]" type="stdWrap">
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="META" extends="array">
		<property name="REFRESH" type="stdWrap">
			<description><![CDATA[Metatag
If value is empty (after trimming) the metatag is not generated.
[seconds]; [url, leave blank for same page]
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="DESCRIPTION" type="stdWrap">
			<description><![CDATA[Metatag
If value is empty (after trimming) the metatag is not generated.
If the "key" (eg. "REFRESH" or "DESCRIPTION") is "REFRESH" (caseinsensitive), then the "http-equiv"-attribute is used in the metatag instead of "name".

Examples:
.REFRESH =  [seconds]; [url, leave blank for same page]
.DESCRIPTION = This is the description of the content in this document
.KEYWORDS = This is the keywords...]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="KEYWORDS" type="stdWrap">
			<description><![CDATA[Metatag
If value is empty (after trimming) the metatag is not generated.
Examples:
.KEYWORDS = This, is, the, list, of, keywords]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="[myMetaTag]" type="stdWrap">
			<description><![CDATA[Metatag
If value is empty (after trimming) the metatag is not generated.
ofcause you can specify your own meta tags too...]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="MULTIMEDIA">
		<property name="file" type="stdWrap">
			<description><![CDATA[The multimedia file. Types are:
txt, html, htm:Inserted directly
class:Java-applet
swf:Flash animation
swa, dcr:ShockWave Animation
wav,au:Sound
avi,mov,asf,mpg,wmv:Movies (AVI, QuickTime, MPEG4)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="stdWrap">
			<description><![CDATA[This is parameters for the multimedia-objects. Use this to enter stuff like with and height:

Example:
width=200
height=300

... will generate a tag like '<embed .... width="200" height="300">'
height=

An empty string will remove the parameter from the embed-tag]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="OTABLE" extends="cObjArray">
		<property name="1" type="cObj">
			<description><![CDATA[the object which should be rendered at the specified position. You have to set this to a contenttype (IMAGE, TEXT,...)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="cObj">
			<description><![CDATA[the object which should be rendered at the specified position. You have to set this to a contenttype (IMAGE, TEXT,...)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="cObj">
			<description><![CDATA[the object which should be rendered at the specified position. You have to set this to a contenttype (IMAGE, TEXT,...)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="intList">
			<description><![CDATA[Offset from upper left corner

Note:
Actually the datatype is “x,y,r,b,w,h”:
x,y is offset from upperleft corner
r,b is offset (margin) to right and bottom
w is the required width of the content field
h is the required height of the content field

All measures is in pixels.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tableParams" type="string">
			<description><![CDATA[
]]></description>
			<default><![CDATA[border=0 cellspacing=0 cellpadding=0]]></default>
		</property>
	</type>
	<type id="PHP_SCRIPT">
		<property name="file" type="string">
			<description><![CDATA[File that will be included. This file must be valid PHP-code! It's included with "include()";

Directions:
1) All content must be put into $content. No output must be echo'ed out!

2) Call $GLOBALS["TSFE"]->set_no_cache(), if you want to disable caching of the page. Set this during development! And set it, if the content you create may not be cached. 

NOTE: If you have a parsing error in your include script the $GLOBALS["TSFE"]->set_no_cache() function is NOT executed and thereby does not disable caching. Upon a parse-error you must manually clear the page-cache after you have corrected your error!
3) the array $conf contains the configuration for the PHP_SCRIPT cObject. Try debug($conf) to see the content printed out for debugging!
See later in this manual for an introduction to writing your own PHP include-scripts.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="PHP_SCRIPT_EXT">
		<property name="file" type="string">
			<description><![CDATA[File that will be included. This file must be valid PHP-code! It's included with "include()";

Purpose:
This works like PHP_SCRIPT_INT, because a divider string is also inserted in the content for this kind of include-script. But the difference is that the content is divided as the very last thing before it's output to the browser. 
This basically means that PHP_SCRIPT_EXT (external, because it's included in the global space in index_ts.php file!!) can output data directly with echo-statements! 
This is a very “raw” version of PHP_SCRIPT because it's not included from inside an object and you have only very few standard functions from TYPO3 to call.
This is the fastest option of all three PHP_SCRIPT-cObjects, because the page-data is all cached and your dynamic content is generated by a raw php-script

Rules:
- All content can be either 1) echo'ed out directly, or 2) returned in $content.
- calls to $GLOBALS["TSFE"]->set_no_cache() and $GLOBALS["TSFE"]->set_cache_timeout_default() makes no sense in this situation.
- parsing errors does not interfere with caching
- In the global name-space, the array $REC contains the current record when the file was “inserted” on the page, and $CONF-array contains the configuration for the script.
- Don't mess with the global vars named $EXTiS_*  ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeLibs" type="stringList">
			<description><![CDATA[This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="PHP_SCRIPT_INT">
		<property name="file" type="string">
			<description><![CDATA[File that will be included. This file must be valid PHP-code! It's included with "include()";

Purpose:
This basically works like PHP_SCRIPT. But the vital difference is that inserting a PHP_SCRIPT_INT (internal opposed to external, see below) merely inserts a divider-string in the code and then serializes the current cObj and puts it in the $GLOBALS["TSFE"]->config[“INTincScript”]-array. This array is saved with the cached page-content.
Now, the point is, that including a script like this lets you avoid disabling pagecaching. The reason is that the cached page contains the divider string and when a “static” page is fetched from cache, it's divided by that string and the dynamic content object is inserted.
This is the compromise option of all three PHP_SCRIPT-cObjects, because the page-data is all cached, but still the pagegen.php script is included, which initializes all the classes, objects and so. What you gain here is an environment for your script almost exactly the same as PHP_SCRIPT because your script is called from inside a class tslib_cObj object. You can work with all functions of the tslib_cObj-class. But still all the “static” pagecontent is only generated once, cached and only your script is dynamically rendered.

Rules:
- calls to $GLOBALS["TSFE"]->set_no_cache() and $GLOBALS["TSFE"]->set_cache_timeout_default() makes no sense in this situation.
- parsing errors does not interfere with caching
- Be aware that certain global variables may not be set as usual and be available as usual when working in this mode. Most scripts should work out-of-the-box with this option though.
- Dependence and use of LOAD_REGISTER is fragile because the PHP_SCRIPT_INT is not rendered until after the cached content and due to this changed order of events, use of LOAD_REGISTER may not work.
- You can not nest PHP_SCRIPT_INT and PHP_SCRIPT_EXT in PHP_SCRIPT_INT. You may nest PHP_SCRIPT cObjects though.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeLibs" type="stringList">
			<description><![CDATA[This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="RECORDS">
		<property name="conf" type="array">
			<description><![CDATA[Config-array which renders records from table tablename]]></description>
			<default><![CDATA[If this is NOT defined, the rendering of the records is done with the toplevel-object [tablename] - just like the cObject, CONTENT!]]></default>
		</property>
		<property name="dontCheckPid" type="boolean">
			<description><![CDATA[Normally a record cannot be selected, if it's parent page (pid) is not accessible for the website user. This option disables that check.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="source" type="stdWrap">
			<description><![CDATA[List of record-id's, optionally with appended table-names.

Example:
tt_content_34, 45, tt_links_56]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tables" type="stringList">
			<description><![CDATA[List of accepted tables. If any items in the ".source"-list is not prepended with a tablename, the first table in this list is assumed to be the table for such records.
Also tablenames configured in .conf is allowed.

Example:
tables = tt_content, tt_address, tt_links
conf.tx_myexttable = TEXT
conf.tx_myexttable.value = Hello world

This adds the tables tt_content, tt_address, tt_links, tx_myexttable]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="SEARCHRESULT">
		<property name="addExtUrlsAndShortCuts" type="boolean">
			<description><![CDATA[If set, then the doktypes 3 and 4 (External URLS and Shortcuts) are added to the doktypes being searched.
However at this point in time, no pages will be select if they do not have at least one tt_content record on them! That is because the pages and tt_content (or other) table is joined. So there must at least one occurance of a tt_content element on a External URL / Shortcut page for them to show up.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="allowedCols" type="string">
			<description><![CDATA[List (separated by ":") of allowed table-cols.

Example:
pages.title:tt_content.bodytext]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="languageField.[2nd table]" type="string">
			<description><![CDATA[Setting a field name to filter language on. This works like the “languageField” setting in ->select

Example:

languageField.tt_content = sys_language_uid]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="layout" type="string">
			<description><![CDATA[This defines how the search content is shown.

Example:
This substitutes the following fields:
###RANGELOW###:The low result range, eg. "1"
###RANGEHIGH###:The high result range, eg. "10"
###TOTAL###:The total results
###RESULT###:The result itself
###NEXT###:The next-button
###PREV###:The prev-button]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="next" type="cObj">
			<description><![CDATA[This cObject will be wrapped by a link to the next searchresult. This is the code substituting the "###NEXT###"-mark]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noOrderBy" type="boolean">
			<description><![CDATA[If this is set, the result is NOT sorted after lastUpdated, tstamp for the pages-table.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noResultObj" type="cObj">
			<description><![CDATA[the cObject used if the search results in no rows.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prev" type="cObj">
			<description><![CDATA[This cObject will be wrapped by a link to the prev searchresult. This is the code substituting the "###PREV###"-mark]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="range" type="int">
			<description><![CDATA[The number of results at a time!]]></description>
			<default><![CDATA[20]]></default>
		</property>
		<property name="renderObj" type="cObj">
			<description><![CDATA[the cObject to render the searchresults
$cObj->data array is set to the resulting record from the search.
Please note, that in all fields are named [tablename]_[fieldnam]. Thus the pagetitle is in the field "pages_title".
Apart from this, these fields from the pages-table are also present:
uid]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="renderWrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="resultObj" type="cObj">
			<description><![CDATA[the cObject prepended in the search results returns rows]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[Wrap the whole content...]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="target">
			<description><![CDATA[target til next/prev links!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wrap the whole content...]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TEMPLATE">
		<property name="markerWrap" type="wrap">
			<description><![CDATA[This is the wrap the markers is wrapped with. The default value is ### | ### resulting in the markers to be presented as ###[marker_key]###.
Any whitespace around the wrap-items is stripped before they are set around the marker_key.]]></description>
			<default><![CDATA[### | ###]]></default>
		</property>
		<property name="marks" type="array">
			<description><![CDATA[This is an array of marks-markers (case-sensitive).
A mark is defined by one markers in the template. The marker must be wrapped by "###" on both sides. Opposite to subparts, you may NOT insert the subpart-markers inside HTML-comment-tags! (They will not be removed).
Marks are substituted bya str_replace-function. The subparts loaded in the register is available also to the cObjects of markers (only if .nonCachedSubst is not set!).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nonCachedSubst" type="boolean">
			<description><![CDATA[If set, then the substitution mode of this cObject is totally different. Normally the raw template is read and divided into the sections denoted by the marks, subparts and wraps keys. The good thing is high speed, because this “pre-parsed” template is cached. The bad thing is that templates that depends on incremental substition (where the order of substition is important) will not work so well.
By setting this flag, markers are first substituted by str_replace in the template - one by one. Then the subparts are substituted one by one. And finally the wraps one by one.
Obviously you loose the ability to refer to other parts in the template with the register-keys as described above. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="relPathPrefix" type="string">
			<description><![CDATA[Finds all relative references (eg. to images or stylesheets) and prefixes this value.
If you specify properties (uppercase) these will match HTML tags and specify alternative paths for them. See example below.
If the property is named "style" it will set alternative path for the "url()" wrapper that may be in <style> sections.

Example:
page.10 = TEMPLATEpage.10 {  template = FILE  template.file = fileadmin/template.html  relPathPrefix = fileadmin/
  relPathPrefix.IMG = fileadmin/img/}

Inthis example all relative paths found are prefixed "fileadmin/" unless it was the src attribute of an img tag in which case the path prefixed is "fileadmin/img/"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="subparts" type="array">
			<description><![CDATA[This is an array of subpart-markers (case-sensitive).
A subpart is defined by two markers in the template. The markers must be wrapped by "###" on both sides. You may insert the subpart-markers inside HTML-comment-tags!! 

Example: 
subparts {
  HELLO = TEXT
  HELLO.value = En subpart er blevet erstattet!!
}

In the templates:
<!--  start of subpart: ###HELLO### -->
This is the HTML.code, that will be loaded in the register and replaced with the result...
<!-- end ###HELLO### -->

NOTE:
Before the content-objects of each subpart is generated, all subparts in the array are extracted and loaded into the register so that you can load them from there later on. 
The register-key for each subparts code is "SUBPART_[theSubpartkey]".
In addition the current-value is loaded with the content of each subpart just before the cObject for the subpart is parsed. That makes it quite easy to load the subpart of the cObject (eg: ".current=1")
Eg. this subpart above has the register-key "SUBPART_HELLO".
This is valid ONLY if the property .nonCachedSubst is not set! (see below)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="substMarksSeparately" type="boolean">
			<description><![CDATA[If set, then marks are substituted in the content AFTER the substitution of subparts and wraps. 
Normally marks are not substituted inside of subparts and wraps when you are using the default cached mode of the TEMPLATE cObject. That is a problem if you have marks inside of subparts! But setting this flag will make the marker-substitution a non-cached, subsequent process.
Another solution is to turn of caching, see below.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="template" type="cObj">
			<description><![CDATA[This must be loaded with the template-code. If not the object returns nothing.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="workOnSubpart" type="string">
			<description><![CDATA[This is an optional definition of a subpart, that we decide to work on. In other words; if you define this value that subpart is extracted from the template and is the basis for this whole templateobject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wraps" type="array">
			<description><![CDATA[This is an array of wraps-markers (case-sensitive).
This is shown best by an example:
Example: 
subparts {
  MYLINK = TEXT
  MYLINK.value = <A href=”#”> | </A>
}

In the template:
This is <!--###MYLINK###-->a link to my<!--###MYLINK###--> page!

In this example the MYLINK subpart will be substituted by the wrap which is the content returned by the MYLINK cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TEXT" extends="stdWrap">
		<property name="value" type="value">
			<description><![CDATA[text, wrap with stdWrap properties]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="USER">
		<property name="includeLibs" type="stringList">
			<description><![CDATA[(This property applies only if the object is created as USER_INT)
This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="userFunc" type="string">
			<description><![CDATA[The name of the function. If you specify the name with a '->' in, it's intepreted as a call to a method in a class.
Two parameters are sent: A content variable (which is empty in this case, but not when used from stdWrap function .postUserFunc and .preUserFunc) and the second parameter is an array with the properties of this cObject if any.

Example:
This TypoScript will display all content element headers of a page in reversed order. Please take a look in media/scripts/example_callfunction.php!!
(Also demonstrated on the testsite, page 

page = PAGE
page.typeNum=0
includeLibs.something = media/scripts/example_callfunction.php

page.30 = USER
page.30 {
  userFunc = user_various->listContentRecordsOnPage
  reverseOrder = 1
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="USER_INT">
		<property name="includeLibs" type="stringList">
			<description><![CDATA[(This property applies only if the object is created as USER_INT)
This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="userFunc" type="string">
			<description><![CDATA[The name of the function. If you specify the name with a '->' in, it's intepreted as a call to a method in a class.
Two parameters are sent: A content variable (which is empty in this case, but not when used from stdWrap function .postUserFunc and .preUserFunc) and the second parameter is an array with the properties of this cObject if any.

Example:
This TypoScript will display all content element headers of a page in reversed order. Please take a look in media/scripts/example_callfunction.php!!
(Also demonstrated on the testsite, page 

page = PAGE
page.typeNum=0
includeLibs.something = media/scripts/example_callfunction.php

page.30 = USER
page.30 {
  userFunc = user_various->listContentRecordsOnPage
  reverseOrder = 1
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TLO">
		<property name="FEData" type="array">
			<description><![CDATA[Array of tablenames.
Here you can configure how data submitted from the front-end should be processed, which script and so on.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="config" type="CONFIG">
			<description><![CDATA[Global configuration. 
These values are stored with cached pages which means they are also accessible when retrieving a cached page.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="constants" type="CONSTANTS">
			<description><![CDATA[Site-specific constants, eg. a general email-adresse. These constants may be substituted in the text throughout the pages. The substitution is done by parseFunc. (Option: constants=1)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeLibs" type="array">
			<description><![CDATA[With this you can include php-files with function libraries for use in your includescript in TYPO3. 
Please see the PAGE-object, which has the same property.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="resources" type="array">
			<description><![CDATA[Resources in list (internal)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sitetitle" type="array">
			<description><![CDATA[SiteTitle (internal)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="types" type="array">
			<description><![CDATA[Types (internal)
type=99 reserved for plaintext display ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="_GIFBUILDER" type="TLO_GIFBUILDER"/>
	</type>
	<type id="PAGE" extends="cObjArray">
		<property name="10" type="cObj">
			<description><![CDATA[the object which should be rendered in the page. You have to set this to a contenttype (IMAGE, TEXT, HTML...)
You can specify as much elements in this array as you want.

Example:

page.10 = TEXT
page.10.value = Here goes the header
page.20 = TEXT
page.20.value = Hello World!
page.30 = TEXT
page.30.value = Here goes the footer]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="20" type="cObj">
			<description><![CDATA[the object which should be rendered in the page. You have to set this to a contenttype (IMAGE, TEXT, HTML...)
You can specify as much elements in this array as you want.

Example:

page.10 = TEXT
page.10.value = Here goes the header
page.20 = TEXT
page.20.value = Hello World!
page.30 = TEXT
page.30.value = Here goes the footer]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="30" type="cObj">
			<description><![CDATA[the object which should be rendered in the page. You have to set this to a contenttype (IMAGE, TEXT, HTML...)
You can specify as much elements in this array as you want.

Example:

page.10 = TEXT
page.10.value = Here goes the header
page.20 = TEXT
page.20.value = Hello World!
page.30 = TEXT
page.30.value = Here goes the footer]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="CSS_inlineStyle" type="string">
			<description><![CDATA[This value is just passed on as inline css (in-document css encapsulated in <style>-tags)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="adminPanelStyles" type="boolean">
			<description><![CDATA[Will include CSS styles for the Admin Panel.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bgImg" type="imgResource">
			<description><![CDATA[Background image on the page. This is automatically added to the body-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bodyTag" type="string">
			<description><![CDATA[Bodytag on the page

Example:
page.bodyTag = <body bgcolor="{$bgCol}">]]></description>
			<default><![CDATA[<body bgcolor="#FFFFFF">]]></default>
		</property>
		<property name="bodyTagAdd" type="string">
			<description><![CDATA[This content is added to the end of the bodyTag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bodyTagCObject" type="cObj">
			<description><![CDATA[This is default bodytag overridden by “.bodyTag” if that is set.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bodyTagMargins" type="int">
			<description><![CDATA[margins in the bodytag. 

Property:
.useCSS = 1 (boolean) - will set a “BODY {margin: ...}” line in the in-document style declaration - for XHTML compliance.

Example:
value 4
adds leftmargin="4" topmargin="4" marginwidth="4" marginheight="4"  to the bodyTag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="config" type="CONFIG">
			<description><![CDATA[configuration for the page. Any entries override the same entries in the toplevel-object "config".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="frameSet" type="FRAMESET">
			<description><![CDATA[if any properties is set to this property, the page is made into a frameset.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="headTag" type="string">
			<description><![CDATA[Head-tag if alternatives are wanted]]></description>
			<default><![CDATA[<head>]]></default>
		</property>
		<property name="headerData" type="cObjArray">
			<description><![CDATA[Inserts content in the header-section. Could be JavaScripts, meta-tags, other stylesheet references. 
Is inserted after all the style-definitions.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="hover" type="string">
			<description><![CDATA[The color of a link when the mouse moves over it! (only MSIE). Uses in-document stylesheet.

Deprecated. Use stylesheet instead.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="hoverStyle" type="string">
			<description><![CDATA[Additional style information to the hover-color.

Example:
page.hoverStyle = font: bold; text-decoration: none;

Deprecated. Use stylesheet instead.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeCSS" type="array">
			<description><![CDATA[Inserts a stylesheet (just like the .stylesheet property) by allows to setting up more than a single stylesheet, because you can enter files in an array.

The file definition must be a valid "resource" datatype, otherwise nothing is inserted.

Each file has optional properties:
.media - setting the media attribute of the <style> tag.
.title - setting the title of the <style> tag.
.alternate - If set (boolean) then the rel-attribute will be "alternate stylesheet"
.import - If set (boolean) then the @import way of including a stylesheet is used instead of <link>

Example:
includeCSS {
  file1 = fileadmin/mystylesheet1.css
  file2 = stylesheet_uploaded_to_template*.css
  file2.title = High contrast
  file2.media = print
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeJS" type="array">
			<description><![CDATA[Inserts one or more (Java)Scripts in <script> tags.

The file definition must be a valid "resource" datatype, otherwise nothing is inserted.

Each file has optional properties:
.style - setting the MIME type of the script (default: text/javascript)

Example:
includeJS {
  file1 = fileadmin/helloworld.js
  file1.type = application/x-javascript
  file2 = javascript_uploaded_to_template*.js
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeLibs" type="array">
			<description><![CDATA[With this you may include php-files. This does the same as "includeLibrary" in ->CONFIG but this can include more than one file. These files are included after the file of includeLibrary.

NOTE:
The toplevel object "includeLibs" and the scripts defined with this property is added to each other. Script-keys (that is the "array of strings"-value, like below "ts_address") from this property of the page overrides any scripts-keys from the toplevel "includeLibs" property!
The script-filenames are of the datatype "resource".

Example:
includeLibs.ts_address = lib_filename.php
includeLibs.ts_shop = lib_filename.php

Please do not use the prefix shown above ("ts_") as this will probably be used by the standard TYPO3 libraries that will appear in the future. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="insertClassesFromRTE" type="boolean">
			<description><![CDATA[If set, the classes for the Rich Text Editor configured in Page TSconfig is inserted in as the first thing in the Style-section right after the setting of the stylesheet.

.add_mainStyleOverrideDefs = [* / list of tags ] - will add all the “RTE.default. mainStyleOverride_add” - tags configured as well.

Might be deprecated soon. Most likely the RTE should be configured by the stylesheet instead. Stay tuned...]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="meta" type="META">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noLinkUnderline" type="boolean">
			<description><![CDATA[Disables link-underlining. Uses in-document stylesheet.

Deprecated. Use stylesheet instead.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="shortcutIcon" type="string">
			<description><![CDATA[Favicon of the page. Create a reference to an icon here!
Browsers that support favicons display them in the browser's address bar, next to the site's name in lists of bookmarks, and next to the page's title in a Tabbed Document Interface.

Note:
This must be a valid ".ico"-file (iconfile)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="smallFormFields" type="boolean">
			<description><![CDATA[Renders formfields like textarea, input and select-boxes small with "verdana size 1" font. 
Uses in-document stylesheet.

Tip:
Use this together with the config-option "compensateFieldWidth" set to "0.6" for netscape-browsers in order to render the small form fields in the same width!

Deprecated. Use stylesheet instead.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[Wraps the content of the the cObject array with stdWrap options]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stylesheet" type="string">
			<description><![CDATA[Inserts a stylesheet in the <HEAD>-section of the page;
page.stylesheet = myStyleSheet.css
leads to
<link rel="stylesheet" href="myStyleSheet.css">]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="typeNum" type="int">
			<description><![CDATA[This decides the the typeId of the page. The value defaults to 0 for the first 
found PAGE object, but it MUST be set and be unique as soon you use more than one such object (watch this if you use frames on your page)!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wraps the content of the the cObject array]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TLO_GIFBUILDER" extends="array">
		<property name="charRangeMap" type="charRangeMap">
			<description><![CDATA[You can configure some global settings for GIFBUILDER by a top level object named “_GIFBUILDER”. One of the available properties of the global GIFBUILDER configuration is “charRangeMap”.

.charRangeMap

By this property you can globally configure mapping of font files for certain character ranges. For instance you might need GIFBUILDER to produce gif files with a certain font for latin characters while you need to use another true type font for Japanese glyphs. So what you need is to specify the usage of another font file when characters fall into another range of Unicode values.

In the GIFBUILDER object this is possible with the “splitRendering” option but if you have hundreds of GIFBUILDER objects around your site it is not very efficient to add 5-10 lines of configuration for each time you render text. Therefore this global setting allows you to match the basename of the main font face with an alternative font.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="addParams" extends="array">
		<property name="[myTagProperty]" type="stdWrap">
			<description><![CDATA[This defines the content of each added property to the tag.
If there is a tag-property with this name already (case-sensitive!) that property will be overridden! 
If the returned value is a blank string (but not zero!) then the existing (if any) property will not be overridden.
Example:
img.addParams.border = 0]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="_offset" type="int">
			<description><![CDATA[Use this to define which tag you want to manipulate.
1 is the first tag in the input, 2 is the second, -1 is the last, -2 is the second last]]></description>
			<default><![CDATA[1]]></default>
		</property>
	</type>
	<type id="CONSTANTS">
		<property name="[myConstant]" type="string">
			<description><![CDATA[Constants. 

Examples:
.EMAIL =  email@email.com
Now if parseFunc anywhere is configured with constants=1 then all cases of the string ###EMAIL### will be substituted in the text.
see ->parseFunc]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="encapsLines">
		<property name="addAttributes" type="array">
			<description><![CDATA[Attributes to set in the encapsulation tag.

Example:
addAttributes.P {
  style=padding-bottom:0px; margin-top:1px; margin-bottom:1px;
  align=center
}

([tagname] is in uppercase.)

.setOnly = 
exists : This will set the value ONLY if the property does not already exist
blank : This will set the value ONLY if the property does not already exist OR is blank (“”)

Default is to always override/set the attributes value.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="defaultAlign" type="stdWrap">
			<description><![CDATA[If set, this value is set as the default “align” value of the wrapping tags, both from .encapsTagList, .bypassEncapsTagList and .nonWrappedTag]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="encapsLinesStdWrap.[tagname]" type="stdWrap">
			<description><![CDATA[Wraps the content inside all encapsulated lines.
([tagname] is in uppercase.)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="encapsTagList" type="stringList">
			<description><![CDATA[List of tags which qualify as encapsulating tags. Must be lowercase.

Example:
encapsTagList = div, p

This setting will recognize the red line below as encapsulated lines:

First line of text
Some <div>text</div>
<p>Some text</p>
<div>Some text</div>
<B>Some text</B>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="innerStdWrap_all" type="stdWrap">
			<description><![CDATA[Wraps the content inside all lines, whether they are encapsulated or not.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nonWrappedTag" type="string">
			<description><![CDATA[For all non-wrapped lines, you can set here which tag it should be wrapped in. Example would be “P”. This is an alternative to .wrapNonWrappedLines and has the advantage that it's attributes are set by .addAttributes as well as defaultAlign. Thus you can easier match the wrapping tags used for nonwrapped and wrapped lines.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="remapTag.[tagname]" type="string">
			<description><![CDATA[Enter a new tag name here if you wish the tagname of any encapsulation to be unified to a single tag name.

For instance, setting this value to “remapTags.P=DIV” would convert:

<p>Some text</p>
<div>Some text</div>

to 

<div>Some text</div>
<div>Some text</div>

([tagname] is in uppercase.)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeWrapping" type="boolen">
			<description><![CDATA[If set, then all existing wrapping will be removed.

This:

First line of text
Some <div>text</div>
<p>Some text</p>
<div>Some text</div>
<B>Some text</B>

becomes this:

First line of text
Some <div>text</div>
Some text
Some text
<B>Some text</B>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrapNonWrappedLines" type="wrap">
			<description><![CDATA[Wrapping for non-encapsulated lines

Example:
.wrapNonWrappedLines = <P>|</P>

This:

First line of text
<p>Some text</p>

becomes this:

<P>First line of text</P>
<p>Some text</p>]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="filelink">
		<property name="ATagBeforeWrap" type="boolean">
			<description><![CDATA[If set, the link is first wrapped with ".wrap" and then the <A>-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagParams" type="stdWrap">
			<description><![CDATA[Additional parameters

Example:
class=”board”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="altText" type="stdWrap">
			<description><![CDATA[For icons (image made with "iconCObject" must have their own properties)

If no titltext is specified, it will use the alttext insteadIf no alttext is specified, it will use an empty alttext]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="file" type="stdWrap">
			<description><![CDATA[stdWrap of the label (by default the label is the filename) after having been wrapped with A-tag!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="icon" type="stdWrap">
			<description><![CDATA[Set if icon should be shown]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="iconCObject" type="cObj">
			<description><![CDATA[Enter a cObject to use alternatively for the icons, eg. IMAGE type.
If this is set, it'll substitute the use of the thumbs-script for display of thumbnails.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="icon_image_ext_list" type="stringList">
			<description><![CDATA[This is the extensions that should render as thumbsnails instead of icons.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="icon_link" type="boolean">
			<description><![CDATA[If the icon should be linked also]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="jumpurl" type="boolean">
			<description><![CDATA[Decides if the link should call the script with the jumpurl paramter in order to register any clicks in the stat.
This has the advantage that any clicks on the file will register in the stat.
The disadvantage is, that users cant right-click and select "Save Target As" in the browser.

Properties:
.secure (boolean)If set, then the file pointed to by jumpurl is NOT redirected to, but rather it's read from the file and returned with a correct header. This option adds a hash and locationData to the url and there MUST be access to the record in order to download the file. If the fileposition on the server is furthermore secured by a .htaccess file preventing ANY access, you've got secure download here!

.secure.mimeTypes (list of mimetypes, syntax [ext] = [mimetype]

Example:
.secure = 1
.secure.mimeTypes = pdf=application/pdf, doc=application/msword]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="labelStdWrap" type="stdWrap">
			<description><![CDATA[stdWrap options for the label (by default the label is the filename) before being wrapped with the A-tags.
Use this to eg. import another label from a database field or such.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="longdescURL" type="stdWrap">
			<description><![CDATA[For icons (image made with "iconCObject" must have their own properties)

"longdesc" attribute (URL pointing to document with extensive details about image).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="path" type="stdWrap">
			<description><![CDATA[Example:
"uploads/media/"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removePrependedNumbers" type="boolean">
			<description><![CDATA[if set, any 2-digit prepended numbers (“eg _23”) in the filename is removed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="size" type="stdWrap">
			<description><![CDATA[Set if size should be shown]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="string">
			<description><![CDATA[_self / _top / _blank / ...
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wraps the links.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="if">
		<property name="directReturn" type="boolean">
			<description><![CDATA[If this property exists the true/false of this value is returned. Could be used to set true/false by TypoScript constant]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="equals" type="stdWrap">
			<description><![CDATA[returns false if content does not equal ".value"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="isFalse" type="stdWrap">
			<description><![CDATA[If the content is "false"... (empty or zero)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="isGreaterThan" type="stdWrap">
			<description><![CDATA[returns false if content is not greater than ".value"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="isInList" type="stdWrap">
			<description><![CDATA[returns false if content is not in the comma-separated list ".value".
The list in ".value" may not have spaces between elements!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="isLessThan" type="stdWrap">
			<description><![CDATA[returns false if content is not less than ".value"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="isPositive" type="stdWrap">
			<description><![CDATA[returns false if content is not positive]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="isTrue" type="stdWrap">
			<description><![CDATA[If the content is "true".... (not empty string and not zero)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="negate" type="boolean">
			<description><![CDATA[This negates the result just before it exits. So if anything above returns true the overall returns ends up returning false!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="value" type="stdWrap">
			<description><![CDATA["value" (the comparison value mentioned above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="imageLinkWrap">
		<property name="JSwindow" type="boolean">
			<description><![CDATA[The image will be opened in a new window which is fitted to the dimensions of the image!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSwindow.altUrl" type="stdWrap">
			<description><![CDATA[If this returns anything, the URL shown in the JS-window is NOT showpic.php but the url given here!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSwindow.altUrl_noDefaultParams" type="boolean">
			<description><![CDATA[If this is set, the image parameters are not appended to the altUrl
automatically. This is useful if you want to create them with a userfunction
instead.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSwindow.expand" type="intList">
			<description><![CDATA[x and y is added to the window dimensions.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSwindow.newWindow" type="boolean">
			<description><![CDATA[Each picture will open in a new window!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="alternativeTempPath" type="string">
			<description><![CDATA[Enter an alternative path to use for temp images. Must be found in the list in TYPO3_CONF_VARS[FE][allowedTempPaths]]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bodyTag" type="string">
			<description><![CDATA[Body tag of the new window]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="effects" type="string">
			<description><![CDATA[Example:
gamma=1,3 | sharpen=80 | solarize=70]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="enable" type="stdWrap">
			<description><![CDATA[The image is linked ONLY if this is true!!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="height" type="int">
			<description><![CDATA[Range:  1-1000
If you add "m" to either the width or height, the image will be held in proportions and width/height works as max-dimensions]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sample" type="boolean">
			<description><![CDATA[If set, -sample is used to scale images instead of -geometry. Sample does not use antialiasing and is therefore much faster.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="string">
			<description><![CDATA[NOTE: Only if ".JSwindow" is set]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="title" type="string">
			<description><![CDATA[page title of the new window (HTML)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="typolink" type="typolink">
			<description><![CDATA[NOTE: This overrides the imageLinkWrap if it returns anything!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="width" type="int">
			<description><![CDATA[Range: 1-1000
If you add "m" to either the width or height, the image will be held in proportions and width/height works as max-dimensions]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wrap of the image, which is output between the body-tags]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="imgResource">
		<property name="alternativeTempPath" type="string">
			<description><![CDATA[Enter an alternative path to use for temp images. Must be found in the list in TYPO3_CONF_VARS[FE][allowedTempPaths]]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ext" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[web]]></default>
		</property>
		<property name="frame" type="int">
			<description><![CDATA[Chooses which frame in an gif-animation or pdf-file. 
"" = first frame (zero)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="height" type="stdWrap">
			<description><![CDATA[see “.width”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="import" type="stdWrap">
			<description><![CDATA[value should be set to the path of the file
with stdWrap you get the filename from the data-array

Example:
This returns the first image in the field "image" from the data-array:
.import = uploads/pics/
.import.field = image
.import.listNum = 0]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="m" type="mask">
			<description><![CDATA[NOTE: Mask for the image.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxH" type="stdWrap">
			<description><![CDATA[Max height]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxW" type="stdWrap">
			<description><![CDATA[Max width]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="minH" type="int">
			<description><![CDATA[Min height (overrules maxW/maxH)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="minW" type="int">
			<description><![CDATA[Min width (overrules maxW/maxH)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[ImageMagick command-line:
fx. "-rotate 90" or "-negate"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sample" type="boolean">
			<description><![CDATA[If set, -sample is used to scale images instead of -geometry. Sample does not use antialiasing and is therefore much faster.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="width" type="stdWrap">
			<description><![CDATA[If both the width and the heigth are set and one of the numbers is appended by an "m", the proportions will be preserved and thus width/height are treated as maximum dimensions for the image. The image will be scaled to fit into width/height rectangle.

If both the width and the heigth are set and at least one of the numbers is appended by a "c", cropscaling will be enabled. This means that the proportions will be preserved and the image will be scaled to fit around a rectangle with width/height dimensions. Then, a centered portion from inside of the image (size defined by width/height) will be cut out.
The "c" can have a percentage value (-100 ... +100) after it, which defines how much the cropping will be moved off the center to the border.

Notice that you can only use “m” or “c” at the same time!

Examples:
This crops 120x80px from the center of the scaled image:
.width = 120c.height = 80c

This crops 100x100px; from landscape-images at the left and portrait-images centered:
.width = 100c-100.height = 100c

This crops 100x100px; from landscape-images a bit right of the center and portrait-images a bit upper than centered:
.width = 100c+30
.height = 100c-25]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="mask">
		<property name="bgImg" type="imgResource">
			<description><![CDATA[NOTE: Both "m.mask" and "m.bgImg" must be valid images.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bottomImg" type="imgResource">
			<description><![CDATA[An image masked by "m.bottomImg_mask" onto "m.bgImg" before the imgResources is masked by "m.mask". 
Both "m.bottomImg" and "m.bottomImg_mask" is scaled to fit the size of the imgResource image!
This is most often used to create an underlay for the imgResource.
NOTE: Both "m.bottomImg" and "m.bottomImg_mask" must be valid images.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bottomImg_mask" type="imgResource">
			<description><![CDATA[(optional)
NOTE: Both "m.bottomImg" and "m.bottomImg_mask" must be valid images.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="mask" type="imgResource">
			<description><![CDATA[The mask by which the image is masked onto "m.bgImg". Both "m.mask" and "m.bgImg" is scaled to fit the size of the imgResource image!
NOTE: Both "m.mask" and "m.bgImg" must be valid images.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="makelinks">
		<property name="http" type="makelinksHttp">
			<description><![CDATA[]]></description>
			<default><![CDATA[]]></default>
		</property>
		<property name="mailto" type="makelinksMailto">
			<description><![CDATA[]]></description>
			<default><![CDATA[]]></default>
		</property>
	</type>
	<type id="makelinksHttp">
		<property name="ATagBeforeWrap" type="boolean">
			<description><![CDATA[If set, the link is first wrapped with http.wrap and then the <A>-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagParams" type="stdWrap">
			<description><![CDATA[Additional parameters

Example:
class=”board”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="extTarget" type="string">
			<description><![CDATA[The target of the link]]></description>
			<default><![CDATA[_top]]></default>
		</property>
		<property name="keep" type="stringList">
			<description><![CDATA[list: &quot;scheme&quot;,&quot;path&quot;,&quot;query&quot;
As default the link-text will be the full domain-name of the link. 

Examples:
http://www.webaddress.rld/test/doc.php?id=3 
"": www.webaddress.rld
"scheme": http://www.webaddress.rld
"scheme,path": http://www.webaddress.rld/test/doc.php
"scheme,path,query": http://www.webaddress.rld/test/doc.php?id=3]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[wrap around the link]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="makelinksMailto">
		<property name="ATagBeforeWrap" type="boolean">
			<description><![CDATA[If set, the link is first wrapped with mailto.wrap and then the <A>-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagParams" type="stdWrap">
			<description><![CDATA[Additional parameters

Example:
class=”board”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[wrap around the link]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="numRows">
		<property name="select" type="select">
			<description><![CDATA[Select query for the operation.

The property “selectFields” is overridden internally with “count(*)”.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="table" type="string">
			<description><![CDATA[The name of the database table
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="parseFunc">
		<property name="allowTags" type="stringList">
			<description><![CDATA[List of tags, which are allowed to exist in code! 
Highest priority: If a tag is found in allowTags, denyTags is ignored!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="constants" type="boolean">
			<description><![CDATA[The toplevel-defined constants will be substituted in the text. The constant-name is wrapped in "###".

Example:
constants.EMAIL =  email@email.com
(NOTE: This is toplevel TypoScript!)
All cases of the string ###EMAIL### will be substituted in the text. The constants are defined as a toplevel object. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="denyTags" type="stringList">
			<description><![CDATA[List of tags, which may NOT exist in code! (use "*" for all.)
Lowest priority: If a tag is NOT found in allowTags, denyTags is checked. If denyTags is not "*" and the tag is not found in the list, the tag may exist!

Example:
This allows <B>, <I>, <A> and <IMG> -tags to exist
.allowTags = b,i,a,img
.denyTags = *]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="externalBlocks " type="stringList">
			<description><![CDATA[This allows you to pre-split the content passed to parseFunc so that only content outside the blocks with the given tags is parsed.
Extra properties:
.[tagname] {
  callRecursive = [boolean]; If set, the content of the block is directed into parseFunc again. Otherwise the content is just passed through with no other processing than stdWrap (see below)
  callRecursive.dontWrapSelf = [boolean]; If set, the tags of the block is not wrapped around the content returned from parseFunc.
  callRecursive.alternativeWrap = Alternative wrapping instead of the original tags.
  callRecursive.tagStdWrap = ->stdWrap processing of the block-tags.
  stdWrap = ->stdWrap processing of the whole block (regardless of whether callRecursive was set.)
  stripNLprev = [boolean]; Strips off last linebreak of the previous outside block
  stripNLnext = [boolean]; Strips off first linebreak of the next outside block
  stripNL = [boolean]: Does both of the above.

   HTMLtableCells = [boolean]; If set, then the content is expected to be a table and every table-cell is traversed.
   # Below, default is all cells and 1,2,3... overrides for specific cols.
   HTMLtableCells.[default/1/2/3/...] {
     callRecursive = [boolean]; The content is parsed through current parseFunc
      stdWrap = ->stdWrap processing of the content in the cell
      tagStdWrap = -> The <TD> tag is processed by ->stdWrap
   }
   HTMLtableCells.addChr10BetweenParagraphs = [boolean]; If set, then all </P><P> appearances will have a chr(10) inserted between them
}

Example:
This example is used to split regular bodytext content so that tables and blockquotes in the bodytext are processed correctly. The blockquotes are passed into parseFunc again (recursively) and further their top/bottom margins are set to 0 (so no apparent linebreaks are seen)
The tables are also displayed with a number of properties of the cells overridden.
tt_content.text.20.parseFunc.externalBlocks {
  blockquote.callRecursive=1
  blockquote.callRecursive.tagStdWrap.HTMLparser = 1
  blockquote.callRecursive.tagStdWrap.HTMLparser {
    tags.blockquote.fixAttrib.style.list = margin-bottom:0;margin-top:0;
    tags.blockquote.fixAttrib.style.always=1
  }
  blockquote.stripNLprev=1
  blockquote.stripNLnext=1

  table.stripNL=1
  table.stdWrap.HTMLparser = 1
  table.stdWrap.HTMLparser {
    tags.table.overrideAttribs = border=0 cellpadding=2 cellspacing=1 style="margin-top:10px; margin-bottom:10px;"
    tags.tr.allowedAttribs=0
    tags.td.overrideAttribs = valign=top bgcolor="#eeeeee" style="font-family : Verdana, Geneva, Arial, Helvetica, sans-serif;font-size : 10px;"
  }
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="if" type="if">
			<description><![CDATA[if "if" returns false the input value is not parsed, but returned directly.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="makelinks" type="makelinks">
			<description><![CDATA[Set it to 1 for conversion
Convert webadresses prefixed with "http://" and mail-adresses prefixed with "mailto:" 
to links.
Example:
makelinks = 1
makelinks.http.keep = path
makelinks.http.extTarget = _blank
makelinks.mailto.keep = path]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nonTypoTagStdWrap" type="stdWrap">
			<description><![CDATA[Like .plainTextStdWrap. Difference: 
.plainTextStdWrap works an ALL non-tag pieces in the text. .nonTypoTagStdWrap is post processing of all text (including tags) between special TypoTags (unless .breakoutTypoTagContent is not set for the TypoTag)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nonTypoTagUserFunc" type="string">
			<description><![CDATA[Like .userFunc. Differences is (like nonTypoTagStdWrap) that this is post processing of all content pieces around TypoTags while .userFunc processes all non-tag content. (Notice: .breakoutTypoTagContent must be set for the TypoTag if it's excluded from nonTypoTagContent)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="plainTextStdWrap" type="stdWrap">
			<description><![CDATA[This is stdWrap properties for all non-tag content. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="short" type="array">
			<description><![CDATA[Like constants above, but local.

Example:
This substitutes all occurencies of “T3” with “TYPO3 CMS” and “T3web” with a link to typo3.com.
short {
  T3 = TYPO3 CMS
  T3web = <a href=”http://typo3.com”>typo3</a>
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sword" type="wrap">
			<description><![CDATA[Marks up any words from the GET-method send array sword_list[] in the text. The word MUST be at least two characters long!
NOTE: works only with $GLOBALS["TSFE"]->no_cache==1]]></description>
			<default><![CDATA[<font color="red">|</font>]]></default>
		</property>
		<property name="tags" type="tags">
			<description><![CDATA[Here you can define custom tags that will parse the content to something.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="userFunc" type="string">
			<description><![CDATA[This passes the non-tag content to a function of your own choice. Similar to eg. .postUserFunc in stdWrap.
Remember the function name must possibly be prepended “user_”]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="plugin">
		<property name="_CSS_DEFAULT_STYLE" type="string">
			<description><![CDATA[Use this to have some default CSS styles inserted in the header section of the document. Most likely this will provide a default acceptable display from the plugin, but should ideally be cleared and moved to an external stylesheet.
This value is for all plugins read by the pagegen script when making the header of the document.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="_DEFAULT_PI_VARS.[piVar-key]" type="string">
			<description><![CDATA[Allows you to set default values of the piVars array which most plugins are using (and should use) for data exchange with themselves. 
This works only if the plugin calls $this->pi_setPiVarDefaults().]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="_LOCAL_LANG.[lang-key].[label-key]" type="string">
			<description><![CDATA[Can be used to override the default locallang labels for the plugin.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeLibs" type="stringList">
			<description><![CDATA[Property setting up the USER / USER_INT object of the plugin]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="userFunc" type="string">
			<description><![CDATA[Property setting up the USER / USER_INT object of the plugin]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="select">
		<property name="andWhere" type="stdWrap">
			<description><![CDATA[SQL-where without "AND"!, 
Example:
andWhere = doktype = 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="begin" type="int ">
			<description><![CDATA[begin with record number value

Special keyword: "total" is substituted with count(*)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="groupBy" type="string">
			<description><![CDATA[SQL-groupBy without "group by"! Eg. "CType"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="join" type="string">
			<description><![CDATA[Enter tablename for JOIN , LEFT OUTER JOIN and RIGHT OUTER JOIN respectively.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="languageField" type="string">
			<description><![CDATA[If set, this points to the field in the record which holds a reference to a record in sys_language table. And if set, the records returned by the select-function will be selected only if the value of this field matches the $GLOBALS[“TSFE”]->sys_language_uid (which is set by the config.sys_language_uid option)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="max" type="int ">
			<description><![CDATA[max records

Special keyword: "total" is substituted with count(*)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="orderBy" type="string">
			<description><![CDATA[without "order by"! Eg. "sorting, title"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="pidInList" type="stdWrap">
			<description><![CDATA[
list of page_id]]></description>
			<default><![CDATA[this]]></default>
		</property>
		<property name="selectFields" type="string">
			<description><![CDATA[List of fields to select, or “count(*)”.]]></description>
			<default><![CDATA[*]]></default>
		</property>
		<property name="uidInList" type="intList">
			<description><![CDATA[list of page_id
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="where" type="string">
			<description><![CDATA[SQL-where without "where"!, Eg. " (title LIKE '%SOMETHING%' AND NOT doktype) "]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="split" extends="cObjArray">
		<property name="1" type="stdWrap">
			<description><![CDATA[The object that should treat the value. 
NOTE: The "current"-value is set to the value of current item, when the objects are called. See "stdWrap" / current.

Example (stdWrap used):
1.current = 1
1.wrap = <B> | </B>

Example (CARRAY used):
1 {
  10 = TEXT
  10.current = 1
  10.wrap = <B> | </B>
  20 = CLEARGIF
  20.height = 20
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="stdWrap">
			<description/>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="stdWrap">
			<description/>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cObjNum" type="int">
			<description><![CDATA[+optionSplit
This is a pointer the array of this object ("1,2,3,4"), that should treat the items, resulting from the split.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="max" type="stdWrap">
			<description><![CDATA[max number of splits]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="min" type="stdWrap">
			<description><![CDATA[min number of splits.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="returnKey" type="stdWrap">
			<description><![CDATA[Instead of parsing the split result, just return this element of the index immediately.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="token" type="stdWrap">
			<description><![CDATA[string or character (token) used to split the value]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap ">
			<description><![CDATA[Defines a wrap for each item.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="stdWrap">
		<property name="HTMLparser" type="HTMLparser">
			<description><![CDATA[boolean / HTMLparser
This object allows you to parse the HTML-content and make all kinds of advanced filterings on the content.
Value must be set and properties are those of ->HTMLparser.
(See adminguide for ->HTMLparser options)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="TCAselectItem" type="array">
			<description><![CDATA[Resolves a comma seperated list of values into the TCA item representation.

.table (string): The Table to look up
.field (string): The field to resolve
.delimiter (string): Delimiter for concatenating multiple elements.

Notice: Currently this works only with TCA fields of type “select” which are not database relations.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="addParams" type="addParams">
			<description><![CDATA[Lets you add tag-parameters to the content if the content is a tag!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="age" type="string">
			<description><![CDATA[If enabled with a "1" (number, integer) the content is seen as a date (UNIX-time) and the difference from present time and the content-time is returned as one of these four variations:
"xx min" or "xx hrs" or "xx days" or "xx yrs"
The limits between which layout is used are 60 minutes, 24 hours, 365 days,

NOTE: 
If you set this property with a non-integer, it's used to format the four units. This is the default value: 
" min| hrs| days| yrs"

Set another string if you want to change the units. You may include the "-signs. They are removed anyway.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="append" type="cObj">
			<description><![CDATA[cObject appended to content (after)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="br" type="boolean">
			<description><![CDATA[PHP function nl2br(); Converts linebreaks to <br />-tags]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="brTag" type="string">
			<description><![CDATA[All ASCII-codes of "10" (CR) is substituted with value]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bytes" type="boolean">
			<description><![CDATA[Will format the input (an integer) as bytes: bytes, kb, mb

If you add a value for the property “labels” you can alter the default suffixes. Labels for bytes, kilo, mega and giga are separated by vertical bar (|) and possibly encapsulated in "". Eg: " | K| M| G" (which is the default value)
Thus:

bytes.labels = “ | K| M| G”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cObject" type="cObj">
			<description><![CDATA[Loads content from a content-object]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="case" type="case">
			<description><![CDATA[Converts case

Uses "renderCharset" for the operation.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="char" type="int">
			<description><![CDATA[Content is set to the chr(value).
PHP: $content=chr(intval($conf["char"]);]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="crop" type="string">
			<description><![CDATA[Crops the content to a certain length
Syntax: +/- (chars) = from left / from right | [string] | [boolean: keep whole words]

Examples:  
20 | ...    => max 20 characters. If more, the value will be truncated to first 20 chars and prepended with "..."
-20 | ... => max 20 characters. If more, the value will be truncated to last 20 chars and appended with "..."
20 | ... | 1 => max 20 characters. If more, the value will be truncated to last 20 chars and appended with "...". If the division is in the middle of a word, the remains of that word is removed.

Uses "renderCharset" for the operation.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="csConv" type="string">
			<description><![CDATA[Convert the charset of the string from the charset given as value to the current rendering charset of the frontend (renderCharset).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="current" type="boolean">
			<description><![CDATA[Sets the content to the "current"-value (see ->split)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="data" type="getText">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dataWrap" type="string">
			<description><![CDATA[The content is parsed for sections of {...} and the content of {...} is of the type getText and substituted with the result of getText.

Example:
This should result in a font-tag where the fontsize is decided by the global variable "size":
<font size="{global : size}"> | </font>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="date" type="string">
			<description><![CDATA[The content should be data-type "UNIX-time". Returns the content formatted as a date.
$content=Date($conf["date"], $content);

Example where a timestamp is imported:
.value.field = tstamp
.value.date = ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debug" type="boolean">
			<description><![CDATA[Prints content with HTMLSpecialChars() and <PRE></PRE>: Usefull for debugging which value stdWrap actually ends up with, if you're constructing a website with TypoScript. 
Should be used under construction only.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debugData" type="boolean">
			<description><![CDATA[Prints the current data-array, $cObj->data, directly to browser. This is where ".field" gets data from.
Should be used under construction only. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debugFunc" type="boolean">
			<description><![CDATA[Prints the content directly to browser with the debug() function.
Should be used under construction only.
Set to value “2” the content will be printed in a table - looks nicer.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="doubleBrTag" type="string">
			<description><![CDATA[All double-line-breaks are substituted with this value.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="editIcons" type="string">
			<description><![CDATA[If not empty, then insert an icon linking to the typo3/alt_doc.php with some parameters to build and backend user edit form for certain fields.
The value of this property is a list of fields from a table to edit. It's assumed that the current record of the cObj is the record to be edited.
Syntax: optional tablename : comma list of fieldnames[list of pallette-field names separated by | ]

.beforeLastTag (1,0,-1): If set (1), the icon will be inserted before the last HTML tag in the content. If -1 the icon will be prepended to the content. If zero (0) the icon is appended in the end of the content.

.styleAttribute (string): Adds a style-attribute to the icon image with this value. For instance you can set “position:absolute” if you want a non-destructive insertion of the icon. Notice: For general styling all edit icons has the class “frontEndEditIcons” which can be addressed from the stylesheet of the site.

.iconTitle (string): The title attribute of the image tag.

.iconImg (HTML): Alternative HTML code instead of the default icon shown. Can be used to set another icon for editing (for instance a red dot or otherwise... :-)

Example:
This will insert an edit icon which links to a form where the header and bodytext fields are displayed and made available for editing (provided the user has access!).
editIcons = tt_content : header, bodytext

Or this line that puts the header_align and date field into a “palette” which means they are displayed on a single line below the header field. This saves some space.
editIcons = header[header_align|date], bodytext
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="editPanel" type="EDITPANEL">
			<description><![CDATA[boolean / editPanel]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="encapsLines" type="encapsLines">
			<description><![CDATA[Lets you split the content by chr(10) and proces each line independently. Used to format content made with the RTE.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="field" type="string">
			<description><![CDATA[Sets the content to the value $cObj->data[field]

Example: Set content to the value of field "title": ".field = title"
$cObj->data changes. See the description for the data type "getText"/field!

Note: You can also divide fieldnames by “//”. Say, you set “nav_title // title” as the value, then the content from the field nav_title will be returned unless it is a blank string, in which case the title-field's value is returned.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fieldRequired" type="string">
			<description><![CDATA[value in this field MUST be set]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="filelink" type="string">
			<description><![CDATA[Used to make lists of links to files.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="filelist" type="stdWrap">
			<description><![CDATA[Reads a directory and returns a list of files.
The value is exploded by "|" into parameters:
1: The path
2: comma-list of allowed extensions (no spaces between); if empty all extensions goes.
3: sorting: name, size, ext, date, mdate (modification date)
4: reverse: Set to "r" if you want a reversed sorting
5: fullpath_flag: If set, the filelist is returned with complete paths, and not just the filename]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fontTag" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="htmlSpecialChars" type="boolean">
			<description><![CDATA[Passes the content through htmlspecialchars()-PHP-function
Additional property “.preserveEntities” will preserve entities so only non-entity chars are affected.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="if" type="if">
			<description><![CDATA[If the if-object returns false, stdWrap returns "" immediately]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ifBlank" type="stdWrap">
			<description><![CDATA[Same as "ifEmpty" but the check is done using strlen().]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ifEmpty" type="stdWrap">
			<description><![CDATA[if the content is empty (trimmed) at this point, the content is loaded with "ifEmpty". Zeros are treated as empty values!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="innerWrap" type="stdWrap">
			<description><![CDATA[Wraps the content]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="innerWrap2" type="stdWrap">
			<description><![CDATA[same as .innerWrap (but watch the order in which they are executed)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="insertData" type="boolean">
			<description><![CDATA[If set, then the content string is parsed like .dataWrap above.

Example:
Displays the page title:
10 = TEXT
10.value = This is the page title: {page:title}
10.insertData = 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="intval" type="boolean">
			<description><![CDATA[PHP function intval(); Returns an integer.
PHP: $content=intval($content);]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="keywords" type="boolean">
			<description><![CDATA[splits the content by characters "," ";" and chr(10) (return), trims each value and returns a comma-separated list of the values.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lang" type="ARR_languages_strings">
			<description><![CDATA[This is used to define optional language specific values. 
If the global language key set by the ->config property .language is found in this array, then this value is used instead of the default input value to stdWrap.

Example:
config.language = de
page.10 = TEXT
page.10.value = I am a Berliner!
page.10.lang.de = Ich bin ein Berliner!

Output will be “Ich bin...” instead of “I am...”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="listNum" type="string">
			<description><![CDATA[Explodes the content with "," (comma) and the content is set to the item[value]. 

Special keyword: "last" is set to the last element of the array!

.splitChar (string):
Defines the string used to explode the value. If splitChar is an integer, the character with that number is used (eg. "10" to split lines...).
Default: “," (comma)
.stdWrap (stdWrap properties):
stdWrap properties of the listNum...

Examples:
We have a value of "item 1, item 2, item 3, item 4":
This would return "item 3":
.listNum = last - 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noTrimWrap" type="wrap">
			<description><![CDATA[This wraps the content with the values val1 and val2 in the example below - including surrounding whitespace! - without trimming the values. Note that this kind of wrap requires a "|"  character to begin and end the wrap.

Example:
| val1 | val2 |]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="numRows" type="numRows">
			<description><![CDATA[Returns the number of rows resulting from the select]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offsetWrap" type="intList">
			<description><![CDATA[This wraps the input in a table with columns to the left and top that offsets the content by the values of x,y. Based on the cObject OTABLE.

.tableParams / .tdParams /stdWrap
- used to manipulate tableParams/tdParams (default width=99%)  of the offset. Default: See OTABLE.

.stdWrap
- stdWrap properties wrapping the offsetWrap'ed output]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="outerWrap" type="stdWrap">
			<description><![CDATA[Wraps the complete content]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="override" type="stdWrap">
			<description><![CDATA[if "override" returns something else than "" or zero (trimmed), the content is loaded with this! ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="parseFunc" type="parseFunc">
			<description><![CDATA[object path reference / parseFunc
Processing instructions for the content. 
Notice: If you enter a string as value this will be taken as a reference to an object path globally in the TypoScript object tree. This will be the basis configuration for parseFunc merged with any properties you add here. It works exactly like references does for content elements.

Example:
parseFunc = < lib.parseFunc_RTE
parseFunc.tags.myTag = TEXT
parseFunc.tags.myTag.value = This will be inserted when &lt;myTag&gt; is found!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="postCObject" type="cObj">
			<description><![CDATA[cObject appended the content]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="postUserFunc" type="string">
			<description><![CDATA[Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter. Please see the description of the cObject USER for in-depth information.

Example:
You can paste this example directly into a new template record.

page = PAGE
page.typeNum=0
includeLibs.something = media/scripts/example_callfunction.php

page.10 = TEXT
page.10 {
  value = Hello World
  postUserFunc = user_reverseString
  postUserFunc.uppercase = 1
}

page.20 = TEXT
page.20 {
  value = Hello World
  postUserFunc = user_various->reverseString
  postUserFunc.uppercase = 1
  postUserFunc.typolink = 11
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="postUserFuncInt" type="string">
			<description><![CDATA[Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter. The result will be rendered non-cached, outside the main page-rendering. Please see the description of the cObject USER_INT and PHP_SCRIPT_INT for in-depth information.
Supplied by Jens Ellerbrock]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="preCObject" type="cObj">
			<description><![CDATA[cObject prepended the content ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="preIfEmptyListNum" type="string">
			<description><![CDATA[(as "listNum" below)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="preUserFunc" type="string">
			<description><![CDATA[Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter.
See .postUserFunc]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prefixComment" type="string">
			<description><![CDATA[Prefixes content with a HTML comment with the second part of input string (divided by "|") where first part is an integer telling how many trailing tabs to put before the comment on a new line.
The content is parsed through insertData.

Example:
prefixComment = 2 | CONTENT ELEMENT, uid:{field:uid}/{field:CType}

Will indent the comment with 1 tab (and the next line with 2+1 tabs)
(Added in TYPO3 >3.6.0RC1)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prepend" type="cObj">
			<description><![CDATA[cObject prepended to content (before)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prioriCalc" type="boolean">
			<description><![CDATA[Calculation of the value using operators -+*/%^ plus respects priority to + and - operators and parenthesis levels ().
. (period) is decimal delimiter.
Returns a doublevalue.
If .prioriCalc is set to “intval” an integer is returned.
There is no errorchecking and division by zero or other invalid values may generate strange results. Also you use a proper syntax because future modifications to the function used may allow for more operators and features. 

Examples:
100%7 = 2
-5*-4 = 20
+6^2 = 36
6 ^(1+1) = 36
-5*-4+6^2-100%7  = 54 
-5 * (-4+6) ^ 2 - 100%7 = 98
-5 * ((-4+6) ^ 2) - 100%7 = -22]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rawUrlEncode" type="boolean">
			<description><![CDATA[Passes the content through rawurlencode()-PHP-function]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeBadHTML" type="boolean">
			<description><![CDATA[Removes "bad" HTML code based on a pattern that filters away HTML that is considered dangerous for XSS bugs.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="required" type="boolean">
			<description><![CDATA[This flag requires the content to be set to some value after any content-import and treatment that might have happend now (data, field, current, listNum, trim). Zero's is NOT regarded as empty! Use "if" instead!
If the content i empty, "" is returned immediately.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setContentToCurrent" type="boolean">
			<description><![CDATA[Sets the current value to the incoming content of the function.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setCurrent" type="stdWrap">
			<description><![CDATA[Sets the "current"-value. This is normally set from some outside routine, so be careful with this. But it might be handy to do this]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="space" type="string">
			<description><![CDATA[[spaceBefore]   |   [spaceAfter]

Additional property:
.useDiv = 1
If set, a clear gif is not used by rather a <div> tag with a style-attribute setting the height. (Affects spaceBefore and spaceAfter as well).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spaceAfter" type="stdWrap">
			<description><![CDATA[Pixels space after. Done with a clear-gif; <img ...><BR>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spaceBefore" type="stdWrap">
			<description><![CDATA[Pixels space before. Done with a clear-gif; <img ...><BR>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="split" type="split">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[Recursive call to stdWrap function]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="strftime" type="string">
			<description><![CDATA[Exactly like "date" above. See the PHP-manual (strftime) for the codes, or datatype "strftime-conf".
This formatting is useful if the locale is set in advance in the CONFIG-object. See this.

Properties:
.charset  : Can be set to the charset of the output string if you need to convert it to renderCharset. Default is to take the intelligently guessed charset from t3lib_cs.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stripHtml" type="boolean">
			<description><![CDATA[Strips all html-tags.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="substring" type="stringList">
			<description><![CDATA[Returns the substring with [p1] and [p2] send as the 2nd and 3rd parameter to the PHP substring function.

Uses "renderCharset" for the operation.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tableStyle" type="tableStyle">
			<description><![CDATA[Wraps content with table-tags]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textStyle" type="textStyle">
			<description><![CDATA[Wraps content in font-tags]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="trim" type="boolean">
			<description><![CDATA[PHP-function trim(); Removes whitespace around value]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="typolink" type="typolink">
			<description><![CDATA[Wraps the content with a link-tag]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrapSplitChar">
			<description><![CDATA[]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap2" type="wrapSplitChar">
			<description><![CDATA[same as .wrap (but watch the order in which they are executed)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap3" type="wrapSplitChar">
			<description><![CDATA[same as .wrap (but watch the order in which they are executed)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrapAlign" type="stdWrap">
			<description><![CDATA[Wraps content with <div style=text-align:[value];”> | </div> if align is set]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="tableStyle">
		<property name="align" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="border" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cellpadding" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cellspacing" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color.default" type="string">
			<description><![CDATA[[default],[1],[2] = User defined
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color.field" type="string">
			<description><![CDATA[Set to fieldname from the $cObj->data-array]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[HTML table parameters
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="tags" extends="array">
		<property name="[myHtmlTag]" type="cObject">
			<description><![CDATA[Every entry in the Array... corresponds to a tag, that will be parsed. The elements MUST be in lowercase. 
Every entry must be set to a content-object.
"current" is set to the content of the tag, eg <TAG>content</TAG>: here "current" is set to "content".
Parameters:
Parameters of the tag is set in $cObj->parameters (key is lowercased):
<TAG COLOR="red">content</TAG>
=> $cObj->parameters[color] = red 
Special added properties to the content-object:
$cObj->parameters[allParams]:  this is automatically set to the whole parameter-string of the tag, eg ' color="red"'
[cObject].stripNL: is a boolean option, which tells parseFunc that NewLines before and after content of the tag should be stripped.
[cObject].breakoutTypoTagContent: is a boolean option, which tells parseFunc that this block of content is breaking up the nonTypoTag content and that the content after this must be re-wrapped.

Examples:
tags.bold = TEXT
tags.bold {
  current = 1
  wrap = <B> | </B>
}
tags.bold.stripNL = 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="textStyle">
		<property name="align.field" type="align">
			<description><![CDATA[Set to fieldname from the $cObj->data-array]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="altWrap" type="wrap">
			<description><![CDATA[If this value is set, the wrapping with a font-tag based on font,size and color is NOT done. Rather the element is wrapped with this value.
Use it to assign a stylesheet by setting this value to eg.

<div class=”text”> | </div>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color.1" type="string">
			<description><![CDATA[[1],[2] = User defined]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color.default" type="stdWrap">
			<description><![CDATA[[default] = User defined]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color.field" type="string">
			<description><![CDATA[Set to fieldname from the $cObj->data-array

See "content.php" for the colors available]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="face.default" type="stdWrap">
			<description><![CDATA[[default] = User defined]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="face.field" type="string">
			<description><![CDATA[Set to fieldname from the $cObj->data-array

[1] = "Times New Roman";
[2] = "Verdana,Arial,Helvetica,Sans serif";
[3] = "Arial,Helvetica,Sans serif";]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="properties.default" type="stdWrap">
			<description><![CDATA[[default] = User defined (This value will be used whenever ".field" is false!)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="properties.field" type="int">
			<description><![CDATA[Set to fieldname from the $cObj->data-array

The property values goes like this:
bit 0: <B>
bit 1: <I>
bit 2: <U>
bit 3: (uppercase)

Thus a value of 5 would result in bold and underlined text]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="size.default" type="stdWrap">
			<description><![CDATA[[default] = User defined]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="size.field" type="string">
			<description><![CDATA[Set to fieldname from the $cObj->data-array

[1] = 1;
[2] = 2;
[3] = 3;
[10] = "+1";
[11] = "-1";]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="typolink">
		<property name="ATagBeforeWrap" type="boolean">
			<description><![CDATA[If set, the link is first wrapped with ".wrap" and then the <A>-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagParams" type="stdWrap">
			<description><![CDATA[Additional parameters

Example:
class=”board”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSwindow_params" type="string">
			<description><![CDATA[Preset values for opening the window. This example lists almost all possible attributes:
status=1,menubar=1,scrollbars=1,resizable=1,location=1,directories=1,toolbar=1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="addQueryString" type="boolean">
			<description><![CDATA[Add the QUERY_STRING to the start of the link. Notice that this does not check for any duplicate parameters! This is not a problem (only the last parameter of the same name will be applied), but enable "config.uniqueLinkVars" if you still don't like it.

.method: If set to to GET or POST then then the parsed query arguments (GET or POST data) will be used. This settings are useful if you use URL processing extensions like Real URL, which translate part of the path into query arguments.
It's also possible to get both, POST and GET data, on setting this to
"POST,GET" or "GET,POST". The last method in this sequence takes
precedence and overwrites the parts that are also present for the first
method.

.exclude: List of query arguments to exclude from the link (eg L or cHash).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="additionalParams" type="stdWrap">
			<description><![CDATA[This is parameters that are added to the end of the url. This must be code ready to insert after the last parameter. 

Example:
'&print=1'
'&sword_list[]=word1&sword_list[]=word2'

Applications:
This is very useful when linking to pages from a searchresult. The searchwords are stored in the register-key SWORD_PARAMS and can be insert directly like this:
.additionalParams.data = register:SWORD_PARAMS

NOTE: This is only active for internal links!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="extTarget" type="stdWrap">
			<description><![CDATA[target used for external links]]></description>
			<default><![CDATA[_top]]></default>
		</property>
		<property name="no_cache" type="stdWrap">
			<description><![CDATA[Adds a "&no_cache=1"-parameter to the link]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="parameter" type="stdWrap">
			<description><![CDATA[This is the data, that ->typolink uses to create the link. The value is trimmed and if it's empty, ->typolink returns the input value untouched.

NOTE: If used from parseFunc, this value should be imported by:
typolink.parameter.data = parameters : allParams

Examples:
Internal links:
integers (51): creates a link to page with uid = 51
filerefs (fileadmin/somedir/thedoc.html): creates a link to the file on the local server.
strings (some_alias):  creates a link to the page with alias = "some_alias"

External links:
email-adresses (name@email.com): creates a link to the email-addr.
domains (www.domain.com): creates link to http://-page

The input is parsed like this:
First the parameter is splitted by character-space. This provides a way to pass more parameters. See "target" below here.
If a "@" is in the string, it's an email
If a period (.) is in the string AND if the period (.) is found before a slash (/) is found OR if a doubleslash is found, then it's a URL
If a slash (/) is found, it's a filereference. If the file/directory does not exist on the server, the link is NOT made!

Now the input can be an alias or page-id. If the input is an integer it's a page-id, if it's two comma separated integers, it's a id/type pair, else it's an alias. For page-id's or aliases you can prepend a "#" mark with a number indication tt_content record number on the page to jump to! (if .section-property is present, it overrides this).
If you insert only "#234" where "234" is the tt_content record number, it links to the current page-id
Notice: The parameter can contain a keyword that hands over link generation to an external function. See example below this table!

Target
Target is normally defined by the "extTarget" and "target" properties of typolink. But you may override this target by adding the new target after the parameter separated by a whitespace. Thus the target becomes the second parameter.
If the “Target” parameter is set to the “-” character, then it's the same as no target passed to the function. This feature enables you to still pass a class as third parameter and title as fourth parameter without setting the target also.

Open in windows with fixed dimensions (JavaScript)
It is possible to open the link in a window opened by JavaScript (with “window.open”). For this, just set the target value to “123x456” where 123 is the window width and 456 is the window height. You can also specify additional parameters to the function by entering them separated from the width and height with a colon “:”. For instance “230x450:resizable=0,location=1” will disable resizing of the window and enable the location bar.
Also see property “JSwindow”.

Class
If you specify a third parameter separated by whitespace in the parameter value this becomes the class-parameter of the link. This class parameter is inserted in the link-tag before any values from .ATagParams which means this class value will override any class value set in ATagParams (at least for MSIE). If set to “-”, then it's the same as no class passed to the function. This feature enables you to still pass a title as fourth parameter without setting the class also.

Title
The title attribute is normally specified via .ATagParams or directly via the .title property. But you may override this value by adding the desired title as the fourth parameter (parameters separated by whitespace) to typolink.

Examples of multiparameters:
Consider this .parameter value passed to this function:

51  _blank  blueLink

This would result in a link approx like this:

<A href=”?id=51” target=”_blank” class=”blueLink”>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="returnLast" type="string">
			<description><![CDATA[If set to "url" then it will return the URL of the link ($this->lastTypoLinkUrl)
If set to "target" it will return the target of the link.
So, in these two cases you will not get the value wrapped but the url or target value returned!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="section" type="stdWrap">
			<description><![CDATA[If this value is present, it's prepended with a "#" and placed after any internal url to another page in TYPO3.
This is used create a link, which jumps from one page directly the section on another page.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="stdWrap">
			<description><![CDATA[target used for internal links]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="title" type="stdWrap">
			<description><![CDATA[Sets the title parameter of the A-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="useCacheHash" type="boolean">
			<description><![CDATA[If set, the additionalParams list is exploded and calculated into a hashstring appended to the url, like “&cHash=ae83fd7s87”. When the caching mechanism sees this value, it calculates the same value on the server based on incoming values in HTTP_GET_VARS, excluding id,type,no_cache,ftu,cHash,MP values. If the incoming cHash value matches the calculated value, the page may be cached based on this.
The [SYS][encryptionKey] is included in the hash in order to make it unique for the server and non-predictable.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="userFunc" type="string">
			<description><![CDATA[This passes the link-data compiled by the typolink function to a user-defined function for final manipulation.
The $content variable passed to the user-function (first parameter) is an array with the keys “TYPE”,  “TAG”, “url”, “targetParams” and “aTagParams”. 
TYPE is an indication of link-kind: mailto, url, file, page
TAG is the full <A>-tag as generated and ready from the typolink function.
The latter three is combined into the 'TAG' value after this formula:

<a href="'.$finalTagParts['url'].'"'.
           $finalTagParts['targetParams'].
           $finalTagParts['aTagParams'].'>

The userfunction must return an <A>-tag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wraps the links.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
</tsRef>
