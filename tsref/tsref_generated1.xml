<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2006 rel. 3 sp2 (http://www.altova.com) by Christian (schinkistan) -->
<tsRef>
	<type id="CARRAY" extends="stdWrap" name="CARRAY">
		<property name="1" type="cObj">
			<description><![CDATA[This is a numerical "array" of content-objects (cObjects). The order by which you specific the objects is not important as the array will be sorted before it's parsed!

]]></description>
		</property>
		<property name="2" type="cObj">
			<description><![CDATA[This is a numerical "array" of content-objects (cObjects). The order by which you specific the objects is not important as the array will be sorted before it's parsed!

]]></description>
		</property>
		<property name="3" type="cObj">
			<description><![CDATA[This is a numerical "array" of content-objects (cObjects). The order by which you specific the objects is not important as the array will be sorted before it's parsed!

]]></description>
		</property>
		<property name="4" type="cObj">
			<description><![CDATA[This is a numerical "array" of content-objects (cObjects). The order by which you specific the objects is not important as the array will be sorted before it's parsed!

]]></description>
		</property>
	</type>
	<type id="CARRAY+TDParams" extends="CARRAY" name="CARRAY+TDParams">
		<property name="TDParams" type="string">
			<description><![CDATA[&lt;TD&gt;-params 
      NOTE: This applies ONLY if "CARRAY +TDParams" is set to be data type
This property is used only in some cases where CARRAY is used. Please look out for a note about that in the various cases.
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="CASE" extends="cObjArray" name="CASE">
		<property name="default" type="cObj">
			<description><![CDATA[The default object, if not defined, nothing is returned in the default case.
]]></description>
		</property>
		<property name="if" type="if">
			<description><![CDATA[if "if" returns false nothing is returned

]]></description>
		</property>
		<property name="key" type="stdWrap">
			<description><![CDATA[If the value of this key is defined, that object will be returned, otherwise the default-object will be returned.
<pre>key = helloWorld
helloWorld = <a href="/index.php/TSref/TEXT" title="TSref/TEXT">TEXT</a>

helloWorld.value = this item will be returned
</pre> 
]]></description>
		</property>
		<property name="setCurrent" type="stdWrap">
			<description><![CDATA[Sets the "current"-value. 

]]></description>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[stdwrap properties, applied on the returned object.
]]></description>
		</property>
	</type>
	<type id="CLEARGIF" name="CLEARGIF">
		<property name="height" type="stdWrap">
			<description><![CDATA[&lt;img&gt;-data:height /stdWrap
]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="width" type="stdWrap">
			<description><![CDATA[&lt;img&gt;-data:width /stdWrap
]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[ 
]]></description>
			<default><![CDATA[ | <BR>]]></default>
		</property>
	</type>
	<type id="COBJ_ARRAY" extends="cObjArray">
		<property name="if" type="if">
			<description><![CDATA[if "if" returns false the COA is NOT rendered]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="COA" extends="COBJ_ARRAY">
  </type>
	<type id="COA_INT" extends="COBJ_ARRAY">
		<property name="includeLibs" type="list of resource">
			<description><![CDATA[(This property is used only if the object is COA_INT!, See introduction.)
This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="COLUMNS">
		<property name="TDparams" type="string">
			<description><![CDATA[&lt;TD&gt;-params
]]></description>
			<default><![CDATA[valign=top]]></default>
		</property>
		<property name="1" type="cObj">
			<description><![CDATA[This is the content-object for each column!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="cObj">
			<description><![CDATA[This is the content-object for each column!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="cObj">
			<description><![CDATA[This is the content-object for each column!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="4" type="cObj">
			<description><![CDATA[This is the content-object for each column!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="after" type="cObj">
			<description><![CDATA[This is a cObject placed after the columns-table!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="gapBgCol" type="stdWrap">
			<description><![CDATA[HTML-color /stdWrap
background-color for the gap-tablecells]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="gapLineCol" type="stdWrap">
			<description><![CDATA[HTML-color /stdWrap
      Line color]]></description>
			<default><![CDATA[black]]></default>
		</property>
		<property name="gapLineThickness" type="stdWrap">
			<description><![CDATA[int /stdWrap
      lineThickness of the dividerline in the gap between cells
0 = no line]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="gapWidth" type="stdWrap">
			<description><![CDATA[int /stdWrap
      Width of the gap between columns. 
0 = no gap]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="if" type="if">
			<description><![CDATA[if "if" returns false the columns are not rendered!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rows" type="int (Range: 2-20)">
			<description><![CDATA[int (Range: 2-20)
      The number of rows  in the columns.]]></description>
			<default><![CDATA[2]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tableParams" type="string">
			<description><![CDATA[&lt;TABLE&gt;-params
]]></description>
			<default><![CDATA[border=0 cellspacing=0 cellpadding=0]]></default>
		</property>
		<property name="totalWidth" type="int">
			<description><![CDATA[The total-width of the columns+gaps]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="CONFIG">
		<property name="ATagParams" type="string">
			<description><![CDATA[&lt;A&gt;-params
      Additional parameters to all links in TYPO3 (excluding menu-links)

Example:
To blur links, insert: 
onFocus="blurLink(this)"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="MP_defaults" type="string">
			<description><![CDATA[Allows you to set a list of page id numbers which will always have a certain “&MP=...” parameter added.

Syntax:
[id],[id],... : [MP-var] | [id],[id],... : [MP-var] | ... 

Example:
config.MP_defaults = 36,37,48 : 2-207

This will by default add “&MP=2-207” to all links pointing to pages 36,37 and 48]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="MP_disableTypolinkClosestMPvalue" type="boolean">
			<description><![CDATA[If set, the typolink function will not try to find the closest MP value for the id.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="MP_mapRootPoints" type="list of PIDs/string">
			<description><![CDATA[list of PIDs/string
      Defines a list of ID numbers from which the MP-vars are automatically calculated for the branch.
The result is used just like MP_defaults are used to find MP-vars if none has been specified prior to the call to t3lib_tstemplate::linkData().
You can specify “root” as a special keyword in the list of IDs and that will create a map-tree for the whole site (but this may be VERY processing intensive if there are many pages!).
The order of IDs specified may have a significance; Any ID in a branch which is processed already (by a previous ID root point) will not be processed again.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERNAME_substToken" type="string">
			<description><![CDATA[The is the token used on the page, which should be substituted with the current username IF a front-end user is logged in! If no login, the substitution will not happen.]]></description>
			<default><![CDATA[<!--###USERNAME###-->]]></default>
		</property>
		<property name="USERUID_substToken" type="string">
			<description><![CDATA[The is the token used on the page, which should be substituted with the current users UID IF a front-end user is logged in! If no login, the substitution will not happen.
This value has no default value and only if you specify a value for this token will a substitution process take place.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="absRefPrefix" type="string">
			<description><![CDATA[If this value is set, then all relative links in TypoScript are prepended with this string. Used to convert relative paths to absolute paths.

Note: This values is automatically set to the dirname of the index.php script in case simulateStaticDocuments is set to “PATH_INFO”.
If you're working on a server where you have both internal and external access, you might to yourself a favour and set the absRefPrefix to the url and path of you site, eg. http://www.typo3.com/. If you do not, you risk to render pages to cache from the internal network and thereby prefix image-references and links with a non-accesible path from outside.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="additionalHeaders" type="string">
			<description><![CDATA[strings divided by &quot;|&quot;
      This is additional headers. You separate each header by a vertical line "|".  Normally TYPO3 does not send any headers with the Header()-function in PHP.

Examples:
Content-type: text/vnd.wap.wml
(this will sent a content-header for a WAP-site)

Content-type: image/gif | Expires: Mon, 26 Jul 1997 05:00:00 GMT
(this will sent a content-header for a GIF-file and a Expires header)

Location: www.typo3.com
(This redirects the page to www.typo3.com)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="admPanel" type="ADMPANEL">
			<description><![CDATA[boolean / ADMPANEL properties
      If set, the admin panel appears in the bottom of pages.

NOTE: In addition the panel must be enabled for the user as well, using the TSconfig for the user! See adminguide documentation.

SEE: Admin Panel section]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="baseURL" type="string">
			<description><![CDATA[This writes the <base> tag in the header of the document. Set this to the value that is expected to be the URL, and append a “/” to the end of the string.

Example:
config.baseURL = http://typo3.org/sub_dir/]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beLoginLinkIPList" type="string">
			<description><![CDATA[[IP-number]
      If set and REMOTE_ADDR matches one of the listed IP-numbers (Wild-card, *, allowed) then a link to the typo3/ login scrip with redirect pointing back to the page is shown.

NOTE: beLoginLinkIPList_login and/or beLoginLinkIPList_logout (see below) must be defined if the link should show up!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beLoginLinkIPList_login" type="string">
			<description><![CDATA[HTML code wrapped with the login link, see 'beLoginLinkIPList'

Example:
<HR><B>LOGING</B>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beLoginLinkIPList_logout" type="string">
			<description><![CDATA[HTML code wrapped with the logout link, see above]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cache_clearAtMidnight" type="boolean">
			<description><![CDATA[With this setting the cache always expires at midnight of the day, the page is scheduled to expire.]]></description>
			<default><![CDATA[false]]></default>
		</property>
		<property name="cache_period" type="int">
			<description><![CDATA[int, seconds
      The number of second a page may remain in cache.
This value is overridden by the value set in the page-record (field="cache_timeout") if this value is greater than zero.]]></description>
			<default><![CDATA[86400 (=24H)]]></default>
		</property>
		<property name="compensateFieldWidth" type="double">
			<description><![CDATA[this floating point value will be used by the FORMS cObject to compensate the length of the formfields text and input.
This feature is useful, if the page-option "smallFormFields" is set. In that case Netscape renders formfields much longer than IE. If you want the two browsers to display the same size formfields, use a value of approx "0.6" for netscape-browsers.

Example:
[browser = netscape]
  config.compensateFieldWidth = 0.6
[global]

This option may be overridden in the FORMS-cObject.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="content_from_pid_allowOutsideDomain" type="boolean">
			<description><![CDATA[Using the “Show content from this page instead” feature allows you to insert content from the current domain only. Setting this option will allow content included from anywhere in the page tree!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debug" type="boolean">
			<description><![CDATA[If set any debug-information in the TypoScript code is output. Currently this applies only to the menu-objects]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="disableAllHeaderCode" type="boolean">
			<description><![CDATA[If this is set, none of the features of the PAGE-object is processed and the content of the page will be the result of the cObject array (1,2,3,4...) of the PAGE-object.  This means that the result of the cObject should include everything from the <HTML> .... to the </HTML> tag !!
Use this feature in templates supplying other content-types than HTML. That could be an image or a WAP-page!]]></description>
			<default><![CDATA[false]]></default>
		</property>
		<property name="disableCharsetHeader" type="boolean">
			<description><![CDATA[By default a header "content-type:text/html; charset..." is sent. This option will disable that.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="disablePageExternalUrl" type="boolean">
			<description><![CDATA[If set, pages with doktype “External Url” will not trigger jumpUrl in TSFE. This may help you to have external urls open inside you framesets.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="disablePrefixComment" type="boolean">
			<description><![CDATA[If set, the stdWrap property “prefixComment” will be disabled, thus preventing any revealing and spaceconsuming comments in the HTML source code.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="doctype" type="string">
			<description><![CDATA[If set, then a document type declaration (and an XML prologue) will be generated. The value can either be a complete doctype or one of the following keywords:

"xhtml_trans" for XHTML 1.0 Transitional doctype.
"xhtml_frames" for XHTML 1.0 Frameset doctype.
"xhtml_strict" for XHTML 1.0 Strict doctype.
"xhtml_basic" for XHTML basic doctype.
"xhtml_11" for XHTML 1.1 doctype.
"xhtml_2" for XHTML 2 doctype.
"none" for NO doctype at all.

Note that the keywords also change the way TYPO3 generates some of the XHTML tags to ensure valid XML. If you set doctype to a string, then you must also set config.xhtmlDoctype (see below).

See "config.htmlTag_setParams" and "config.htmlTag_langKey" for more details on the effect on the html tag.
]]></description>
			<default><![CDATA[Default is a DOCTYPE like this:
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
]]></default>
		</property>
		<property name="doctypeSwitch" type="boolean">
			<description><![CDATA[If set, the order of <?xml...> and <!DOCTYPE...> will be reversed. This is needed for MSIE to be standards compliant with XHTML.

Background:
By default TYPO3 outputs the XML/DOCTYPE in compliance with the standards of XHTML. However a browser like MSIE will still run in “quirks-mode” unless the <?xml> and <DOCTYPE> tags are ordered opposite. But this breaks CSS validation... 
With this option designers can decide for themselves what they want then.

If you want to check the compatibility-mode of your webbrowser you can do so with a simple JavaScript that can be inserted on a TYPO3 page like this:

page.headerData.1 = TEXT
page.headerData.1.value = <script>alert(document.compatMode);</script>

If your browser has detected the DOCTYPE correctly it will report “CSS1Compat”
If you are not running in compliance mode you will get some other message. MSIE will report “BackCompat” for instance - this means it runs in quirks-mode, supporting all the old “browser-bugs”.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="enableContentLengthHeader" type="boolean">
			<description><![CDATA[If set, a header "content-length: [bytes of content]" is sent.

If a PHP_SCRIPT_EXT object is detected on the page or if the Backend user is logged in, this is disabled. The reason is that the content length header cannot include the lenght of these objects and the content-length will cut of the lenght of the document in some browsers.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="extTarget" type="string">
			<description><![CDATA[default external target. Used by typolink if no extTarget is set]]></description>
			<default><![CDATA[_top]]></default>
		</property>
		<property name="forceTypeValue" type="int">
			<description><![CDATA[Force the &type value of all TYPO3 generated links to a specific value (except if overruled by local forceTypeValue values).
Useful if you run a template with special content at - say &type=95 - but still wants to keep your targets neutral. Then you set your targets to blank and this value to the type value you wish.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="frameReloadIfNotInFrameset" type="boolean">
			<description><![CDATA[If set, then the current page will check if the page object name (eg. “page” or “frameset”) exists as “parent.[name]” (eg. “parent.page”) and if not the page will be reloaded in top frame. This secures that links from search engines to pages inside a frameset will load the frameset.
Works only with type-values different from zero.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ftu" type="boolean">
			<description><![CDATA[If set, the "&ftu=...." GET-fallback identification is inserted.
"&ftu=[hash]" is always inserted in the links on the first page a user hits. If it turns out in the next hit that the user has cookies enabled, this variable is not set anymore as the cookies does the job. If no cookies is accepted the "ftu" remains set for all links on the site and thereby we can still track the user.

You should not set this feature if grabber-spiders like Teleport are going to grab your site!
You should not set this feature if you want search-engines to index your site (in conjunction with the simulateStaticDocuments feature!)

You can also ignore this feature if you're certain, website users will use cookies.
 "ftu" means fe_typo_user ("fe" is "frontend").]]></description>
			<default><![CDATA[false]]></default>
		</property>
		<property name="headerComment " type="string">
			<description><![CDATA[The content is added before the “TYPO3 Content Management Framework” comment in the <head> section of the page. Use this to insert a note like that “Programmed by My-Agency” ...]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="htmlTag_dir" type="string">
			<description><![CDATA[Sets text direction for whole document (useful for display of Arabic, Hebrew pages).

Basically the value becomes the attribute value of "dir" for the <html> tag.

Values:
rtl = Right-To-Left (for Arabic / Hebrew)
ltr = Left-To-Right (Default for other languages)

Example:
config.htmlTag_dir = rtl]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="htmlTag_langKey" type="string">
			<description><![CDATA[Allows you to set the language value for the attributes "xml:lang" and "lang" in the <html> tag (when using "config.doctype = xhtml*").

The values must follow the format specified in IETF RFC 3066

Example:
config.htmlTag_langKey = en-US]]></description>
			<default><![CDATA[en]]></default>
		</property>
		<property name="htmlTag_setParams" type="string">
			<description><![CDATA[Sets the attributes for the <html> tag on the page. If you set "config.doctype" to a keyword enabling XHTML then some attributes are already set. This property allows you to override any preset attributes with you own content if needed.

Special: If you set it to "none" then no attributes will be set at any event.

Example:
config.htmlTag_setParams =  xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="incT3Lib_htmlmail " type="boolean">
			<description><![CDATA[Include t3lib/class.t3lib_htmlmail.php]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeLibrary" type="string">
			<description><![CDATA[This includes a phpfile.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="index_descrLgd" type="int">
			<description><![CDATA[This indicates how many chars to preserve as description for an indexed page. This may be used in the search result display.]]></description>
			<default><![CDATA[200]]></default>
		</property>
		<property name="index_enable" type="boolean">
			<description><![CDATA[Enables cached pages to be indexed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="index_externals" type="boolean">
			<description><![CDATA[If set, external media linked to on the pages is indexed as well.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="inlineStyle2TempFile" type="boolean">
			<description><![CDATA[If set, the inline styles TYPO3 controls in the core are written to a file,  typo3temp/stylesheet_[hashstring].css, and the header will only contain the link to the stylesheet.
The file hash is based solely on the content of the styles.

Depends on the compatibility mode (see Tools>Install>Update wizard):
compatibility mode < 4.0:   0
compatibility mode >= 4.0:   1

Example:
config.inlineStyle2TempFile = 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="insertDmailerBoundaries" type="boolean">
			<description><![CDATA[If set, boundary marks will be set around all records inserted on the page with cObjects CONTENT and RECORD. They are inserted as HTML-comments and do no harm.
Used by the Direct Mail module in TYPO3 to segmentize a page by categories.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="intTarget" type="string">
			<description><![CDATA[default internal target. Used by typolink if no target is set]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="jumpurl_enable" type="boolean">
			<description><![CDATA[Jumpurl is a concept where external links are redirected from the index_ts.php script, which first logs which url it was. This logging of external links is only interesting if you use the internal stat-table in TYPO3.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="jumpurl_mailto_disable" type="boolean">
			<description><![CDATA[Disables the use of jumpUrl when linking to email-adresses.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="language" type="string">
			<description><![CDATA[Language key. See stdWrap.lang for more information.
Select between:
English  (default) = [empty]
Danish = dk
German = de
Norwegian = no
Italian = it
etc... 

Value must correspond with the key used for backend system language if there is one. See inside config_default.php or look at the translation page on TYPO3.org for the official 2-byte key for a given language. Notice that selecting the official key is important if you want labels in the correct language from "locallang" files.
If the language you need is not yet a system language in TYPO3 you can use an artificial string of your choice and provide values for it via the TypoScript template where the property “_LOCAL_LANG” for most plugins will provide a way to override/add values for labels. The keys to use must be looked up in the locallang-file used by the plugin of course.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="language_alt" type="string">
			<description><![CDATA[If “config.language” (above) is used, this can be set to another language key which will be used for labels if a label was not found for the main language. For instance a brazil portuguese website might specify “pt” as alternative language which means the portuguese label will be shown if none was available in the main language, brazil portuguese. This feature makes sense if one language is incompletely translated and close to another language.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="linkVars" type="string">
			<description><![CDATA[HTTP_GET_VARS, which should be passed on with links in TYPO3. This is compiled into a string stored in $GLOBALS["TSFE"]->linkVars

The values are rawurlencoded in PHP.

You can specify a range of valid values by appending a () after each value. If this range does not match, the variable won't be appended to links. This is very important to prevent that the cache system gets flooded with forged values.

The range may containing one of these values:
[a]-[b] - A range of allowed integer valuesint - Only integer values are allowed[a]|[b]|[c] - A list of allowed strings (whitespaces will be removed)/[regex]/ - Match against a regular expression (PCRE style)

Example:
config.linkVars = L, print
This will add "&L=[L-value]&print=[print-value]" to all links in TYPO3.

config.linkVars = L(1-3), print
Same as above, but “&L=[L-value]” will only be added if the current value is 1, 2 or 3.
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="locale_all" type="string">
			<description><![CDATA[PHP: setlocale("LC_ALL", [value]);
value-examples: deutsch, de_DE, danish, portuguese, spanish, french, norwegian, italian. See www.php.net for other value. Also on linux, look at /usr/share/locale/

TSFE->localeCharset is intelligently set to the assumed charset of the locale strings. This is used in stdWrap.strftime to convert locale strings to the renderCharset of the frontend.

Example:
This will render dates in danish made with stdWrap/strftime:
locale_all = danish
locale_all = da_DK]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lockFilePath" type="string">
			<description><![CDATA[This is used to lock paths to be "inside" this path.
Used by "filelist" in stdWrap]]></description>
			<default><![CDATA[fileadmin/]]></default>
		</property>
		<property name="mainScript" type="string">
			<description><![CDATA[This lets you specify an alternative "mainScript" which is the document that TYPO3 expects to be the default doc. This is used in form-tags and other places where TYPO3 needs to refer directly to the main-script of the application]]></description>
			<default><![CDATA[index.php]]></default>
		</property>
		<property name="meaningfulTempFilePrefix" type="boolean">
			<description><![CDATA[If set it will try to render a meaningful prefix before temporary image files.
Works with GIFBUILDER files (taking content from the Gifbuilder TEXT objects), menus (taking the title of the menu item) and scaled images (using original filename base).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="message_page_is_being_generated" type="string">
			<description><![CDATA[Alternative HTML message that appears if a page is being generated.
Normally when a page is being generated a temporary copy is stored in the cache-table with an expire-time of 30 seconds.

It is possible to use some keywords that are replaced with the corresponding values. Possible keywords are: ###TITLE###, ###REQUEST_URI###]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="message_preview" type="string">
			<description><![CDATA[Alternative message in HTML that appears when the preview function is active!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="message_preview_workspace" type="string ">
			<description><![CDATA[Alternative message in HTML that appears when the preview function is active in a draft workspace. You can use sprintf() placeholders for Workspace title (first) and number (second).

Examples:
config.message_preview_workspace = <div class=”previewbox”>Displaying workspace named "%s" (number %s)!</div>
config.message_preview_workspace = <div class=”previewbox”>Displaying workspace number %2$s named "%1$s"!</div>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="metaCharset" type="string">
			<description><![CDATA[Charset used for the output document. For example in the meta tag:
<meta http-equiv="Content-Type" content="text/html; charset=...>

Is used for a) HTML meta-tag, b) HTTP header (unless disabled with .disableCharsetHeader) and c) xhtml prologues (if available)

If renderCharset and metaCharset are different the output content is automatically converted to metaCharset before output and likewise are values posted back to the page converted from metaCharset to renderCharset for internal processing. This conversion takes time of course so there is another good reason to use the same charset for both.]]></description>
			<default><![CDATA[value of ".renderCharset"]]></default>
		</property>
		<property name="noPageTitle" type="int">
			<description><![CDATA[If you only want to have the sitename (from the template record) in your <title> tag, set this to 1. If the value is 2 then the <title> tag is not printed at all.
Please take note that this tag is required for XHTML compliant output, so you should only disable this tag if you generate it manually already.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="noScaleUp" type="boolean">
			<description><![CDATA[Normally images are scaled to the size specified via TypoScript. This also forces small images to be scaled to a larger size. This is not always a good thing. 
If this property is set, images are not allowed to be scaled up in size. This parameter clears the $this->mayScaleUp var of the class t3lib_stdgraphics (often "gifbuilder").]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="no_cache" type="boolean">
			<description><![CDATA[If this is set to true, the page will not be cached. If set to false, it's ignored. Other parameters may have set it to true of other reasons.]]></description>
			<default><![CDATA[-]]></default>
		</property>
		<property name="notification_email_charset" type="string">
			<description><![CDATA[Alternative charset for the notification mails.]]></description>
			<default><![CDATA[ISO-8859-1]]></default>
		</property>
		<property name="notification_email_encoding" type="string">
			<description><![CDATA[This sets the encoding of plaintext emails (notification messages). The default encoding is “quoted-printable”. But setting this to eg. “base64” will encode the content with base64 encoding.

Values possible:
base64
quoted-printable
8bit]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="notification_email_urlmode" type="string">
			<description><![CDATA[This option allows you to handle URL's in plain text emails so long URLS of more than 76 chars are not broken. This option can be either empty or “76” or “all”. 
If the string is blank, all links in plaintext emails are untouched. 
If it's set to 76 then all links longer then 76 characters are stored in the database and a hash is sent in the GET-var ?RDCT=[md5/20] to the index.php script which finds the proper link in the database and issues a location header (redirection). 
If the value is “all” then ALL “http://” links in the message are converted.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="pageGenScript" type="string">
			<description><![CDATA[Alternative page generation script for applications using index_ts.php for initialization, caching, stating and so on. This script is included in the global scope of index_ts.php-script and thus you may include libraries here. Always use include_once for libraries.
Remember not to output anything from such an included script. All content must be set into $TSFE->content. Take a look at typo3/sysext/cms/tslib/pagegen.php

NOTE: This option is ignored if 

$TYPO3_CONF_VARS["FE"]["noPHPscriptInclude"]=1;

is set in localconf.php.]]></description>
			<default><![CDATA[typo3/sysext/cms/tslib/pagegen.php]]></default>
		</property>
		<property name="pageTitleFirst" type="boolean">
			<description><![CDATA[If set (and the page title is printed) then the page-title will be printed BEFORE the template title.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prefixLocalAnchors" type="string">
			<description><![CDATA[If set to one of the keywords, the content will have all local anchors in links prefixed with the path of the script. Basically this means that <a href=”#”> will be transformed to <a href=”path/path/script?params#”>. This procedure is necessary if the <base> tag is set in the script (eg. if “realurl” extension is used to produce Speaking URLs).

Keywords are the same as for “xhtml_cleaning”, see above.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeDefaultJS" type="string">
			<description><![CDATA[If set, the default JavaScript in the header will be removed.
The default JavaScript is the blurLink function and browser detection variables.

Special case: if the value is "external" then the default JavaScript is written to a temporary file and included from that file. See "inlineStyle2TempFile" below.

Depends on the compatibility mode (see Tools>Install>Update wizard):
compatibility mode < 4.0:   0
compatibility mode >= 4.0:   1

Example:
config.removeDefaultJS = external
config.removeDefaultJS = 1]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="renderCharset" type="string">
			<description><![CDATA[Charset used for rendering internally of the page content. It is highly recommended that this value is the same as the charset of the content coming from the main data source (eg. the database). Thus you don't need to do any other conversion.
All strings from locallang files and locale strings are (and should be) converted to "renderCharset" during rendering. 

If you need another output charset than the render charset, see "metaCharset" below. 

If you set TYPO3_CONF_VARS['BE']['forceCharset'] that value is used by default for "renderCharset". It is highly recommended to use TYPO3_CONF_VARS['BE']['forceCharset'] for multilingual websites in TYPO3. If you set that you don't have to worry about renderCharset and metaCharset - the same charset is used in the whole system.]]></description>
			<default><![CDATA[TYPO3_CONF_VARS[BE][forceCharset] if found, otherwise
"iso-8859-1"]]></default>
		</property>
		<property name="sendCacheHeaders" type="boolean">
			<description><![CDATA[If set, TYPO3 will output cache-control headers to the client based mainly on  whether the page was cached internally. This feature allows client browsers and/or reverse proxies to take load of TYPO3 websites.

The conditions for allowing client caching are:
page was cachedNo *_INT or *_EXT objects were on the page (eg. USER_INT)No frontend user is logged inNo backend user is logged in

If these conditions are met, the headers sent are:
Last-Modified [SYS_LASTCHANGED of page id]Expires [expire time of page cache]Etag [md5 of content]Cache-Control: max-age: [seconds til expiretime]Pragma: public

In case caching is not allowed, these headers are sent to avoid client caching:
Cache-Control: private

Notice that enabling the browser caches means you have to consider how log files are written. Because when a page is cached on the client it will not invoke a request to the webserver, thus not writing the request to the log. There should be ways to circumvent these problems but they are outside the domain of TYPO3 in any case.

Tip: Enabling cache-control headers might confuse editors seeing old content served from the browser cache. “Shift-Reload” will bypass both browser- and reverse-proxy caches and even make TYPO3 regenerate the page. Teach them that trick!

Thanks to Ole Tange, www.forbrug.dk for co-authoring this feature.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sendCacheHeaders_onlyWhenLoginDeniedInBranch" type="boolean">
			<description><![CDATA[If this is set, then cache-control headers allowing client caching is sent only if user-logins are disabled for the branch. This feature makes it easier to manage client caching on sites where you have a mixture of static pages and dynamic sections with user logins. 

The background problem is this: In TYPO3 the same URL can show different content depending on whether a user is logged in or not. If a user is logged in, cache-headers will never allow client caching. But if the same URL was visited without a login prior to the login (allowing caching) the user will still see the page from cache when logged in (and so thinks he is not logged in anyway)! The only general way to prevent this is to have a different URL for pages when users are logged in (which the extension “realurl” can accomplish).

Another way to solve the problem is using this option in combination with disabling and enabling logins in various sections of the site. In the page records (“Advanced” page types) you can disable frontend user logins for branches of the page tree. Since many sites only needs the login in a certain branch of the page tree, disabling it in all other branches makes it much easier to use cache-headers in combination with logins; Cache-headers should simply be sent when logins are not allowed and never be send when logins are allowed! Then there will never be problems with logins and same-URLs.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setJS_mouseOver" type="boolean">
			<description><![CDATA[If set, the over() and out() JavaScript functions are forced to be included]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setJS_openPic" type="boolean">
			<description><![CDATA[If set, the openPic JavaScript function is forced to be included]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="simulateStaticDocuments" type="string">
			<description><![CDATA[boolean/string
			If set TYPO3 makes all links in another way than usual. This can be used with Apache compiled with mod_rewrite and configured in httpd.conf for use of this in the ".htaccess"-files.
Include this in the .htaccess file
RewriteEngine On
RewriteRule   ^[^/]*\.html$  index.php

This means that any "*.html"-documents should be handled by index.php. 
Now if is done, TYPO3 will interprete the url of the html-document like this:
[title].[id].[type].html
Title is optional and only usefull for the entries in the apache log-files. You may omit both [title] and [type] but if title is present, type must also be there!. 

Example:
TYPO3 will interprete this as page with uid=23 and type=1 :
Startpage.23.1.html

TYPO3 will interprete this as the page with alias = "start" and the type is zero (default):
start.html

Alternative option (PATH_INFO):
Instead of using the rewrite-module in apache (eg. if you're running Windows!) you can use the PATH_INFO variable from PHP.
It's very simple. Just set simulateStaticDocuments to “PATH_INFO” and you're up and running!

Also: See below, .absRefPrefix

Example (put in Setup-field of your template):
config.simulateStaticDocuments = PATH_INFO]]></description>
			<default><![CDATA[default is defined by a configuration option in localconf.php. It's 
$TYPO3_CONF_VARS["FE"]["simulateStaticDocuments"] = 1;
This affects all sites in the database.
You can also set this value to the string  “PATH_INFO”]]></default>
		</property>
		<property name="simulateStaticDocuments_addTitle" type="int">
			<description><![CDATA[If not zero, TYPO3 generates urls with the title in, limited to the first [simulateStaticDocuments_addTitle] number of chars.

Example:
Startpage.23.1.html
instead of the default, "23.1.html", without the title.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="simulateStaticDocuments_dontRedirectPathInfoError" type="boolean">
			<description><![CDATA[Regarding PATH_INFO mode:
When a page is requested by “PATH_INFO” method it must be configured in order to work properly. If PATH_INFO is not configured, the index_ts.php script sends a location header to the correct page. However if you better like an error message outputted, just set this option.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="simulateStaticDocuments_noTypeIfNoTitle" type="boolean">
			<description><![CDATA[If set, then the type-value will not be set in the simulated filename if the type value is zero anyways. However the filename must be without a title. 

Example:
“Startpage.23.0.html” would still be “Startpage.23.0.html”
“23.0.html” would be “23.html” (that is without the zero)
“23.1.html” would still be “23.1.html” ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="simulateStaticDocuments_pEnc" type="string">
			<description><![CDATA[Allows you to also encode additional parameters into the simulated filename. 

Example: 
You have a news-plugin. The main page has the url “Page_1.228.0.html” but when one clicks on a news item the url will be “Page_1.228.0.html?&tx_mininews_pi1[showUid]=2&cHash=b8d239c224” instead.
Now, this URL will not be indexed by external search-engines because of the query-string (everything after the “?” mark). This property avoids this problem by encoding the parameters. These are the options:

Value set to “base64”:
This will transform the filename used to this value: “Page_1.228+B6JnR4X21pbmluZXdzX3BpMVtzaG93VWlkXT0yJmNIYXNoPWI4ZDIzOWMyMjQ_.0.html”. The querystring has simply been base64-encoded (and some more...) and added to the HTML-filename (so now external search-engines will find this!). The really great thing about this that the filename is self-reliant because the filename contains the parameters. The downside to it is the very very long filename.

Value set to “md5”:
This will transform the filename used to this value:
“Page_1.228+M57867201f4a.0.html”. Now, what a lovely, short filename! Now all the parameters has been hashed into a 10-char string inserted into the filename. At the same time an entry has been added to a cache table in the database so when a request for this filename reaches the frontend, then the REAL parameter string is found in the database! The really great thing about this is that the filename is very short (opposite to the base64-method). The downside to this is that IF you clear the database cache table at any time, the URL here does NOT work until a page with the link has been generated again (re-inserting the parameter list into the database).

NOTICE: From TYPO3 3.6.0 the encoding will work only on parameters that are manually entered in the list set by .simulateStaticDocuments_pEnc_onlyP (see right below) or those parameters that various plugins might allow in addition. This is to limit the run-away risk when many parameters gets combined.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="simulateStaticDocuments_pEnc_onlyP" type="string">
			<description><![CDATA[A list of variables that may be a part of the md5/base64 encoded part of a simulate_static_document virtual filename (see property in the row above).

Example:
simulateStaticDocuments_pEnc_onlyP = tx_maillisttofaq_pi1[pointer], L, print

-> this will allow the "pointer" parameter for the extension "maillisttofaq" to be included (in addition to whatever vars the extension sets itself) and further the parameter "L" (could be language selection) and "print" (could be print-version).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="simulateStaticDocuments_replacementChar" type="string">
			<description><![CDATA[Word separator for URLs generated by simulateStaticDocuments. If set to
hyphen, this option allows search engines to index keywords in URLs. Before TYPO3 4.0 this character was hard-coded to underscore.

Depends on the compatibility mode (see Tools>Install>Update wizard):
compatibility mode < 4.0:   underscore “_”
compatibility mode >= 4.0:   hyphen “-”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spamProtectEmailAddresses" type="string">
			<description><![CDATA[&quot;ascii&quot; / -10 to 10
			If set, then all email addresses in typolinks will be encrypted so spam bots cannot detect them.

If you set this value to a number, then the encryption is simply an 
offset of character values. If you set this value to "-2" then all 
characters will have their ASCII value offset by "-2". To make this 
possible, a little JavaScript code is added to every generated web page!
(It is recommended to set the value in the range from -5 to 1 since setting it to >= 2 means a “z” is converted to “|” which is a special character in TYPO3 tables syntax – and that might confuse columns in tables. Now hardcoded range)

Alternatively you can set this value to the keyword "ascii". This way every 
character of the "mailto:" address will be translated to a Unicode HTML 
notation. Have a look at the example to see how this works.

Example:
mailto:a@b.c will be converted to
mailto:&#97;&#64;&#98;&#46;&#99;
The big advantage of this method is that it doesn't need any JavaScript!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spamProtectEmailAddresses_atSubst" type="string">
			<description><![CDATA[Substitute label for the at-sign (@).]]></description>
			<default><![CDATA[(at)]]></default>
		</property>
		<property name="spamProtectEmailAddresses_lastDotSubst" type="string">
			<description><![CDATA[Substitute label for the last dot in the email address.
Example: (dot)]]></description>
			<default><![CDATA[Default: . ( <= just a simple dot)]]></default>
		</property>
		<property name="stat" type="boolean">
			<description><![CDATA[Enable stat logging at all.]]></description>
			<default><![CDATA[true]]></default>
		</property>
		<property name="stat_apache" type="boolean">
			<description><![CDATA[Enable logging to the logfile "stat_apache_logfile"]]></description>
			<default><![CDATA[false]]></default>
		</property>
		<property name="stat_apache_logfile" type="string">
			<description><![CDATA[This defines the name of the logfile where TYPO3 writes an Apache-style logfile to. The location of the directory is defined by $TYPO3_CONF_VARS["FE"]["logfile_dir"]  which must exist and be writable. It can be relative (to PATH_site) or absolute, but in any case it must be within the regular allowed paths of TYPO3 (meaning for absolute paths that it must be within the “lockRootDir” set up in $TYPO3_CONF_VARS).

It is also possible to use date markers in the filename as they are provided by the PHP function strftime(). This will enable a natural rotation of the logfiles.

Example:
config.stat_apache_logfile = typo3_%Y%m%d.log

This will create daily log files (eg. typo3_20060321.log).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_apache_niceTitle" type="string">
			<description><![CDATA[boolean / string
			If set, the URL will be transliterated from the renderCharset to ASCII (eg ä => ae, à => a, &#945; "alpha" => a), which yields nice and readable page titles in the log. All non-ASCII characters that cannot be converted will be changed to underscores.

If set to “utf-8”, the page title will be converted to UTF-8 which results 
in even more readable titles, if your log analyzing software supports it.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_apache_noHost" type="boolean">
			<description><![CDATA[If true the HTTP_HOST is - if available - NOT inserted instead of the IP-address]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_apache_noRoot" type="boolean">
			<description><![CDATA[If set, the root part (level 0) of the path will be removed from the path. This makes a shorter name in case you have only a redundant part like "home" or "my site".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_apache_notExtended" type="boolean">
			<description><![CDATA[If true the logfile is NOT written in Apache extended format]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_apache_pagenames" type="string">
			<description><![CDATA[The "pagename" simulated for apache.
Default:    "[path][title]--[uid].html"
Codes:
[title] = inserts title, no special characters and shortend to 30 chars.
[uid] = the id
[alias] = any alias
[type] = the type (typeNum)
[path] = the path of the page.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_excludeBEuserHits" type="boolean">
			<description><![CDATA[If set a pagehit is not logged if a user is logged in into TYPO3.]]></description>
			<default><![CDATA[false]]></default>
		</property>
		<property name="stat_excludeIPList" type="string">
			<description><![CDATA[list of strings
			If the REMOTE_ADDR is in the list of IP-addresses, it's also not logged.
Can use wildcard, eg. “192.168.1.*”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stat_mysql" type="boolean">
			<description><![CDATA[Enable logging to the MySQL table sys_stat.]]></description>
			<default><![CDATA[false]]></default>
		</property>
		<property name="stat_pageLen" type="int">
			<description><![CDATA[int 1-100
			The length of the page name (at the end of the path) written to the logfile/database.]]></description>
			<default><![CDATA[30]]></default>
		</property>
		<property name="stat_titleLen" type="int">
			<description><![CDATA[int 1-100
			The length of the page names in the path written to logfile/database]]></description>
			<default><![CDATA[20]]></default>
		</property>
		<property name="stat_typeNumList" type="intList">
			<description><![CDATA[List of pagetypes that should be registered in the statistics table, sys_stat.
If no types are listed, all types are logged.
Default is "0,1" which normally logs all hits on framesets and hits on content keeping pages. Of course this depends on the template design.]]></description>
			<default><![CDATA[0,1]]></default>
		</property>
		<property name="sword_noMixedCase" type="boolean">
			<description><![CDATA[Used by the parseFunc-substitution of search Words (sword):
If set, the words MUST be the exact same case as the search word was.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sword_standAlone" type="boolean">
			<description><![CDATA[Used by the parseFunc-substitution of search Words (sword):
If set, the words MUST be surrounded by whitespace in order to be marked up.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sys_language_mode" type="string">
			<description><![CDATA[Setting various modes of handling localization.
The syntax is "[keyword] ; [value]".

Possible keywords are:

[default] - The system will look for a translation of the page (from “Alternative Page Language” table) and if it is not found it will fall back to the default language and display that.

content_fallback - [ Recommended ] The system will always operate with the selected language even if the page is not translated with a page overlay record. This will keep menus etc. translated. However, the content on the page can still fall back to another language, defined by the value of this keyword, eg. "content_fallback ; 1,0" to fall back to the content of sys_language_uid 1 and if that is not present either, to default (0)

strict - The system will report an error if the requested translation does not exist. Basically this means that all pages with gray background in the Web>Info / Localization overview module will fail (they would otherwise fall back to default language in one or another way)

ignore - The system will stay with the selected language even if the page is not translated and there's no content available in this language, so you can handle that situation on your own then.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sys_language_overlay" type="string">
			<description><![CDATA[boolean / keyword
			If set, records from certain tables selected by the CONTENT cObject using the “languageField” setting will select the default language (0) instead of any language set by sys_language_uid / sys_language_mode. In addition the system will look for a translation of the selected record and overlay configured fields.
The requirements for this is that the table is configured with “languageField” and “transOrigPointerField” in the [ctrl] section of $TCA. Also, exclusion of certain fields can be done with the “l10n_mode” directive in the field-configuration of $TCA.

For backend administration this requires that you configure the “Web>Page” module to display content elements accordingly; That each default element is shown and next to it any translation found. This configuration can be done with Page TSconfig for a section of the website using the object path “mod.web_layout.defLangBinding = 1”.

Keyword: 
hideNonTranslated : If this keyword is used a record that has no translation will not be shown. The default is that records with no translation will show up in the default language.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sys_language_softExclude" type="string">
			<description><![CDATA[Setting additional "exclude" flags for l10n_mode in TCA for frontend rendering. Works exactly like sys_language_softMergeIfNotBlank (see that for details - same Syntax!).

Fields set in this property will override if the same field is set for "sys_language_softMergeIfNotBlank".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sys_language_softMergeIfNotBlank" type="string">
			<description><![CDATA[Setting additional “mergeIfNotBlank” fields from TypoScript.

Background:
In TCA you can configure “l10n_mode” - localization mode - for each field. Two of the options affect how the frontend displays content; The values “exclude” and “mergeIfNotBlank” (see “TYPO3 Core API” document for details). The first (“exclude”) simply means that the field when found in a translation of a record will not be overlaid the default records field value. The second (“mergeIfNotBlank”) means that it will be overlaid only if it has a non-blank value.
Since it might be practical to set up fields for “mergeIfNotBlank” on a per-site basis this options allows you to override additional fields from tables.

Syntax:
 [table]:[field],  [table]:[field],  [table]:[field], ...

Example:
config.sys_language_softMergeIfNotBlank = tt_content:image , tt_content:header

This setting means that the header and image field of content elements will be used from the translation only if they had a non-blank value. For the image field this might be very practical because it means that the image(s) from the default translation will be used unless other images are inserted!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sys_language_uid" type="int">
			<description><![CDATA[This value points to the uid of a record from the “sys_language” table and if set, this means that various parts of the frontend display code will select records which are assigned to this language. See ->SELECT

Internally, the value is depending on whether a Alternative Page Language record can be found with that language. If not, the value will default to zero (default language) except if “sys_language_mode” is set to a value like “content_fallback”.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="titleTagFunction " type="function-name">
			<description><![CDATA[Passes the default <title>-tag content to this function. No typoScript parameters are passed though.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="typolinkCheckRootline" type="boolean">
			<description><![CDATA[If set, then every “typolink” is checked whether it's linking to a page within the current rootline of the site.
If not, then TYPO3 searches for the first found domain record (without redirect) in that rootline from out to in. 
If found (another domain), then that domain is prepended the link, the external target is used instead and thus the link jumps to the page in the correct domain.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="typolinkLinkAccessRestrictedPages" type="string">
			<description><![CDATA[integer (page id) / keyword “NONE"
			If set, typolinks pointing to access restricted pages will still link to the page even though the page cannot be accessed. If the value of this setting is an integer it will be interpreted as a page id to which the link will be directed. 
If the value is “NONE” the original link to the page will be kept although it will generate a page-not-found situation (which can of course be picked up properly by the page-not-found handler and present a nice login form).

See “showAccessRestrictedPages” for menu objects as well (similar feature for menus)

Example:
config.typolinkLinkAccessRestrictedPages = 29
config.typolinkLinkAccessRestrictedPages_addParams = &return_url=###RETURN_URL###&pageId=###PAGE_ID###

Will create a link to page with id 29 and add GET parameters where the return URL and original page id is a part of it.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="typolinkLinkAccessRestrictedPages_addParams" type="string">
			<description><![CDATA[See “typolinkLinkAccessRestrictedPages” above]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="uniqueLinkVars" type="boolean">
			<description><![CDATA[It might happen that TYPO3 generates links with the same parameter twice or more. This is no problem because only the last parameter is used, thus the problem is just a cosmetical one.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="xhtmlDoctype" type="string">
			<description><![CDATA[Sets the document type for the XHTML version of the generated page.

If config.doctype is set to a string then config.xhtmlDoctype must be set to one of these keywords:

"xhtml_trans" for XHTML 1.0 Transitional doctype.
"xhtml_frames" for XHTML 1.0 Frameset doctype.
"xhtml_strict" for XHTML 1.0 Strict doctype.
"xhtml_basic" for XHTML basic doctype.
"xhtml_11" for XHTML 1.1 doctype.
"xhtml_2" for XHTML 2 doctype.


This is an example to use MathML 2.0 in an XHTML 1.1 document:

config.doctype (
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
)
config.xhtmlDoctype = xhtml_11

Default:
same as config.doctype if set to a keyword]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="xhtml_cleaning" type="string">
			<description><![CDATA[Tries to clean up the output to make it XHTML compliant and a bit more. THIS IS NOT COMPLETE YET, but a “pilot” to see if it makes sense anyways. For now this is what is done:

What it does at this point:
- All tags (img,br,hr) is ended with "/>" - others?
- Lowercase for elements and attributes
- All attributes in quotes
- Add "alt" attribute to img-tags if it's not there already.

What it does NOT do (yet) according to XHTML specs.:
- Wellformedness: Nesting is NOT checked
- name/id attribute issue is not observed at this point.
- Certain nesting of elements not allowed. Most interesting, <PRE> cannot contain img, big,small,sub,sup ...
- Wrapping scripts and style element contents in CDATA - or alternatively they should have entitites converted.
- Setting charsets may put some special requirements on both XML declaration/ meta-http-equiv. (C.9)
- UTF-8 encoding is in fact expected by XML!!
- stylesheet element and attribute names are NOT converted to lowercase
- ampersands (and entities in general I think) MUST be converted to an entity reference! (&amps;). This may mean further conversion of non-tag content before output to page. May be related to the charset issue as a whole.
- Minimized values not allowed: Must do this: selected="selected"

Please see the class t3lib_parsehtml for details.
You can enable this function by the following values:

all = the content is always processed before it may be stored in cache. 
cached = only if the page is put into the cache, 
output = only the output code just before it's echoed out.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="xmlprologue" type="string">
			<description><![CDATA[If empty (not set) then the default XML 1.0 prologue is set, when the doctype is set to a known keyword (eg xhtml_11):

<?xml version="1.0" encoding="[config.renderCharset]">

If set to one of the know keywords then a standard prologue will be set:
“xml_10” XML 1.0 prologue (see above)
“xml_11” XML 1.1 prologue

If "none" then the default XML prologue is not set.
Any other string is used as the XML prologue itself.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="CONTENT">
		<property name="renderObj" type="cObj">
			<description><![CDATA[
]]></description>
			<default><![CDATA[< [tablename]]]></default>
		</property>
		<property name="select" type="string">
			<description><![CDATA[The SQL-statement is set here!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="slide" type="int">
			<description><![CDATA[If set and no content element is found by the select command, then the rootLine will be traversed back until some content is found.

Possible values are “-1” (slide back up to the siteroot), “1” (only the current level) and “2” (up from one level back).

Use -1 in combination with collect.

.collect (integer): If set, all content elements found on current and parent pages will be collected. Otherwise, the sliding would stop after the first hit. Set this value to the amount of levels to collect on, or use “-1” to collect up to the siteroot.
.collectFuzzy (boolean): Only useful in collect mode. If no content elements have been found for the specified depth in collect mode, traverse further until at least one match has occurred.
.collectReverse (boolean): Change order of elements in collect mode. If set, elements of the current page will be on the bottom.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="table" type="string">
			<description><![CDATA[The table, the content should come from. 
In standard-configurations this will be "tt_content"
NOTE: Only tables allowed are “pages” or tables prefixed with one of these: “tt_”, “tx_”, “ttx_”, “fe_”, “user_”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wrap the whole content-story...]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="CTABLE">
		<property name="bm" type="CARRAY+TDParams">
			<description><![CDATA[bottomMenu]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="c" type="CARRAY+TDParams">
			<description><![CDATA[content-cell ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cMargins" type="string">
			<description><![CDATA[margins
			Distance around the content-cell "c"]]></description>
			<default><![CDATA[0,0,0,0]]></default>
		</property>
		<property name="cWidth" type="string">
			<description><![CDATA[pixels
			Width of the content-cell "c"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lm" type="CARRAY+TDParams">
			<description><![CDATA[leftMenu]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="string">
			<description><![CDATA[x,y 
			Offset from upper left corner]]></description>
			<default><![CDATA[0,0 = intet]]></default>
		</property>
		<property name="rm" type="CARRAY+TDParams">
			<description><![CDATA[rightMenu]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="tableParams" type="string">
			<description><![CDATA[&lt;TABLE&gt;-params
]]></description>
			<default><![CDATA[border=0 cellspacing=0 cellpadding=0]]></default>
		</property>
		<property name="tm" type="CARRAY+TDParams">
			<description><![CDATA[topMenu]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="EDITPANEL">
		<property name="allow" type="string">
			<description><![CDATA[Define which functions are accessible. Further this list may be reduced, if the BE_USER does not have permission to perform the action
Values should be listed separated by comma. This is the options you can choose between:
toolbar,edit,new,delete,move,hide 
(toolbar is a general list of icons regarding the page, so use this for pagerecords only)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="edit.displayRecord" type="boolean">
			<description><![CDATA[If set, then the record edited is displayed above the editing form.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="innerWrap" type="wrap">
			<description><![CDATA[Wraps the edit panel]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="label" type="string">
			<description><![CDATA[Title for the panel. You can insert the record title with %s

Example:
Section: <B>%s</B>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="line" type="int">
			<description><![CDATA[boolean / int
			If set, a black line will appear after the panel. This value will indicate the distance from the black line to the panel]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="newRecordFromTable" type="string">
			<description><![CDATA[Will display a panel for creation of new element (in the top of list) on the page from that table.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="newRecordInPid" type="int">
			<description><![CDATA[Define a page ID where new records (except new pages) will be created.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="onlyCurrentPid" type="boolean">
			<description><![CDATA[If set, only records with a pid matching the current id (TSFE->id) will be shown with the panel.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="outerWrap" type="wrap">
			<description><![CDATA[Wraps the whole edit panel including the black line (if configured)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="previewBorder" type="int">
			<description><![CDATA[boolean / int 
			If set, the hidden/starttime/endtime/fe_user elements which are previewed will have a border around.
The integer value denotes the thickness of the border]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="previewBorder.innerWrap" type="string">
			<description><![CDATA[wrap / HTML color
			innerWrap wraps the content elements (including the icons) inside the preview border (an HTML table). 

outerWrap wraps the whole content element including the border. 

color denotes the color of the border.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="FE_TABLE">
		<property name="allowEdit" type="string">
			<description><![CDATA[allowEdit.[field]
			Same as above ("allowNew") but this controls which fields that may be written in case of an update of a record (and not a new submission)
Please pay attension to the property below!  ("overrideEdit")]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="allowNew" type="string">
			<description><![CDATA[allowNew.[field]
			This property is in charge of which fields that may be written from the frontend.

Example:
This defines that subject is a field, that may be submitted from the frontend. If a value is not submitted, subject is filled with the default value (see above). 
The field "hidden" on the other hand cannot be changed from the frontend. "hidden" will gain the value from the default definition (see above). If fields are set to "0" (zero) it's the same as if they were not defined in this array.

allowNew {
  subject = 1
  hidden = 0
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="autoInsertPID" type="boolean">
			<description><![CDATA[Works with new records: Insert automatically the PID of the page, where the submitted data is sent to. Any "pid" supplied from the submitted data will override. This is for convenience.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="default" type="string">
			<description><![CDATA[default.[field] This property is in charge of which default-values is used for the table:

Example:
This defines the default values used for new records. These values will be overridden with any value submitted instead (as long as the submitted fields are allowed due to "allowNew")
default {
  subject = This is the default subject value!
  hidden = 1
  parent = 0
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="doublePostCheck" type="string">
			<description><![CDATA[string (fieldname)
			Specifies a fieldname (integer) into which an integer-hash compiled of the submitted data is inserted. If the field is set, then submissions are checked whether another record with this value already exists. If so, the record is NOT inserted, because it's expected to be a “double post” (posting the same data more than once)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="overrideEdit" type="string">
			<description><![CDATA[This works like default-values above but is values inserted after the submitted values has beed processed. This means that opposite to default-values overwritten by the submitted values, these values override the submitted values.

Example:
In this case overrideEdit secures that if a user updates his record (if he "own" it) the "hidden"-field will be set no matter what.

overrideEdit {
  hidden = 1
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="processScript" type="string">
			<description><![CDATA[Include-script to be used for processing of incoming data to the table. The script is included from a function in the class tslib_fetce
This is the really important option, because whether or not you are going to utilize the "cleaning"/"authorization" features of the properties above depend on how you write your script to process data and put it in the database.
A very good example is to look at "media/scripts/guest_submit.inc", included from static_template "plugin.tt_guest" (Used for the default guestbook feature)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="separator" type="string">
			<description><![CDATA[Separator character used when the submitted data is an array from eg. a multiple selector box.]]></description>
			<default><![CDATA[chr(10) (linebreak)]]></default>
		</property>
		<property name="userIdColumn" type="string">
			<description><![CDATA[string (field)
			This is a string that points to the column of a record where the user-id of the current fe_user should be inserted. This fe_user-uid is inserted/updated both by "new" and "edit"]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="FILE">
		<property name="altText" type="stdWrap">
			<description><![CDATA[For <img> output only!

If no titltext is specified, it will use the alttext insteadIf no alttext is specified, it will use an empty alttext]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="file" type="string">
			<description><![CDATA[resource
			If the resource is jpg,gif,jpeg,png the image is inserted as an image-tag. Al other formats is read and inserted into the HTML-code.
The maximum filesize of documents to be read is set to 1024 kb internally!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="linkWrap" type="wrap">
			<description><![CDATA[(before ".wrap")]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="longdescURL" type="stdWrap">
			<description><![CDATA[For <img> output only!

"longdesc" attribute (URL pointing to document with extensive details about image).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="FORM">
		<property name="CHECK.layout" type="string">
			<description><![CDATA[Alternative layout for checkboxes]]></description>
			<default><![CDATA[the "layout"-property]]></default>
		</property>
		<property name="COMMENT.layout" type="string">
			<description><![CDATA[Alternative layout for comments.]]></description>
			<default><![CDATA[the "layout"-property]]></default>
		</property>
		<property name="LABEL.layout" type="string">
			<description><![CDATA[Alternative layout for label types]]></description>
			<default><![CDATA[the "layout"-property]]></default>
		</property>
		<property name="RADIO.layout" type="string">
			<description><![CDATA[Alternative layout for radiobuttons]]></description>
			<default><![CDATA[the "layout"-property]]></default>
		</property>
		<property name="REQ" type="REQ">
			<description><![CDATA[boolean 
			Defines if required-fields should be checked and marked up]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="accessibility" type="boolean">
			<description><![CDATA[If set, then the form will be compliant with accessibility guidelines (XHTML compliant). This includes:

label string will be wrapped in <label for="formname[fieldname-hash]"> ... </label>All form elements will have an id-attribute carrying the formname with the md5-hashed fieldname appended

Notice: In TYPO3 4.0 and later, CSS Styled Content is configured to produce accessible forms by default.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="arrayReturnMode" type="boolean">
			<description><![CDATA[If set, the <form> tags and the form content will be returned in an array as separate elements including other pratical values. This mode is for use in extensions where the array return value can be more useful.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="badMess" type="string">
			<description><![CDATA[Prefixed Message for the formevaluation in case of missing required fields. 
This message is shown above the list of fields.

NOTE: May be overridden by the property override feature of the formdata (see above)]]></description>
			<default><![CDATA[No message]]></default>
		</property>
		<property name="commentWrap" type="stdWrap">
			<description><![CDATA[Comments: Wrap for comments IF you use ###COMMENT###]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="compensateFieldWidth" type="double">
			<description><![CDATA[Overriding option to the config-value of the same name. See "CONFIG" above.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="data" type="stdWrap">
			<description><![CDATA[This is the data that sets up the form. See above.
"||" can be used instead of linebreaks]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dataArray" type="[array of form elements]">
			<description><![CDATA[This is an alternative way to define the form-fields. Instead of using the syntax with vertical separator bars suggested by the .data property, you can define the elements in regular TypoScript style arrays.
.dataArray is added to the input in .data if any.
Every entry in the dataArray is numeric and has three main properties, label, type, value and required. 'label' and 'value' has stdWrap properties. 
There is an alternative property to .value, which is .valueArray. This is also an array in the same style with numeric entries which has properties label, value and selected. 'label' has stdWrap properties.

Example:
  dataArray {
    10.label = Name:
    10.type = name=input
    10.value = [Enter name]
    10.required = 1
    20.label = Eyecolor
    20.type = eyecolor=select
    20.valueArray {
      10.label = Blue
      10.value = 1
      20.label = Red
      20.value = 2
      20.selected = 1
    }
    40.type = submit=submit
    40.value = Submit
  }


This is the same as this line in the .data property:

Name: | *name=input | [Enter name]
Eyecolor: | eyecolor=select | Blue=1, *Red=2
| submit=submit | Submit

Why do it this way?  Good question, but doing it this way has a tremendous advantage because labels are all separated from the codes. In addition it's much easier to pull out or insert new elements in the form.
Inserting an email-field after the name field would be like this:
  dataArray {
    15.label = Email:
    15.type = input
    15.value = your@email.com
    15.specialEval = EMAIL
  }

Or translating the form to danish (setting config.language to 'dk'):

  dataArray {
    10.label.lang.dk = Navn:
    10.value.lang.dk = [Indtast dit navn]
    20.label.lang.dk = Øjenfarve
    20.valueArray {
      10.label.lang.dk = Blå
      20.label.lang.dk = Rød
    }
    40.value.lang.dk = Send
  }
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dontMd5FieldNames" type="boolean">
			<description><![CDATA[The IDs generated for all elements in a form are md5 hashes from the fieldname. Setting this to true will disable this behaviour and use a cleaned fieldname, prefixed with the form name as the ID, instead.
This can be useful to style specifically named fields with CSS.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="emailMess" type="string">
			<description><![CDATA[Message if a field evaluated to be an email adresse did not validate.

NOTE: May be overridden by the property override feature of the formdata (see above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fieldPrefix" type="string">
			<description><![CDATA[Alternative prefix for the name of the fields in this form. Otherwise, all fields are prefixed with the form name (either a unique hash or the name set in the “formName” property). If set to “0”, there will be no prefix at all.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fieldWrap" type="stdWrap">
			<description><![CDATA[Field: Wraps the fields]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="formName" type="string">
			<description><![CDATA[An alternative name for this form. Default will be a unique (random) hash.

<form name=”...”>]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="goodMess" type="string">
			<description><![CDATA[Message for the formevaluation function in case of correctly filled form.

NOTE: May be overridden by the property override feature of the formdata (see above)]]></description>
			<default><![CDATA[No message]]></default>
		</property>
		<property name="hiddenFields" type="cObjArray">
			<description><![CDATA[Used to set hiddenFields from TS.

Example:
hiddenFields.pid = TEXT
hiddenFields.pid.value = 2

This makes a hidden-field with the name “pid” and value “2”.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="image" type="IMAGE">
			<description><![CDATA[If this is a valid image the submitbutton is rendered as this image!!

NOTE: CurrentValue is set to the caption-label before generating the image.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="labelWrap" type="stdWrap">
			<description><![CDATA[Labels: Wraps the label]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="layout" type="string">
			<description><![CDATA[This defines how the label and the field are placed towards each other.

Example:
This substitutes the "###FIELD###" with the field data and the "###LABEL###' with labeldata. 

<tr><td>###FIELD###</td><td> ###LABEL###</td></tr>

You can also use the marker ###COMMENT### which is ALSO the label value inserted, but wrapped in .commentWrap stdWrap-properties (see below)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="locationData" type="string">
			<description><![CDATA[boolean / string
			If this value is true, then a hidden-field called "locationData" is added to the form. This field wil be loaded with a value like this:
[page id]:[current record table]:[current record id]
For example, if a formfield is inserted on page with uid = "100", as a page-content item from the table "tt_content" with id "120", then the value would be "100:tt_content:120".
The value is use by eg. the cObject SEARCHRESULT. If the value $GLOBALS["HTTP_POST_VARS"]["locationData"] is detected here, the search is done as if it was performed on this page! This is very usefull if you want a search functionality implemented on a page with the "stype" field set to "L1" which means that the search is carried out from the first level in the rootline. 
Suppose you want the search to submit to a dedicated searchpage where ever. This page will then know - because of locationData - that the search was submittet from another place on the website.
If "locationData" is not only true but also set to "HTTP_POST_VARS" then the value will insert the content of $GLOBALS["HTTP_POST_VARS"]["locationData"] instead of the true location data of the page. This should be done with search-fields as this will carry the initial searching start point with.
NOTE: May be overridden by the property override feature of the formdata (see above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="method" type="form-method">
			<description><![CDATA[Example: 
GET]]></description>
			<default><![CDATA[POST]]></default>
		</property>
		<property name="noValueInsert" type="boolean">
			<description><![CDATA[By default values that are submitted to the same page (and thereby same form, eg. at searchforms) are re-inserted in the form instead of any default-data that might be set up. 
This, however, applies ONLY if the "no_cache=1" is set! (a page being cached may not include user-specific defaults in the fields of course...) 
If you set this flag, "noValueInsert", the content will always be the default content.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noWrapAttr" type="boolean">
			<description><![CDATA[If this value is true then all wrap attributes of textarea elements are suppressed. This is needed for XHTML-compliancy.

The wrap attributes can also be disabled on a per-field basis by using the special keyword "disabled" as the value of the wrap attribute.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="no_cache" type="string">
			<description><![CDATA[Default no_cache-option]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[form-element tag parameters
			Extra parameters to form elements

Example:
params = style=”width:200px;”
params.textarea = style=”width:300px;”
params.check = 

This sets the default to 200 px width, but excludes check-boxes and sets textareas to 300.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="radioWrap" type="stdWrap">
			<description><![CDATA[Wraps the labels for radiobuttons]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="recipient" type="stdWrap">
			<description><![CDATA[(list of) string /stdWrap
			Email recipient of the formmail content (generates the hiddenfield "recipient")]]></description>
			<default><![CDATA[No email]]></default>
		</property>
		<property name="redirect" type="stdWrap">
			<description><![CDATA[URL to redirect to (generates the hidden field "redirect")

Integer: this is regarded to be a page in TYPO3
String: this is regarded to be a normal url
Empty; the current page is chosen.

NOTE: If this value is set the target of this overriddes the target of the "type".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[Wraps the hole form (before formtags is added)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="target">
			<description><![CDATA[Default target of the form. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="type" type="int">
			<description><![CDATA[Type (action="" of the form):

Integer: this is regarded to be a page in TYPO3
String: this is regarded to be a normal URL (eg. "formmail.php" or "fe_tce_db.php")
Empty: the current page is chosen.

NOTE: If type is integer/empty the form will be submitted to a page in TYPO3 and if this page has a value for target/no_cache, then this will be used instead of the default target/no_cache below.

NOTE: If the redirect-value is set, the redirect-target overrides the target set by the action-url

NOTE: May be overridden by the property override feature of the formdata (see above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrapFieldName" type="wrap">
			<description><![CDATA[This wraps  the fieldnames before they are applied to the form-field tags.

Example:
If value is tx_myextension[input][  |  ]  then the fieldname "email" would be wrapped to this value: tx_myextension[input][email]]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="REQ">
		<property name="fieldWrap" type="stdWrap">
			<description><![CDATA[Field: Wraps the fields, but for reuired fields]]></description>
			<default><![CDATA[the "fieldWrap"-property]]></default>
		</property>
		<property name="labelWrap" type="stdWrap">
			<description><![CDATA[Labels: Wraps the label, but for reuired fields]]></description>
			<default><![CDATA[the "labelWrap"-property]]></default>
		</property>
		<property name="layout" type="string">
			<description><![CDATA[The same as "layout" above, but for reuired fields]]></description>
			<default><![CDATA[the "layout"-property]]></default>
		</property>
	</type>
	<type id="FRAMESET">
		<property name="1" type="FRAME">
			<description><![CDATA[Configuration of frames and nested framesets.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="FRAME">
			<description><![CDATA[Configuration of frames and nested framesets.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="FRAME">
			<description><![CDATA[Configuration of frames and nested framesets.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="4" type="FRAME">
			<description><![CDATA[Configuration of frames and nested framesets.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="cols" type="string">
			<description><![CDATA[&lt;frameset&gt;-data:cols
			Cols]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[&lt;frameset&gt;-params
			Example:
border="0" framespacing="0" frameborder="NO"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="rows" type="string">
			<description><![CDATA[&lt;frameset&gt;-data:rows
			Rows]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="FRAME">
		<property name="name" type="string">
			<description><![CDATA[&lt;frame&gt;-data:name
			Manually set name of frame

NOTE: Is set automatically and should not be overridden under normal conditions!]]></description>
			<default><![CDATA[value of ".obj"]]></default>
		</property>
		<property name="obj" type="string">
			<description><![CDATA[pointer to toplevel object-name
			toplevel object-name of a PAGE / FRAMESET

Example:
"left", "page", "frameset"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="options" type="string">
			<description><![CDATA[url-parameters
			Example:
print=1&othervar=anotherthing
would add '&print=1&othervar=anotherthing' to the ".src"-content (if not ".src" is set manually!!)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[&lt;frame&gt;-params
			Example:
scrolling="AUTO" noresize frameborder="NO"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="src" type="string">
			<description><![CDATA[&lt;frame&gt;-data:src
			Manually set the src of the frame

NOTE: Is set automatically and should not be overridden under normal conditions!]]></description>
			<default><![CDATA[could be index.php?$id&$type ]]></default>
		</property>
	</type>
	<type id="GifBuilderObj">
		<property name="if" type="if">
			<description><![CDATA[.if (->if)  is a property of all gifbuilder-objects. If the property is present and NOT set, the object is NOT rendered! This corresponds to the functionallity of ".if" of the stdWrap-function.]]></description>
		</property>
	</type>
	<type id="GIFBUILDER">
		<property name="1" type="GifBuilderObj">
			<description><![CDATA[.if (->if)  is a property of all gifbuilder-objects. If the property is present and NOT set, the object is NOT rendered! This corresponds to the functionallity of ".if" of the stdWrap-function.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="GifBuilderObj">
			<description><![CDATA[.if (->if)  is a property of all gifbuilder-objects. If the property is present and NOT set, the object is NOT rendered! This corresponds to the functionallity of ".if" of the stdWrap-function.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="GifBuilderObj">
			<description><![CDATA[.if (->if)  is a property of all gifbuilder-objects. If the property is present and NOT set, the object is NOT rendered! This corresponds to the functionallity of ".if" of the stdWrap-function.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="4" type="GifBuilderObj">
			<description><![CDATA[.if (->if)  is a property of all gifbuilder-objects. If the property is present and NOT set, the object is NOT rendered! This corresponds to the functionallity of ".if" of the stdWrap-function.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="XY" type="string">
			<description><![CDATA[x,y +calc
			Size of the gif-file. ]]></description>
			<default><![CDATA[100,20]]></default>
		</property>
		<property name="backColor" type="string">
			<description><![CDATA[GraphicColor 
			Background color for the gif]]></description>
			<default><![CDATA[white]]></default>
		</property>
		<property name="format" type="string">
			<description><![CDATA[&quot;gif&quot; / &quot;jpg&quot;
			Output type. 
"jpg"/"jpeg" = jpg-image]]></description>
			<default><![CDATA[gif]]></default>
		</property>
		<property name="maxHeight" type="int">
			<description><![CDATA[pixels
			Maximal heigth of gif-file]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxWidth" type="int">
			<description><![CDATA[pixels
			Maximal width of gif-file]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="string">
			<description><![CDATA[x,y +calc
			Offset all objects on the gif.]]></description>
			<default><![CDATA[0,0]]></default>
		</property>
		<property name="quality" type="int">
			<description><![CDATA[posint (10-100)
			JPG-quality (if “.format” = jpg/jpeg)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="reduceColors" type="int">
			<description><![CDATA[posint (1-255)
			Reduce the number of colors (if gif-file)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="transparentBackground" type="boolean">
			<description><![CDATA[Set this flag to render the background transparent. TYPO3 makes the color found at position 0,0 of the image (upper left corner) transparent.
If you render text you should leave the niceText option OFF as the result with probably be more precise without the niceText antialiasing hack]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="transparentColor" type="stdWrap">
			<description><![CDATA[HTMLColor /stdWrap 
			Specify a color that should be transparent

Example-values:
#ffffcc 
red 
255,255,127

Option:
transparentColor.closest = 1
This will allow for the closest color to be matched instead. You may need this if you image is not garanteed "clean".

NOTE: You may experience that this doesn't work if you use reduceColors-option or render text with niceText-option.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="workArea" type="string">
			<description><![CDATA[x,y,w,h + calc
			Define the workarea on the giffile. All the GifBuilderObj's will see this as the dimensions of the gif-file regarding alignment, overlaying of images an so on. Only will TEXT-objects exceeding the boundaries of the workarea print outside this area.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_ADJUST" extends="GifBuilderObj">
		<property name="value" type="string">
			<description><![CDATA[This lets you adjust the input-levels like in Photoshops "levels"-dialog. If you need to adjust gamma, look at the EFFECT-object.
Example:

20 = ADJUST
20.value = inputLevels = 13,230

properties:

inputLevels: low,high
outputLevels: low, high
autoLevels: -
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_BOX" extends="GifBuilderObj">
		<property name="align" type="string">
			<description><![CDATA[VHalign
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color" type="string">
			<description><![CDATA[GraphicColor
			fill-color]]></description>
			<default><![CDATA[black]]></default>
		</property>
		<property name="dimensions" type="string">
			<description><![CDATA[x,y,w,h +calc
			Dimensions of a filled box. 
x,y    is the offset. 
w,h    is the dimensions. Dimensions of 1 will result in 1-pixel wide lines!]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_CROP" extends="GifBuilderObj">
		<property name="align" type="string">
			<description><![CDATA[VHalign
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="backColor" type="string">
			<description><![CDATA[GraphicColor
]]></description>
			<default><![CDATA[The original backColor]]></default>
		</property>
		<property name="crop" type="string">
			<description><![CDATA[x,y,v,h + calc
			x,y is offset of the crop-frame, 
v,h  is the dimensions]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_EFFECT" extends="GifBuilderObj">
		<property name="value" type="string">
			<description><![CDATA[.value = [Varnavn] = [value] | [Varnavn] = [value]

Example:
20 = EFFECT
20.value = gamme=1.3 | flip | rotate=180


gamma: 0.5 - 3.0
blur: 1-99
sharpen: 1-99
solarize: 0-99
swirl: 0-100
wave: ampli , length
charcoal: 0-100
gray: -
edge: 0-99
emboss: -
flip: - (Vertical flipping)
flop: - (Horizontal flipping)
rotate: 0-360 (Rotation)
colors: 2-255
shear: -90 - 90 (Horizontal shearing)
invert: - (invert the colors)
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_EMBOSS" extends="GifBuilderObj">
		<property name="blur" type="int">
			<description><![CDATA[posint (1-99)
			Blurring of the shadow. Above 40 only values of 40,50,60,70,80,90 means something.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="highColor" type="string">
			<description><![CDATA[GraphicColor
			Upper border-color]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="intensity" type="int">
			<description><![CDATA[posint(0-100)
			How "massive" the emboss is. This value can - if it has a high value combined with a blurred shadow - create a kind of soft-edged outline.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lowColor" type="string">
			<description><![CDATA[GraphicColor
			lower border-color]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="string">
			<description><![CDATA[x,y
			Offset of the emboss]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="opacity" type="int">
			<description><![CDATA[posint (1-100)
			Opacity (transparency^-1) 
100% opacity = 0% transparency). Only active with a value for blur.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textObjNum" type="int">
			<description><![CDATA[pos-int
			Must point to the TEXT-object if these shadow-properties are not properties to a TEXT-object directly ("stand-alone-shadow"). Then the shadow needs to know which TEXT-object it should be a shadow of!
If - on the other hand - the shadow is a property to a text-object, this property is not needed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_IMAGE" extends="GifBuilderObj">
		<property name="align" type="string">
			<description><![CDATA[VHalign
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="file" type="imgResource">
			<description><![CDATA[The imagefile]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="mask" type="imgResource">
			<description><![CDATA[Optional mask-image for the imagefile.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="string">
			<description><![CDATA[x,y +calc
			Offset ]]></description>
			<default><![CDATA[0,0]]></default>
		</property>
		<property name="tile" type="string">
			<description><![CDATA[x,y
			tile x,y times. 
Maximum times is 20 each direction. If you need more, use a larger image.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_OUTLINE" extends="GifBuilderObj">
		<property name="color" type="string">
			<description><![CDATA[GraphicColor
			Outline color]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textObjNum" type="int">
			<description><![CDATA[pos-int
			Must point to the TEXT-object if these shadow-properties are not properties to a TEXT-object directly ("stand-alone-shadow"). Then the shadow needs to know which TEXT-object it should be a shadow of!
If - on the other hand - the shadow is a property to a text-object, this property is not needed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="thickness" type="string">
			<description><![CDATA[x,y
			Thickness in each direction, range 1-2]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_SCALE" extends="GifBuilderObj">
		<property name="height" type="string">
			<description><![CDATA[pixels + calc
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[ImageMagickParams
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="width" type="string">
			<description><![CDATA[pixels + calc
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_SHADOW" extends="GifBuilderObj">
		<property name="blur" type="int">
			<description><![CDATA[posint (1-99)
			Blurring of the shadow. Above 40 only values of 40,50,60,70,80,90 means something.

NOTE: Unfortunately the blurring capabilities of ImageMagick is not very mature in the version 4.2.9. This is addressed in the later version 5.2.0 where a gaussian blur-function is added. BUT as we do cannot use the latest ImageMagick development yet, this is not utilized so far.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="color" type="string">
			<description><![CDATA[GraphicColor
			Shadow color]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="intensity" type="int">
			<description><![CDATA[posint(0-100)
			How "massive" the shadow is. This value can - if it has a high value combined with a blurred shadow - create a kind of soft-edged outline.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="string">
			<description><![CDATA[x,y
			Shadow offset]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="opacity" type="int">
			<description><![CDATA[posint (1-100) 
			Opacity (transparency^-1) 
100% opacity = 0% transparency). Only active with a value for blur.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textObjNum" type="int">
			<description><![CDATA[pos-int
			Must point to the TEXT-object if these shadow-properties are not properties to a TEXT-object directly ("stand-alone-shadow"). Then the shadow needs to know which TEXT-object it should be a shadow of!
If - on the other hand - the shadow is a property to a text-object, this property is not needed.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GB_TEXT" extends="GifBuilderObj">
		<property name="align" type="string">
			<description><![CDATA[align 
			Alignment of the text]]></description>
			<default><![CDATA[left]]></default>
		</property>
		<property name="angle" type="string">
			<description><![CDATA[degree
			Rotation degrees of the text. 

NOTE: Angle is not available if spacing/wordSpacing is set.]]></description>
			<default><![CDATA[0
Range: -90 til 90]]></default>
		</property>
		<property name="antiAlias" type="boolean">
			<description><![CDATA[FreeType antialiasing. Notice, the default mode is "on"!

Note: This option is not available if .niceText is enabled]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="doNotStripHTML" type="boolean">
			<description><![CDATA[If set, HTML-tags in the string inserted are NOT removed. Any other way HTML-code is removed by default!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="emboss" type="GB_EMBOSS">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fontColor" type="stdWrap">
			<description><![CDATA[GraphicColor /stdWrap
			Font color]]></description>
			<default><![CDATA[black]]></default>
		</property>
		<property name="fontFile" type="string">
			<description><![CDATA[Font face (truetype font you can upload!!)]]></description>
			<default><![CDATA[Nimbus (Arial-clone)]]></default>
		</property>
		<property name="fontSize" type="int">
			<description><![CDATA[posint
			Font size]]></description>
			<default><![CDATA[12]]></default>
		</property>
		<property name="hide" type="boolean">
			<description><![CDATA[If this is true, the text is NOT printed. 
This feature may be used if you need a shadow-object to base a shadow on the text, but do not want the text to print.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="hideButCreateMap" type="boolean">
			<description><![CDATA[If this option is set, the text will not be rendered. Shadows and emboss will, though, so don't apply these!! But this feature is also meant only to enable a text to generate the imageMap coordinates without rendering itself.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgMap" type="IMGMAP">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="iterations" type="int">
			<description><![CDATA[posint
			How many times the text should be "printed" onto it self. This will add the effect of bold text.

Note: This option is not available if .niceText is enabled]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="maxWidth" type="int">
			<description><![CDATA[pixels
			Sets the maximum width in pixels, the text must be. Reduces the fontSize if the text does not fit within this width.

Does not support setting alternative fontSizes in splitRendering options.

(By Rene Fritz <r.fritz@colorcube.de>)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="niceText" type="boolean">
			<description><![CDATA[This is a very popular feature that helps to render small letters much nicer than the freetype library can normally do. But it also loads the system very much!
The principle of this function is to create a black/white giffile in twice or more times the size of the actual gif-file and then print the text onto this is a scaled dimension. Afterwards ImageMagick (IM) scales down the mask and masks the font color down on the original gif-file through the temporary mask. 
The fact that the font  is  actually rendered in the double size and scaled down adds a more homogenous shape to the lettes. Some fonts are more critical than others though.  If you do not need the quality, then don't use the function.

Some properties:
.before = IM-params before scale
.after = IM-params after scale
.sharpen = sharpen-value for the mask (after scaling), integer 0-99 (this enables you to make the text crisper if it's too blurred!)
.scaleFactor = scaling-factor, int 2-5]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="offset" type="string">
			<description><![CDATA[x,y +calc
			Offset of the text]]></description>
			<default><![CDATA[0,0]]></default>
		</property>
		<property name="outline" type="GB_OUTLINE">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="shadow" type="GB_SHADOW">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="spacing" type="int">
			<description><![CDATA[posint
			Pixel-distance between letters. This may render ugly!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="splitRendering.compX" type="string">
			<description><![CDATA[Split the rendering of a string into separate processes with individual configurations. By this method a certain range of characters can be rendered with another font face or size. This is very useful if you want to use separate fonts for strings where you have latin characters combined with eg. Japanese and there is a separate font file for each.
You can also render keywords in another font/size/color.

Properties:
splitRendering.compX = Additional pixelspace between parts, x direction
splitRendering.compY = Additional pixelspace between parts, y direction
splitRendering.[array] = keyword  [charRange, highlightWord]
splitRendering.[array] {
  fontFile = Alternative font file for this rendering
  fontSize = Alternative font size for this rendering
  color = Alternative color for this rendering, works ONLY without “niceText”
  xSpaceBefore = x-Space before this part
  xSpaceAfter = x-Space after this part
  ySpaceBefore = y-Space before this part
  ySpaceAfter =  y-Space after this part
}

Keyword: charRange
splitRendering.[array].value = Commaseparated list of character ranges (eg. “100-200”) given as Unicode character numbers. The list accepts optional starting and ending points, eg. “ - 200” or “ 200 -” and single values, eg. “65, 66, 67”

Keyword: highlightWord
splitRendering.[array].value = Word to highlight, makes a case sensitive search for this.

Limitations:
The pixelcompensation values are not corrected for scale factor used with niceText. Basically this means that when niceText is used, these values will have only the half effect.When word spacing is used the “highlightWord” mode doesn't work.The color override works only without “niceText”.

Example:
  10.splitRendering.compX = 2
  10.splitRendering.compY = -2
  10.splitRendering.10 = charRange
  10.splitRendering.10 {
    value = 200-380 , 65, 66
    fontSize = 50
    fontFile =  t3lib/fonts/nimbus.ttf
    xSpaceBefore = 30
  }
  10.splitRendering.20 = highlightWord
  10.splitRendering.20 {
    value = TheWord
    color = red
  }]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="splitRendering.compY" type="string">
			<description><![CDATA[Split the rendering of a string into separate processes with individual configurations. By this method a certain range of characters can be rendered with another font face or size. This is very useful if you want to use separate fonts for strings where you have latin characters combined with eg. Japanese and there is a separate font file for each.
You can also render keywords in another font/size/color.

Properties:
splitRendering.compX = Additional pixelspace between parts, x direction
splitRendering.compY = Additional pixelspace between parts, y direction
splitRendering.[array] = keyword  [charRange, highlightWord]
splitRendering.[array] {
  fontFile = Alternative font file for this rendering
  fontSize = Alternative font size for this rendering
  color = Alternative color for this rendering, works ONLY without “niceText”
  xSpaceBefore = x-Space before this part
  xSpaceAfter = x-Space after this part
  ySpaceBefore = y-Space before this part
  ySpaceAfter =  y-Space after this part
}

Keyword: charRange
splitRendering.[array].value = Commaseparated list of character ranges (eg. “100-200”) given as Unicode character numbers. The list accepts optional starting and ending points, eg. “ - 200” or “ 200 -” and single values, eg. “65, 66, 67”

Keyword: highlightWord
splitRendering.[array].value = Word to highlight, makes a case sensitive search for this.

Limitations:
The pixelcompensation values are not corrected for scale factor used with niceText. Basically this means that when niceText is used, these values will have only the half effect.When word spacing is used the “highlightWord” mode doesn't work.The color override works only without “niceText”.

Example:
  10.splitRendering.compX = 2
  10.splitRendering.compY = -2
  10.splitRendering.10 = charRange
  10.splitRendering.10 {
    value = 200-380 , 65, 66
    fontSize = 50
    fontFile =  t3lib/fonts/nimbus.ttf
    xSpaceBefore = 30
  }
  10.splitRendering.20 = highlightWord
  10.splitRendering.20 {
    value = TheWord
    color = red
  }]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="text" type="stdWrap">
			<description><![CDATA[This is text text-string on the gif-file. The item is rendered only if this string is not empty.
The cObj->data-array is loaded with the page-record, if for example the GIFBUILDER-object is used by GMENU or IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="textMaxLength" type="int">
			<description><![CDATA[The maximum length of the text.  This is just a natural break that prevents incidental rendering of very long texts!]]></description>
			<default><![CDATA[100]]></default>
		</property>
		<property name="wordSpacing" type="posint">
			<description><![CDATA[Pixel-distance between words.]]></description>
			<default><![CDATA[= ".spacing"*2]]></default>
		</property>
	</type>
	<type id="GB_WORKAREA" extends="GifBuilderObj">
		<property name="clear" type="string">(isset)
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="set" type="string">
			<description><![CDATA[x,y,w,h + calc
			Sets another workarea
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="HMENU">
		<property name="1" type="mObj">
			<description><![CDATA[Required!
Defines which menuObj that should render the menuitems on the various levels. 
1 is the first level, 2 is the second level, 3 is the third level, 4 is ....

Example:
temp.sidemenu = HMENU
temp.sidemenu.1 = GMENU  ]]></description>
			<default><![CDATA[ (no menu)]]></default>
		</property>
		<property name="2" type="mObj">
			<description><![CDATA[Required!
Defines which menuObj that should render the menuitems on the various levels. 
1 is the first level, 2 is the second level, 3 is the third level, 4 is ....

Example:
temp.sidemenu = HMENU
temp.sidemenu.1 = GMENU  ]]></description>
			<default><![CDATA[ (no menu)]]></default>
		</property>
		<property name="3" type="mObj">
			<description><![CDATA[Required!
Defines which menuObj that should render the menuitems on the various levels. 
1 is the first level, 2 is the second level, 3 is the third level, 4 is ....

Example:
temp.sidemenu = HMENU
temp.sidemenu.1 = GMENU  ]]></description>
			<default><![CDATA[ (no menu)]]></default>
		</property>
		<property name="4" type="mObj">
			<description><![CDATA[Required!
Defines which menuObj that should render the menuitems on the various levels. 
1 is the first level, 2 is the second level, 3 is the third level, 4 is ....

Example:
temp.sidemenu = HMENU
temp.sidemenu.1 = GMENU  ]]></description>
			<default><![CDATA[ (no menu)]]></default>
		</property>
		<property name="addQueryString" type="string">
			<description><![CDATA[see typolink.addQueryString

Notice: This works only for special=language.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="alwaysActivePIDlist" type="intList">
			<description><![CDATA[List of Integers
			This is a list of page UID numbers that will always be regarded as active menu items and thereby automatically opened regardless of the rootline.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="begin" type="int">
			<description><![CDATA[int +calc
			The first item in the menu. 

Example:
This results in a menu, where the first two items are skipped starting with item number 3:
  begin = 3  

Notice: Affects all sub menus as well. (See “minItems” for notice)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="entryLevel" type="int">
			<description><![CDATA[Defines at which level in the rootLine, the menu should start. 
Default is "0" which gives us a menu of the very first pages on the site.
If the value is < 0, entryLevel is chosen from "behind" in the rootLine. Thus "-1" is a menu with items from the outermost level, "-2" is the level before the outermost...]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="excludeDoktypes" type="intList">
			<description><![CDATA[list of integers
			Enter the list of page document types (doktype) to exclude from menus. By default pages that are “not in menu” (5) are excluded and those marked for backend user access only (6). ]]></description>
			<default><![CDATA[5,6]]></default>
		</property>
		<property name="excludeUidList" type="int">
			<description><![CDATA[list of integers
			This is a list of page uid's to exclude when the select statement is done. Comma-separated. You may add “current” to the list to exclude the current page.

Example:
The pages with these uid-number will NOT be within the menu!! Additionally the current page is always excluded too.
  excludeUidList = 34,2,current]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="if" type="if">
			<description><![CDATA[If "if" returns false, the menu is not generated]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="includeNotInMenu" type="boolean">
			<description><![CDATA[If set, pages with type “Not in menu” will be included in menus.
The number “5” will simply be removed from the current dok-type list (which is by default “5,6” but can be changed by “excludeDoktypes”, see above).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxItems" type="int">
			<description><![CDATA[The maximum items in the menu. More items will be ignored.

Notice: Affects all sub menus as well. (See “minItems” for notice)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="minItems" type="int">
			<description><![CDATA[The minimum items in the menu. If the number of pages does not reach this level, a dummy-page with the title "..." and uid=[currentpage_id] is inserted.

Notice: Affects all sub menus as well. To set the value for each menu level individually, set the properties in the menu objects (see “Common properties” table).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="protectLvar" type="string">
			<description><![CDATA[boolean / keyword
			If set, then for each page in the menu it will be checked if an Alternative Page Language record for the language defined in "config.sys_language_uid" (typically defined via &L) exists for the page. If that is not the case and the pages “Localization settings” have the “Hide page if no translation for current language exists” flag set, then the menu item will link to a non accessible page that will yield an error page to the user. Setting this option will prevent that situation by simply adding “&L=0” for such pages, meaning that they will switch to the default language rather than keeping the current language.
The check is only carried out if a translation is requested ("config.sys_language_uid" is not zero).

Keyword: “all”
When set to “all” the same check is carried out but it will not look if “Hide page if no translation for current language exists” is set - it always reverts to default language if no translation is found.

For these options to make sense, they should only be used when “config.sys_language_mode” is not set to “content_fallback”.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="special" type="HMENU_SPECIAL">
			<description><![CDATA[&quot;directory&quot; / &quot;list&quot; / &quot;updated&quot; / &quot;browse&quot; / &quot;rootline&quot; / &quot;keywords&quot; / “language”
			(See tsref for details: 
			<a href="http://typo3.org/documentation/document-library/references/doc_core_tsref/4.1.0/view/8/11/#id4080403">
			http://typo3.org/documentation/document-library/references/doc_core_tsref/4.1.0/view/8/11/#id4080403</a> )]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="HMENU_SPECIAL">
		<property name="value" type="stdWrap">
			<description><![CDATA[list of page-uid's /stdWrap]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="directory" extends="HMENU_SPECIAL"/>
	<type id="list" extends="HMENU_SPECIAL"/>
	<type id="updated" extends="HMENU_SPECIAL">
		<property name="mode" type="string">
			<description><![CDATA[Which field in the pages-table to use. Default is "SYS_LASTCHANGED" (which is updated when a page is generated to the youngest tstamp of the records on the page), "manual" or “lastUpdated” will use the field "lastUpdated" (set manually in the page-record) and "tstamp" will use the "tstamp"-field of the pagerecord, which is set automatically when the record is changed. "crdate" will use "crdate"-field of the pagerecord. “starttime” will use the starttime field.

Fields with zero value is not selected anyway.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="depth" type="string">
			<description><![CDATA[By default (if the value is not an integer) the depth is 20 levels. The range is 1-20. A depth of 1 means only the start id, depth of 2 means start-id + first level. NOTE: depth is relative to beginAtLevel.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beginAtLevel" type="int">
			<description><![CDATA[Determines starting level for the pagetrees generated based on .value and .depth. Zero is default and includes the start id. 1=starts with the first row of subpages, 2=starts with the second row of subpages. Depth is relative to this starting point.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxAge" type="string">
			<description><![CDATA[Seconds+calc.  
			Pages with update-dates older than currenttime minus this number of seconds will not be shown in the menu no matter what. Default is "not used". You may use +-*/ for calculations.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="limit" type="int">
			<description><![CDATA[Max number of items in the menu. Default is 10, max is 100.
			]]></description>
			<default><![CDATA[10
]]></default>
		</property>
		<property name="excludeNoSearchPages" type="boolean">
			<description><![CDATA[If set, pages marked "No search" is not included into special-menus.
Support for Mount Pages: Yes.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="rootline" extends="HMENU_SPECIAL">
		<property name="range" type="string">
			<description><![CDATA[rootline creates a menu with pages from the "rootline" (see earlier in this reference)

.range = [begin-level] | [end-level] (same way as you reference the .entryLevel for HMENU)

This...

page.2 = HMENU
page.2.special = rootline
page.2.special.range = 1|-2
page.2.special.targets.3 = page
page.2.1 = TMENU
page.2.1.target = _top
page.2.1.wrap = <HR> | <HR>
page.2.1.NO {
  linkWrap = | >
}
... creates a menu like this:

Page level 1 > Page level 2 > Page level 3 > Page level 4 >

(The menu starts at level 1 and does NOT link to the current page (-2 is the level before). Further all pages on level 3 will have "page" as target and all other "_top")
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="targets" type="string">
			<description><![CDATA[.targets.[0-x]  targets
			
			This...

page.2 = HMENU
page.2.special = rootline
page.2.special.range = 1|-2
page.2.special.targets.3 = page
page.2.1 = TMENU
page.2.1.target = _top
page.2.1.wrap = <HR> | <HR>
page.2.1.NO {
  linkWrap = | >
}

... creates a menu like this:

Page level 1 > Page level 2 > Page level 3 > Page level 4 >

(The menu starts at level 1 and does NOT link to the current page (-2 is the level before). Further all pages on level 3 will have "page" as target and all other "_top")
			
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="browse" extends="HMENU_SPECIAL">
		<property name="items" type="string">
			<description><![CDATA[.items  ( "|" separated list of "itemnames")
			This kind of menu is built of items given by a list from the property ".item". Each element in the list (sep. by "|") is either a reserved itemname (see list) with a predefined function or a userdefined name which you can assign a link to any page. Note that the current page cannot be the root-page of a site.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="items.prevnextToSection" type="boolean">
			<description><![CDATA[items.prevnextToSection (boolean) - if set, the "prev" and "next" navigation will jump to the next section when it reaches the end of pages in the current section.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="next" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[next / prev : links to next page / previous page. Next and previous pages are from the same "pid" as the current page id (or "value") - that is the next item in a menu with the current page. Also referred to as current level.

If ".prevnextToSection" is set then next/prev will link to the first page of next section / last page of previous section.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prev" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[next / prev : links to next page / previous page. Next and previous pages are from the same "pid" as the current page id (or "value") - that is the next item in a menu with the current page. Also referred to as current level.

If ".prevnextToSection" is set then next/prev will link to the first page of next section / last page of previous section.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nextsection" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[nextsection / prevsection : links to next section / previous section. A section is defined as the subpages of a page on the same level as the parent (pid) page of the current page. Will not work if parent page of current page is the root page of the site.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prevsection" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[nextsection / prevsection : links to next section / previous section. A section is defined as the subpages of a page on the same level as the parent (pid) page of the current page. Will not work if parent page of current page is the root page of the site.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="nextsection_last" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[Where nextsection/prevsection links to the first page in a section, these links to the last pages. If there is only one page in the section that will be both first and last. Will not work if parent page of current page is the root page of the site.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="prevsection_last" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[Where nextsection/prevsection links to the first page in a section, these links to the last pages. If there is only one page in the section that will be both first and last. Will not work if parent page of current page is the root page of the site.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="first" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[First / Last page on current level. If there is only one page on the current level that page will be both first and last.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="last" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[First / Last page on current level. If there is only one page on the current level that page will be both first and last.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="up" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[Links to the parent (pid) page of the current page. (up 1 level) Will always be available
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="index" type="HMENU_SPECIAL_browseItem">
			<description><![CDATA[Links to the parent of the parent page of the current page (up 2 levels). May not be available if that page is out of the rootline.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="HMENU_SPECIAL_browseItem">
		<property name="target" type="string">
			<description><![CDATA[optional/alternative target of the item]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="uid" type="int">
			<description><![CDATA[.  (uid of page) - optional/alternative page-uid to link to
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="fields" type="string">
			<description><![CDATA[.[itemnames].fields.[fieldname]  (string)
 override field "fieldname" in pagerecord.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="keywords" extends="HMENU_SPECIAL">
		<property name="mode" type="string">
			<description><![CDATA[Which field in the pages-table to use for sorting. Default is "SYS_LASTCHANGED" (which is updated when a page is generated to the youngest tstamp of the records on the page), "manual" or “lastUpdated” will use the field "lastUpdated" (set manually in the page-record) and "tstamp" will use the "tstamp"-field of the pagerecord, which is set automatically when the record is changed. "crdate" will use "crdate"-field of the pagerecord. “starttime” will use the starttime field.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="depth" type="string">
			<description><![CDATA[By default (if the value is not an integer) the depth is 20 levels. The range is 1-20. A depth of 1 means only the start id, depth of 2 means start-id + first level. NOTE: depth is relative to beginAtLevel.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beginAtLevel" type="int">
			<description><![CDATA[Determines starting level for the pagetrees generated based on .value and .depth. Zero is default and includes the start id. 1=starts with the first row of subpages, 2=starts with the second row of subpages. Depth is relative to this starting point.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="limit" type="int">
			<description><![CDATA[Max number of items in the menu. Default is 10, max is 100.
			]]></description>
			<default><![CDATA[10
]]></default>
		</property>
		<property name="excludeNoSearchPages" type="boolean">
			<description><![CDATA[If set, pages marked "No search" is not included into special-menus.
Support for Mount Pages: Yes.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="entryLevel" type="string">
			<description><![CDATA[.entryLevel = where in the rootline the search begins. Standard rootline syntax (-x to x)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setKeywords" type="stdWrap">
			<description><![CDATA[.setKeywords (/stdWrap) = lets you define the keywords manually by defining them as a commaseparated list. If this property is defined, it overrides the default, which is the keywords of the current page.
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="keywordsField" type="string">
			<description><![CDATA[.keywordsField = defines the field in the pages-table in which to search for the keywords. Default is the fieldname “keyword”. No check is done to see if the field you enter here exists, so enter an existing field, OK?!]]></description>
			<default><![CDATA[“keyword”
]]></default>
		</property>
		<property name="keywordsField.sourceField" type="string">
			<description><![CDATA[.keywordsField.sourceField = defines the field from the current page from which to take the keywords being matched. The default is “keyword”. (Notice that “.keywordsField” is only setting the page-record field to search in !)]]></description>
			<default><![CDATA[“keyword”
]]></default>
		</property>
	</type>
	<type id="language" extends="HMENU_SPECIAL"/>
	<type id="userdefined" extends="HMENU_SPECIAL">
		<property name="file" type="string">
			<description><![CDATA[.file  [resource]  =  filename of the php-file to include. (Just like cObject PHP_SCRIPT)
			]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="userfunction" extends="HMENU_SPECIAL">
		<property name="userFunc" type="string">
			<description><![CDATA[.userFunc = function-name
			Calls a user function/method in class which should (as with “userdefined” above) return an array with page records for the menu.
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="mObj">
		<property name="alternativeSortingField" type="string">
			<description><![CDATA[Normally the menuitems are sorted by the fields "sorting" in the pages- and tt_content-table. Here you can enter a list of fields that is used in the SQL- "ORDER BY" statement instead.

Examples (for "pages" table):
alternativeSortingField = title desc
(This will render the menu in reversed alphabetical order)

LIMITATIONS: 
This property works with normal menus, sectionsIndex menus and special-menus of type "directory".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="begin" type="int">
			<description><![CDATA[int +calc
			The first item in the menu. 

Example:
This results in a menu, where the first two items are skipped starting with item number 3:
  begin = 3  

Takes precedence over HMENU.begin]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgNameNotRandom" type="boolean">
			<description><![CDATA[If set, the image names of menuitems is not randomly assigned. Usefull switch if you're manipulating these images with some external JavaScript

NOTE: Don't set this if you're working with a menu with sectionIndex! In that case you need special unique names of items based on something else than the uid of the parent page of course!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgNamePrefix" type="string">
			<description><![CDATA[prefix for the imagenames. This prefix is appended with the uid of the page.]]></description>
			<default><![CDATA["img"]]></default>
		</property>
		<property name="itemArrayProcFunc" type="string">
			<description><![CDATA[function-name
			The first variable passed to this function is the “menuArr” array with the menuitems as they are collected based on the type of menu.
You're free to manipulate or add to this array as you like. Just remember to return the array again!

Note:
.parentObj property is hardcoded to be a reference to the calling tslib_menu object. Here you'll find eg. ->id to be the uid of the menu item generating a submenu and such.

Presetting element state
You can override element states like SPC, IFSUB, ACT, CUR or USR by setting the key ITEM_STATE in the page records. See cObject HMENU/special=userdefined for more information.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="maxItems" type="int">
			<description><![CDATA[The maximum items in the menu. More items will be ignored.

Takes precedence over HMENU.maxItems]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="minItems" type="int">
			<description><![CDATA[The minimum items in the menu. If the number of pages does not reach this level, a dummy-page with the title "..." and uid=[currentpage_id] is inserted.

Takes precedence over HMENU.minItems]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="sectionIndex" type="string">
			<description><![CDATA[This is a property that all menuObj's share. If it's set, then the menu will not consist of links to pages on the "next level" but rather links to the parent page to the menu, but in addition "#"-links to the cObjects rendered on the page. In other words, the menuitems will be links to the content elements (with colPos=0!) on the page. A section index.

.sectionIndex = [boolean]

If you set this, all content elements (from tt_content table) of "Column" = "Normal" and the "Index"-check box clicked are selected. This corresponds to the "Menu/Sitemap" content element when "Section index" is selected as type.

.sectionIndex.type = "all" / "header"

If you set this additional property to "all", then the "Index"-checkbox is not considered and all content elements with colPos=0 is selected.

If this property is "header" then only content elements with a visible header-layout (and a non-empty 'header'-field!) is selected. In other words, if the header layout of an element is set to "Hidden" then the page will not appear in the menu.

The data-record /Behind the scene:

When the menu-records are selected it works like this: The parent page record is used as the "base" for the menu-record. That means that any "no_cache" or "target"-properties of the parent page is used for the whole menu.

But of course some fields from the tt_content records are transfered: This is how it mapped:

$temp[$row[uid]]=$basePageRow;

$temp[$row[uid]]["title"]=$row["header"];

$temp[$row[uid]]["subtitle"]=$row["subheader"];

$temp[$row[uid]]["starttime"]=$row["starttime"];

$temp[$row[uid]]["endtime"]=$row["endtime"];

$temp[$row[uid]]["fe_group"]=$row["fe_group"];

$temp[$row[uid]]["media"]=$row["media"];

$temp[$row[uid]]["header_layout"]=$row["header_layout"];

$temp[$row[uid]]["bodytext"]=$row["bodytext"];

$temp[$row[uid]]["image"]=$row["image"];

$temp[$row[uid]]["sectionIndex_uid"]=$row["uid"];

Basically this shows that

- the field "header" and "subheader" from tt_content are mapped to "title" and "subtitle" in the pages-record. Thus you shouldn't need to change your standard menu-objects to fit this thing...

- the fields "starttime", "endtime", "fe_group", "media" from tt_content are mapped to the same fields in a pages-record.

- the fields "header_layout", "bodytext" and "image" are mapped to non-existing fields in the page-record

- a new field, "sectionIndex_uid" is introduced in the page-record which is detected by the function t3lib_tstemplate->linkData(). If this field is present in a pagerecord, the linkData()-function will prepend a hash-mark and the number of the field.

NOTE:

You cannot create submenus to sectionIndex-menus. That doesn't make any sense as these elements are not pages and thereby have no "childs".
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="showAccessRestrictedPages" type="string">
			<description><![CDATA[integer (page id) / keyword “NONE”
			If set, pages in the menu will include pages with frontend user group access enabled.  However the page is of course not accessible and therefore the URL in the menu will be linked to the page with the ID of this value. On that page you could put a login form or other message.
If the value is “NONE” the link will not be changed and the site will perform page-not-found handling when clicked (which can be used to capture the event and act accordingly of course).

Properties:
.addParam = Additional parameter for the URL, which can hold two markers; ###RETURN_URL### which will be substituted with the link the page would have had if it had been accessible and ###PAGE_ID### holding the page id of the page coming from (could be used to look up which fe_groups was required for access.

Example:
showAccessRestrictedPages = 22
showAccessRestrictedPages.addParams = &return_url=###RETURN_URL###&pageId=###PAGE_ID###

The example will link access restricted menu items to page id 22 with the return URL in the GET var “return_url” and the page id in the GET var “pageId”.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="submenuObjSuffixes" type="string">
			<description><![CDATA[Defines a suffix for alternative sub-level menu objects. Useful to create special submenus depending on their parent menu element. See example below.

Example:
This example will generate a menu where the menu objects for the second level will differ depending on the number of the first level item for which the submenu is rendered. The second level objects used are “2” (the default), “2a” and “2b” (the alternatives). Which of them is used is defined by “1.submenuObjSuffixes” which has the configuration “a |*| |*| b”. This configuration means that the first menu element will use configuration “2a” and the last will use “2b” while anything in between will use “2” (no suffix applied)

page.200 = HMENU
page.200 {
  1 = TMENU
  1.wrap = <div style="width:200px; border: 1px solid;">|</div>
  1.expAll = 1
  1.submenuObjSuffixes = a |*|  |*| b
  1.NO.allWrap = <b>|</b><br/>

  2 = TMENU
  2.NO.allWrap = <div style="background:red;">|</div>

  2a = TMENU
  2a.NO.allWrap = <div style="background:yellow;">|</div>

  2b = TMENU
  2b.NO.allWrap = <div style="background:green;">|</div>
}

The result can be seen in the image below (applied on the testsite package):



Applies to GMENU, TMENU, GMENU_LAYERS, TMENU_LAYERS and GMENU_FOLDOUT on >= 2nd level in a menu.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GMENU">
		<property name="ACT" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config) 
			Enable/Configuration for menu items which are found in the rootLine]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTRO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config) 
			Enable/Configuration for menu items which are found in the rootLine]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTIFSUB" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are found in the rootLine and has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTIFSUBRO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are found in the rootLine and has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CUR" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURRO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURIFSUB" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page and has subpages.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURIFSUBRO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page and has subpages.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="IFSUB" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="IFSUBRO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="NO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			The default “Normal” state rendering of Item. This is required for all menus.
If you specify properties for the “NO” property you do not have to set it “1”. Otherwise with no properties setting “NO=1” will render the menu anyways (for TMENU this may make sense).

The simplest menu TYPO3 can generate is then:

page.20 = HMENU
page.20.1 = TMENU
page.20.1.NO = 1

That will be pure <a> tags wrapped around page titles.]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="SPC" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for 'Spacer' pages.
Spacers are pages of the doktype "Spacer". These are not viewable pages but "placeholders" which can be used to divide menuitems.

Note: Rollovers doesn't work with spacers, if you use GMENU!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="USERDEF1" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Userdefined, see .itemArrayProcFunc for details on how to use this.
You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF1RO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Userdefined, see .itemArrayProcFunc for details on how to use this.
You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF2" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			(See above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF2RO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			(See above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USR" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are access restricted pages that a user has access to.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="USRRO" type="GMENU_itemState">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are access restricted pages that a user has access to.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="addParams" type="string">
			<description><![CDATA[Additional parameter for the menu-links. 
Example:
"&some_var=some%20value"
Must be rawurlencoded.
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="IProcFunc" type="string">
			<description><![CDATA[The internal array “I” is passed to this function and expected returned as well. Subsequent to this function call the menu item is compiled by implode()'ing the array $I[parts] in the passed array. Thus you may modify this if you need to.
See example on the testsite and in media/scripts/example_itemArrayProcFunc.php]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="RO" type="boolean">
			<description><![CDATA[RollOver configuration enabled / disabled. 
If this is true, RO becomes a GIFBUILDER-object defining the layout of the menuitem when the mouse rolls over it]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="[Common Item States, see above]" type="GIFBUILDER">
			<description><![CDATA[This is the GIFBUILDER-options for each category of menuitem that can be generated.

NOTE: For the GMENU series you can also define the RollOver configuration for the item states. This means that you define the GIFBUILDER object for the 'Active' state by ACT and the RollOver GIFBUILDER object for the 'Active' state by ACTRO.
This pattern goes for ALL the states except the SPC state.

SPECIAL:
The ->OptionSplit function is run on the whole GIFBUILDER-configuration before the items are generated.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="accessKey" type="Boolean">
			<description><![CDATA[If set access-keys are set on the menu-links]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="applyTotalH" type="objNumsList (offset)">
			<description><![CDATA[This adds the total height of the previously generated menuitems to the offset of the GifBuilderObj's mentioned in this list.

Example:
This is useful it you want to create a menu with individual items but a common background image that extends to the whole area behind the menu. Then you should setup the background image in each GIFBUILDER-object and include the object-number in this list. 
Look at the implementation in static_template "styles.gmenu.bug"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="applyTotalW" type="objNumsList (offset)">
			<description><![CDATA[This adds the total width of the previously generated menuitems to the offset of the GifBuilderObj's mentioned in this list.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="collapse" type="Boolean">
			<description><![CDATA[If set, "active" menuitems that has expanded the next level on the menu will now collapse that menu again.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debugItemConf" type="string">
			<description><![CDATA[Outputs (by the debug()-function) the configuration arrays for each menuitem. Useful to debug optionSplit things and such...
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="disableAltText" type="boolean">
			<description><![CDATA[If set, the alt-parameter of the images are not set. You can do it manually by “imgParams” (see below)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="distributeX" type="int+">
			<description><![CDATA[If set, the total width of all the menuitems will be equal to this number of pixels by adding/subtracting an equal amount of pixels to each menu items width.
Will overrule any setting for ".useLargestItemX"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="distributeY" type="int+">
			<description><![CDATA[If set, the total height of all the menuitems will be equal to this number of pixels by adding/subtracting an equal amount of pixels to each menu items height.
Will overrule any setting for ".useLargestItemY"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="expAll" type="Boolean">
			<description><![CDATA[If this is true, the menu will always show the menu on the level underneath the menuitem. This corresponds to a situation where a user has clicked a menuitem and the menu folds out the next level. This can enable that to happen on all items as default.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="forceTypeValue" type="int">
			<description><![CDATA[If set, the &type parameter of the link is forced to this value regardless of target. Overrides the global equivalent in 'config' if set.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSWindow" type="boolean">
			<description><![CDATA[If set, the links of the menu-items will open by JavaScript in a pop-up window. 

.newWindow boolean, that lets every menuitem open in its own window opposite to opening in the same window for each click.

.params is the list of parameters sent to the JavaScript open-window function, eg: 
width=200,height=300,status=0,menubar=0

NOTE: Does not work with JSMENU's]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="max" type="x,y (calcInt)">
			<description><![CDATA[Forces the menu as a whole to these maximum dimensions]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="min" type="x,y (calcInt)">
			<description><![CDATA[Forces the menu as a whole to these minimum dimensions]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noBlur" type="Boolean">
			<description><![CDATA[Normally graphical links are "blurred" if the browser is MSIE. Blurring removes the ugly box around a clicked link. 
If this property is set, the link is NOT blurred (browser-default) with "onFocus".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="overrideId" type="int">
			<description><![CDATA[integer (page-id)
			If set, then all links in the menu will point to this pageid. Instead the real uid of the page is sent by the parameter "&real_uid=[uid]".
This feature is smart, if you have inserted a menu from somewhere else, perhaps a shared menu, but wants the menuitems to call the same page, which then generates a proper output based on the real_uid.
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="removeObjectsOfDummy" type="objNumsList">
			<description><![CDATA[If the menu is forced to a certain minimum dimension, this is a list of objects in the gifbuilder-object that is removed for this last item. This is important to do if the menuitems has elements that should only be applied if the item is actually a menuitem!!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[Wraps the whole item using stdWrap

Example:
2 = TMENU
2 {
  stdWrap.dataWrap = <ul class=”{register :
     parentProperty}”> | </ul>
  NO {
    ...
  }
}]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="target">
			<description><![CDATA[Target of the menulinks]]></description>
			<default><![CDATA[self]]></default>
		</property>
		<property name="submenuObjSuffixes" type="string">
			<description><![CDATA[Defines a suffix for alternative sub-level menu objects. Useful to create special submenus depending on their parent menu element. See example below.

Example:
This example will generate a menu where the menu objects for the second level will differ depending on the number of the first level item for which the submenu is rendered. The second level objects used are “2” (the default), “2a” and “2b” (the alternatives). Which of them is used is defined by “1.submenuObjSuffixes” which has the configuration “a |*| |*| b”. This configuration means that the first menu element will use configuration “2a” and the last will use “2b” while anything in between will use “2” (no suffix applied)

page.200 = HMENU
page.200 {
  1 = TMENU
  1.wrap = <div style="width:200px; border: 1px solid;">|</div>
  1.expAll = 1
  1.submenuObjSuffixes = a |*|  |*| b
  1.NO.allWrap = <b>|</b><br/>

  2 = TMENU
  2.NO.allWrap = <div style="background:red;">|</div>

  2a = TMENU
  2a.NO.allWrap = <div style="background:yellow;">|</div>

  2b = TMENU
  2b.NO.allWrap = <div style="background:green;">|</div>
}

The result can be seen in the image below (applied on the testsite package):



Applies to GMENU, TMENU, GMENU_LAYERS, TMENU_LAYERS and GMENU_FOLDOUT on >= 2nd level in a menu.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="useLargestItemX" type="boolean">
			<description><![CDATA[If set, then the width of all menuitems will be equal to the largest of them all.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="useLargestItemY" type="boolean">
			<description><![CDATA[If set, then the height of all menuitems will be equal to the largest of them all.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wraps only if there were items in the menu!]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GMENU_itemState" extends="GIFBUILDER">
		<property name="ATagParams" type="string">
			<description><![CDATA[Additional parameters]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagTitle" type="string /stdWrap">
			<description><![CDATA[which defines the title attribute of the a-tag. (See TMENUITEM also)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="additionalParams" type="string /stdWrap">
			<description><![CDATA[Define parameters that are added to the end of the URL. This must be code ready to insert after the last parameter.

For details, see typolink->additionalParams]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="allStdWrap" type="stdWrap">
			<description><![CDATA[stdWrap of the whole item]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="allWrap" type="wrap /stdWrap">
			<description><![CDATA[Wraps the whole item]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="altImgResource" type="imgResouce">
			<description><![CDATA[Defines an alternative image to use. If an image returns here, it will override any GIFBUILDER configuration.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="altTarget" type="string">
			<description><![CDATA[Alternative target which overrides the target defined for the GMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgParams" type="params">
			<description><![CDATA[Parameters for the <img>-tag]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noLink" type="boolean">
			<description><![CDATA[If set, the item is NOT linked!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="subst_elementUid" type="boolean">
			<description><![CDATA[If set, "{elementUid}" is substituted with the item uid.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wrap of the menu item]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="GMENU_FOLDOUT" extends="GMENU">
		<property name="adjustItemsH" type="int">
			<description><![CDATA[Adjusts the height calculation of the menulayers of the first level (called Top)

Example:
-10

This value will substract 10 pixels from the height of the layer in calculations.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="adjustSubItemsH" type="int">
			<description><![CDATA[Adjusts the height calculation of the menulayers of the second level (subitems, called Sub)
See above]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="arrowImgParams" type="string">
			<description><![CDATA[&lt;img&gt; params
			Parameters to the arrow-image.

Example:
hspace=5 vspace=7]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="arrowNO" type="imgResource">
			<description><![CDATA[If both arrowNO and arrowACT is defined and valid imgResources then these images are use as “traditional arrows” that indicates whether an item is expanded (active) or not. 
NO is normal, ACT is expanded
The image is inserted just before the menuitem. If you want to change the position, put the marker ###ARROW_IMAGE### into the wrap of the item and the image will be put there instead.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bottomContent" type="cObj">
			<description><![CDATA[Content for the bottom layer that covers the end of the menu. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bottomHeight" type="int">
			<description><![CDATA[pixels 
			Sets the height of the bottom layer. Is important if the bottomlayer  contains either content or a background color: Else the layer will be clipped.]]></description>
			<default><![CDATA[100]]></default>
		</property>
		<property name="displayActiveOnLoad" type="boolean">
			<description><![CDATA[If set, then the active menu items will fold out “onLoad”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dontLinkIfSubmenu" type="boolean">
			<description><![CDATA[If set, items that has a submenu is not linked. Items without a submenu are always linked in the regular ways.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dontWrapInTable" type="boolean">
			<description><![CDATA[By default every menuitem on the first level is wrapped in a table:
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><TR><TD>
[menu item HTML here..]
</TD></TR></TABLE>
Doing this ensures that the layers renders equally in the supported browsers. However you might need to disable that which is what you can do by setting this flag.
Note: Using <TBODY> in this tables seems to break Netscape 4+]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="foldSpeed" type="int">
			<description><![CDATA[int, range 1-100
			How many steps in an animation? Choose 1 for no animation.]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="foldTimer" type="int">
			<description><![CDATA[The timeout in the animation, these are milliseconds.]]></description>
			<default><![CDATA[40]]></default>
		</property>
		<property name="JSWindow" type="boolean">
			<description><![CDATA[If set, the links of the menu-items will open by JavaScript in a pop-up window. 

.newWindow boolean, that lets every menuitem open in its own window opposite to opening in the same window for each click.

.params is the list of parameters sent to the JavaScript open-window function, eg: 
width=200,height=300,status=0,menubar=0

NOTE: Does not work with JSMENU's]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="menuBackColor" type="string">
			<description><![CDATA[HTML-color
			Background color behind menu. If not set, transparent (which will not work very well in case .foldSpeed is set to something else than 1. But see for yourself)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="menuHeight" type="int">
			<description><![CDATA[Height of the whole menulayer. Seems to be not so important.]]></description>
			<default><![CDATA[400]]></default>
		</property>
		<property name="menuOffset" type="string">
			<description><![CDATA[x,y
			Offset of the menu main layer on the page. From upperleft corner]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="menuWidth" type="int">
			<description><![CDATA[pixels
			Width of the whole menu main layer. Important to set, especially for the bottomlayer as it is clipped by this value. Always try to set this to the width in pixels of the menu]]></description>
			<default><![CDATA[170]]></default>
		</property>
		<property name="stayFolded" type="boolean">
			<description><![CDATA[Stay open when you click a new toplink? (Level 1)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="submenuObjSuffixes" type="string">
			<description><![CDATA[Defines a suffix for alternative sub-level menu objects. Useful to create special submenus depending on their parent menu element. See example below.

Example:
This example will generate a menu where the menu objects for the second level will differ depending on the number of the first level item for which the submenu is rendered. The second level objects used are “2” (the default), “2a” and “2b” (the alternatives). Which of them is used is defined by “1.submenuObjSuffixes” which has the configuration “a |*| |*| b”. This configuration means that the first menu element will use configuration “2a” and the last will use “2b” while anything in between will use “2” (no suffix applied)

page.200 = HMENU
page.200 {
  1 = TMENU
  1.wrap = <div style="width:200px; border: 1px solid;">|</div>
  1.expAll = 1
  1.submenuObjSuffixes = a |*|  |*| b
  1.NO.allWrap = <b>|</b><br/>

  2 = TMENU
  2.NO.allWrap = <div style="background:red;">|</div>

  2a = TMENU
  2a.NO.allWrap = <div style="background:yellow;">|</div>

  2b = TMENU
  2b.NO.allWrap = <div style="background:green;">|</div>
}

The result can be seen in the image below (applied on the testsite package):



Applies to GMENU, TMENU, GMENU_LAYERS, TMENU_LAYERS and GMENU_FOLDOUT on >= 2nd level in a menu.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="subMenuOffset" type="string">
			<description><![CDATA[x,y
			Offset of the submenu for each menuitem. This is important because if you don't set this value the items will appear ontop of their “parent”]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="MENU_LAYERS">
		<property name="blankStrEqFalse" type="boolean">
			<description><![CDATA[If set, then the properties topOffset,leftOffset, xPosOffset, yPosOffset are considered “blank” if they are really blank strings - not just “zero”. You should enable this if you wish to be able to work with zero offsets. This is typically the case if you use relative positioning.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="bordersWithin" type="string">
			<description><![CDATA[l,t,r,b,l,t
			Keep borders of the layer within these limits in pixels. Zero is 'not set'
(Syntax: List of integers, evaluated clockwise: Left, Top, Right, Bottom, Left, Top)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="directionLeft" type="boolean">
			<description><![CDATA[Set this, if you want the items to be right-aligned (pop's out towards the left).
Does not work with Opera at this time because I don't know how to make Opera read the width of each layer.
If you set the width of the menu-layers in .layerStyles this might work no matter what.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="directionUp" type="boolean">
			<description><![CDATA[Set this, if you want the items to be bottom-aligned (pop's out upwards instead of downwards).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="displayActiveOnLoad" type="boolean">
			<description><![CDATA[If set, the submenu-layer of the active menuitem is opened at page-load. If .freezeMouseover is also set and there is RO defined for the main menu items, the menuitem belonging to the displayed submenu is also shown.

Properties:
.onlyOnLoad (boolean)
If set, then the display of the active item will happen only when the page is loaded. The display will not be restored on mouseout of other items.

Warning: If you are cascading GMENU_LAYER objects make sure that all elements before this element (for which you set this attribute) also has this attribute set!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dontFollowMouse" type="boolean">
			<description><![CDATA[If set and lockPosition is blank (so that the menu layer follows the mouse) then the menu will NOT follow the mouse but still it will appear where the mouse cursor hit the trigger-element. Usefull if you don't know the exact positions of elements. 

Warning: You should not set displayActiveOnLoad for menus with this feature enabled (because the absolute position of the layer is not known).]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dontHideOnMouseUp" type="boolean">
			<description><![CDATA[If set, the menu will not hide it's layers when the mouse botton is clicked. Usefull if your menuitems loads the pages in another frame]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="freezeMouseover" type="boolean">
			<description><![CDATA[If set, any mouseout effect of main menuitems is removed not on roll-out but when another element is rolled over (or the layer is hidden/default layer restored)

Properties:
.alwaysKeep (boolean)
If set, the freezed element will always stay, even if the submenu is hidden.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="hideMenuTimer" type="int+">
			<description><![CDATA[This is the number of milliseconds to wait before the submenu will disappear if hideMenuWhenNotOver  is set]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="hideMenuWhenNotOver" type="int+">
			<description><![CDATA[If set (> 1) then the menu will hide it self whenever a user moves the cursor away from the menu. The value of this parameter determines the width (pixels) of the zone around the element until the mousepointer is considered to be far enough away to hide the layer.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSWindow" type="boolean">
			<description><![CDATA[If set, the links of the menu-items will open by JavaScript in a pop-up window. 

.newWindow boolean, that lets every menuitem open in its own window opposite to opening in the same window for each click.

.params is the list of parameters sent to the JavaScript open-window function, eg: 
width=200,height=300,status=0,menubar=0

NOTE: Does not work with JSMENU's]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="layerStyle" type="&lt;DIV&gt;-tag params">
			<description><![CDATA[Parameters for the <DIV>-layer-tags in the HTML-document. You might probably not need change this.

Example:
position:absolute; VISIBILITY: hidden; ]]></description>
			<default><![CDATA[position:absolute; visibility: hidden; ]]></default>
		</property>
		<property name="layer_menu_id" type="string">
			<description><![CDATA[If you want to specifically name a menu on a page. Probably you don't need that!

Warning: Don't use underscore and special characters in this string. Stick to alpha-numeric.]]></description>
			<default><![CDATA[[random 6 char hashstring]]]></default>
		</property>
		<property name="leftOffset" type="int">
			<description><![CDATA[The offset of menuitems from left border of browser. Should be set rather than defining it in the .layerStyle property. Must be set in order to use directionLeft.
Used with either lockPosition=y or yPosOffset defined.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lockPosition" type="&quot;x&quot; / &quot;y&quot; / &quot;&quot;">
			<description><![CDATA[If this is set to "x" or "y" the menu on the layers is locked and does not follow the mouse-cursor (which it does if this is not set).
"x" or "y" defines respectively that the summed width (x) or height (y) is added to the x or y offset of the menu. That means that you should set this value to "x" if you have a horizontal GMENU_LAYERS and to "y" if you have a verical menu.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lockPosition_addSelf" type="boolean">
			<description><![CDATA[Normally the width and height of the items (+lockPosition_adjust) are summed up after the item has been rendered. This is good if the direction of the menulayers is right- og downwards.
But if you use directionLeft/directionUp, you might want to add the width of the items before.
If so, set this flag.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="lockPosition_adjust" type="int">
			<description><![CDATA[A number which is added to the width/height of the menuitems in order  to compensate for eg. hspace or other things between the images in the GMENU_LAYERS]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="relativeToParentLayer" type="boolean">
			<description><![CDATA[If set, then the layer will be positioned relative to the previous layer (parent) in a cascaded series of xMENU_LAYERS. Basically the relative position of the parent layer is just added to the offset of the current menu. 

Warning: This property makes sense only if there really is a previous GMENU_LAYER to get position from! So you must have a cascaded menu!

Additional Properties:
.addWidth = Adds the width of the parent layer
.addHeight = Adds the height of the parent layer]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="relativeToTriggerItem" type="boolean">
			<description><![CDATA[This allows you to position the menu layers relative to the item that triggers it. However you should be aware of the following facts:
This does not work with Netscape 4 - the position of the trigger layer will be calculated to zero and thus the offset for all menu layers will be 0,0 + your values. This feature will wrap the menu item in some <div>-tags right before the whole item is wrapped by the .wrap code (for GMENU_LAYERS) or .allWrap (for TMENU_LAYERS). The bottom line of this is: 1) If your menu is horizontal, always wrap your menu items in a table so linebreaks does not appear because of the <div>-tags and 2) make sure the wrapping of the table cell is done with the .wrap/.allWrap properties respectively.Works only effectively on the first xMENU_LAYER in a cascade. For succeeding xMENU_LAYERS items please use “relativeToParentLayer”.
If set, properties xPosOffset, yPosOffset and lockPosition* are not functional (properties directionLeft, directionUp, topOffset and leftOffset are still active)

Additional Properties:
.addWidth = Adds the width of the trigger element
.addHeight = Adds the height of the trigger element]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setFixedHeight" type="int">
			<description><![CDATA[See “setFixedWidth”. Same, but for height.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="setFixedWidth" type="int">
			<description><![CDATA[For GMENU_LAYERS the width and heights of the element is normally known from the graphical item. For TMENU_LAYERS this cannot be known in the same way. Therefore you can use .setFixedWidth and .setFixedHeight to set these values to a number you find reasonable. Of course this may be blasted by the browsers rendering if the font gets out of proportions etc.
Alternatively you may want to use the property “relativeToTriggerItem” which will position your menu layers relative to the item you roll over. This has some drawbacks though. A middle solution is to use a menu with lockPosition set to blank and dontFollowMouse set to true. Then you need only specify either an x or y coordinate to follow and the item will appear where the mouse hits the element.
Notice: Active if value is NOT a blank str. Setting this value to zero means that no width is calculated for the items in GMENU_LAYERS.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="topOffset" type="int">
			<description><![CDATA[The offset of menuitems from top of browser. Should be set rather than defining it in the .layerStyle property. Must be set in order to use directionUp.
Used with either lockPosition=x or xPosOffset defined.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="xPosOffset" type="int">
			<description><![CDATA[The offset of the menu from the point where it's "activated" (if lockPosition is false) / from topleft page corner (if lockPosition is set)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="yPosOffset" type="int">
			<description><![CDATA[As above, but for the y-dimension.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TMENU_LAYERS" extends="TMENU,MENU_LAYERS"/>
	<type id="GMENU_LAYERS" extends="GMENU,MENU_LAYERS"/>
	<type id="IMGMENU">
		<property name="ACT" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config) 
			Enable/Configuration for menu items which are found in the rootLine]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTRO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config) 
			Enable/Configuration for menu items which are found in the rootLine]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTIFSUB" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are found in the rootLine and has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTIFSUBRO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are found in the rootLine and has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CUR" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURRO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURIFSUB" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page and has subpages.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURIFSUBRO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page and has subpages.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="IFSUB" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="IFSUBRO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="NO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			The default “Normal” state rendering of Item. This is required for all menus.
If you specify properties for the “NO” property you do not have to set it “1”. Otherwise with no properties setting “NO=1” will render the menu anyways (for TMENU this may make sense).

The simplest menu TYPO3 can generate is then:

page.20 = HMENU
page.20.1 = TMENU
page.20.1.NO = 1

That will be pure <a> tags wrapped around page titles.]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="SPC" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for 'Spacer' pages.
Spacers are pages of the doktype "Spacer". These are not viewable pages but "placeholders" which can be used to divide menuitems.

Note: Rollovers doesn't work with spacers, if you use GMENU!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="USERDEF1" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Userdefined, see .itemArrayProcFunc for details on how to use this.
You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF1RO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Userdefined, see .itemArrayProcFunc for details on how to use this.
You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF2" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			(See above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF2RO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			(See above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USR" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are access restricted pages that a user has access to.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="USRRO" type="IMGMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are access restricted pages that a user has access to.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="addParams" type="string">
			<description><![CDATA[Additional parameter for the menu-links. 
Example:
"&some_var=some%20value"
Must be rawurlencoded.
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="[Common Item States, see above]" type="IMGMENUITEM">
			<description><![CDATA[This is the TMENUITEM-options for each category of menuitem that can be generated.

SPECIAL:
The ->OptionSplit function is run on the whole GIFBUILDER-configuration before the items are generated.

.distrib is (x,y,v,h +calc) of the distribution of the menuitems. This provides a way to space each item from the other. The codes "textX" and "textY" can be used for the width (X) and height (Y) dimension of each link.
This works by adding a WORKAREA-GifBuilderObj between each of the IMGMENUITEM ("subset" of a GIFBUILDER-object) and this workarea defines where the text should be printed. As such the "x,y" defines the offset the next item will have (this should be the width of the previous in many cases!) and "v,h" defines the dimensions of the current item. 
Consider this example taken from the static_template "template: MM":
    NO.distrib = textX+10, 0, textX+10, textY+5
In the future TypoScript may provide better ways to position GIFBUILDER-objects on the image-maps!

ImgMap is automatically used on the links! (that is the ".imgMap" property of the text-objects in the GIFBUILDER-objects is set automatically, unless is allready set.)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="dWorkArea" type="string">
			<description><![CDATA[offset + calc
			Main offset of the GIFBUILDER-items (also called the "distribution")]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debugItemConf" type="string">
			<description><![CDATA[Outputs (by the debug()-function) the configuration arrays for each menuitem. Useful to debug optionSplit things and such...
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debugRenumberedObject" type="boolean">
			<description><![CDATA[if set, the final GIFBUILDER object configuration is output in order for you to debug your configuration]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="forceTypeValue" type="int">
			<description><![CDATA[If set, the &type parameter of the link is forced to this value regardless of target.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="imgMapExtras" type="string">
			<description><![CDATA[&lt;area...&gt;-tags
			Extra <area...>tags for the image-map]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSWindow" type="boolean">
			<description><![CDATA[If set, the links of the menu-items will open by JavaScript in a pop-up window. 

.newWindow boolean, that lets every menuitem open in its own window opposite to opening in the same window for each click.

.params is the list of parameters sent to the JavaScript open-window function, eg: 
width=200,height=300,status=0,menubar=0

NOTE: Does not work with JSMENU's]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="main" type="GIFBUILDER">
			<description><![CDATA[Main configuration of the image-map! This defines the "underlay"!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noBlur" type="boolean">
			<description><![CDATA[Normally graphical links are "blurred" if the browser is MSIE. Blurring removes the ugly box around a clicked link. 
If this property is set, the link is NOT blurred (browser-default) with "onFocus".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="overrideId" type="int">
			<description><![CDATA[integer (page-id)
			If set, then all links in the menu will point to this pageid. Instead the real uid of the page is sent by the parameter "&real_uid=[uid]".
This feature is smart, if you have inserted a menu from somewhere else, perhaps a shared menu, but wants the menuitems to call the same page, which then generates a proper output based on the real_uid.
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="params" type="string">
			<description><![CDATA[&lt;img&gt;-params
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="string">
			<description><![CDATA[target
			Target of the menulinks]]></description>
			<default><![CDATA[self]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="IMGMENUITEM">
		<property name="1" type="GifBuilderObj">
			<description><![CDATA[NOTE:
The way a imagemap is made is this; All IMGMENUITEMS are included in one big Gifbuilderobj (and renumbered!!). Because of this, Gifbuilderobjects on the next level will not be able to access the data of each menuitem.
Also the feature of using [##.w] and [##.h] with +calc is currently not supported by IMGMENUITEMs.
Therefore all IMAGE-objects on the first level is checked; if "file" or "mask" for any IMAGE-objects are set to "GIFBUILDER", the Gifbuilder-object is parsed to see if any TEXT-objects are present and if so, the TEXT-object is "checked" - which means, that the stdWrap-function is called at a time where the $cObj->data-array is set to the actual menuitem.
In the example below, the text of each menuitem is rendered by letting the title be rendered on a mask instead of directly on the image. Please observe that the "NO.10"-object is present in order for the image-map coordinates to be generated!!

  NO.6 = IMAGE
  NO.6.file = masked_pencolor*.gif
  NO.6.mask = GIFBUILDER
  NO.6.mask {
    XY = 500, 200
    backColor = black
    10 = TEXT
    10 {
      text.field = title
      fontFile = fileadmin/fonts/caflisch.ttf
      fontSize = 34
      fontColor = white
      angle = 15
      offset = 48,110
    }
    20 = EFFECT
    20.value = blur=80
  } 
  NO.10 = TEXT
  NO.10 {
    text.field = title
    fontFile = fileadmin/fonts/caflisch.ttf
    fontSize = 34
    angle = 15
    offset = 48,110
    hideButCreateMap = 1
  }]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="GifBuilderObj">
			<description><![CDATA[NOTE:
The way a imagemap is made is this; All IMGMENUITEMS are included in one big Gifbuilderobj (and renumbered!!). Because of this, Gifbuilderobjects on the next level will not be able to access the data of each menuitem.
Also the feature of using [##.w] and [##.h] with +calc is currently not supported by IMGMENUITEMs.
Therefore all IMAGE-objects on the first level is checked; if "file" or "mask" for any IMAGE-objects are set to "GIFBUILDER", the Gifbuilder-object is parsed to see if any TEXT-objects are present and if so, the TEXT-object is "checked" - which means, that the stdWrap-function is called at a time where the $cObj->data-array is set to the actual menuitem.
In the example below, the text of each menuitem is rendered by letting the title be rendered on a mask instead of directly on the image. Please observe that the "NO.10"-object is present in order for the image-map coordinates to be generated!!

  NO.6 = IMAGE
  NO.6.file = masked_pencolor*.gif
  NO.6.mask = GIFBUILDER
  NO.6.mask {
    XY = 500, 200
    backColor = black
    10 = TEXT
    10 {
      text.field = title
      fontFile = fileadmin/fonts/caflisch.ttf
      fontSize = 34
      fontColor = white
      angle = 15
      offset = 48,110
    }
    20 = EFFECT
    20.value = blur=80
  } 
  NO.10 = TEXT
  NO.10 {
    text.field = title
    fontFile = fileadmin/fonts/caflisch.ttf
    fontSize = 34
    angle = 15
    offset = 48,110
    hideButCreateMap = 1
  }]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="GifBuilderObj">
			<description><![CDATA[NOTE:
The way a imagemap is made is this; All IMGMENUITEMS are included in one big Gifbuilderobj (and renumbered!!). Because of this, Gifbuilderobjects on the next level will not be able to access the data of each menuitem.
Also the feature of using [##.w] and [##.h] with +calc is currently not supported by IMGMENUITEMs.
Therefore all IMAGE-objects on the first level is checked; if "file" or "mask" for any IMAGE-objects are set to "GIFBUILDER", the Gifbuilder-object is parsed to see if any TEXT-objects are present and if so, the TEXT-object is "checked" - which means, that the stdWrap-function is called at a time where the $cObj->data-array is set to the actual menuitem.
In the example below, the text of each menuitem is rendered by letting the title be rendered on a mask instead of directly on the image. Please observe that the "NO.10"-object is present in order for the image-map coordinates to be generated!!

  NO.6 = IMAGE
  NO.6.file = masked_pencolor*.gif
  NO.6.mask = GIFBUILDER
  NO.6.mask {
    XY = 500, 200
    backColor = black
    10 = TEXT
    10 {
      text.field = title
      fontFile = fileadmin/fonts/caflisch.ttf
      fontSize = 34
      fontColor = white
      angle = 15
      offset = 48,110
    }
    20 = EFFECT
    20.value = blur=80
  } 
  NO.10 = TEXT
  NO.10 {
    text.field = title
    fontFile = fileadmin/fonts/caflisch.ttf
    fontSize = 34
    angle = 15
    offset = 48,110
    hideButCreateMap = 1
  }]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="4" type="GifBuilderObj">
			<description><![CDATA[NOTE:
The way a imagemap is made is this; All IMGMENUITEMS are included in one big Gifbuilderobj (and renumbered!!). Because of this, Gifbuilderobjects on the next level will not be able to access the data of each menuitem.
Also the feature of using [##.w] and [##.h] with +calc is currently not supported by IMGMENUITEMs.
Therefore all IMAGE-objects on the first level is checked; if "file" or "mask" for any IMAGE-objects are set to "GIFBUILDER", the Gifbuilder-object is parsed to see if any TEXT-objects are present and if so, the TEXT-object is "checked" - which means, that the stdWrap-function is called at a time where the $cObj->data-array is set to the actual menuitem.
In the example below, the text of each menuitem is rendered by letting the title be rendered on a mask instead of directly on the image. Please observe that the "NO.10"-object is present in order for the image-map coordinates to be generated!!

  NO.6 = IMAGE
  NO.6.file = masked_pencolor*.gif
  NO.6.mask = GIFBUILDER
  NO.6.mask {
    XY = 500, 200
    backColor = black
    10 = TEXT
    10 {
      text.field = title
      fontFile = fileadmin/fonts/caflisch.ttf
      fontSize = 34
      fontColor = white
      angle = 15
      offset = 48,110
    }
    20 = EFFECT
    20.value = blur=80
  } 
  NO.10 = TEXT
  NO.10 {
    text.field = title
    fontFile = fileadmin/fonts/caflisch.ttf
    fontSize = 34
    angle = 15
    offset = 48,110
    hideButCreateMap = 1
  }]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="distrib" type="string">
			<description><![CDATA[.distrib is (x,y,v,h +calc) of the distribution of the menuitems. This provides a way to space each item from the other. The codes "textX" and "textY" can be used for the width (X) and height (Y) dimension of each link.
This works by adding a WORKAREA-GifBuilderObj between each of the IMGMENUITEM ("subset" of a GIFBUILDER-object) and this workarea defines where the text should be printed. As such the "x,y" defines the offset the next item will have (this should be the width of the previous in many cases!) and "v,h" defines the dimensions of the current item. 
Consider this example taken from the static_template "template: MM":
    NO.distrib = textX+10, 0, textX+10, textY+5
In the future TypoScript may provide better ways to position GIFBUILDER-objects on the image-maps! ]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="JSMENU">
		<property name="1" type="JSMENUITEM">
			<description><![CDATA[levels-config]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="2" type="JSMENUITEM">
			<description><![CDATA[levels-config]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="3" type="JSMENUITEM">
			<description><![CDATA[levels-config]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="4" type="JSMENUITEM">
			<description><![CDATA[levels-config]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="SPC" type="boolean">
			<description><![CDATA[If set, spacer can go into the menu, else not.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="firstLabelGeneral" type="string">
			<description><![CDATA[General firstlabel. May be overridden by the one set in each JSMENUITEM]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="forceTypeValue" type="int">
			<description><![CDATA[If set, the &type parameter of the link is forced to this value regardless of target.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="levels" type="int">
			<description><![CDATA[int, 1-5
			How many levels there are]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="menuName" type="string">
			<description><![CDATA[JavaScript menu name. 
If you have more than one JSMENU on the page, you should set this value for each one.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="string">
			<description><![CDATA[target
			Decides target of the menu-links]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[wrap around the selector-boxes]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrapAfterTags" type="wrap">
			<description><![CDATA[wrap around the selector-boxes with wrap and form-tags og JS-code.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="JSMENUITEM">
		<property name="additionalParams" type="string">
			<description><![CDATA[Additional parameters to the <select> box. Eg, you could set the width with a style-parameter like this:
style="width: 200px;"]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="alwaysLink" type="boolean">
			<description><![CDATA[If set an item in the menu selector will always link. This takes precedence over "noLink".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="elements" type="int">
			<description><![CDATA[int+
			Initial number of elements in the menu.  This is of course overruled by the actual menu item texts.]]></description>
			<default><![CDATA[5]]></default>
		</property>
		<property name="firstLabel" type="string">
			<description><![CDATA[First label in top of the menu (default is blank)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noLink" type="boolean">
			<description><![CDATA[Normally the selection of a menu item in the selector box will update the selector on the next level (if there is a next level) and if there are no items for that selector (because there were no subpages), then the link jumps to the page of itself. 
If this flag is set, however, no menuitems in the selector box will ever link to anything. Only update the content of the next selector box on next level.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="showActive" type="boolean">
			<description><![CDATA[if set, the active level will be selected, if present]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="showFirst" type="boolean">
			<description><![CDATA[if set, the first link will be shown when the menu is updated.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="width" type="int">
			<description><![CDATA[int+
			Initial width of the boxes set by a number of _ (underscores)]]></description>
			<default><![CDATA[14]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[wraps the selectorbox]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TMENU">
		<property name="ACT" type="TMENUITEM">
			<description><![CDATA[Boolean / (config) 
			Enable/Configuration for menu items which are found in the rootLine]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTRO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config) 
			Enable/Configuration for menu items which are found in the rootLine]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTIFSUB" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are found in the rootLine and has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="ACTIFSUBRO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are found in the rootLine and has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CUR" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURRO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURIFSUB" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page and has subpages.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="CURIFSUBRO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for a menu item if the item is the current page and has subpages.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="IFSUB" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="IFSUBRO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which has subpages]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="NO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			The default “Normal” state rendering of Item. This is required for all menus.
If you specify properties for the “NO” property you do not have to set it “1”. Otherwise with no properties setting “NO=1” will render the menu anyways (for TMENU this may make sense).

The simplest menu TYPO3 can generate is then:

page.20 = HMENU
page.20.1 = TMENU
page.20.1.NO = 1

That will be pure <a> tags wrapped around page titles.]]></description>
			<default><![CDATA[1]]></default>
		</property>
		<property name="SPC" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for 'Spacer' pages.
Spacers are pages of the doktype "Spacer". These are not viewable pages but "placeholders" which can be used to divide menuitems.

Note: Rollovers doesn't work with spacers, if you use GMENU!]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="USERDEF1" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Userdefined, see .itemArrayProcFunc for details on how to use this.
You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF1RO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Userdefined, see .itemArrayProcFunc for details on how to use this.
You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF2" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			(See above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USERDEF2RO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			(See above)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="USR" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are access restricted pages that a user has access to.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="USRRO" type="TMENUITEM">
			<description><![CDATA[Boolean / (config)
			Enable/Configuration for menu items which are access restricted pages that a user has access to.]]></description>
			<default><![CDATA[0]]></default>
		</property>
		<property name="addParams" type="string">
			<description><![CDATA[Additional parameter for the menu-links. 
Example:
"&some_var=some%20value"
Must be rawurlencoded.
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="IProcFunc" type="string">
			<description><![CDATA[function-name
			The internal array “I” is passed to this function and expected returned as well. Subsequent to this function call the menu item is compiled by implode()'ing the array $I[parts] in the passed array. Thus you may modify this if you need to.
See example on the testsite and in media/scripts/example_itemArrayProcFunc.php]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="[Common Item States, see above]" type="TMENUITEM">
			<description><![CDATA[This is the TMENUITEM-options for each category of menuitem that can be generated.

SPECIAL:
The ->OptionSplit function is run on the whole GIFBUILDER-configuration before the items are generated.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="accessKey" type="boolean">
			<description><![CDATA[If set access-keys are set on the menu-links]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="collapse" type="boolean">
			<description><![CDATA[If set, "active" menuitems that has expanded the next level on the menu will now collapse that menu again.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="debugItemConf" type="string">
			<description><![CDATA[Outputs (by the debug()-function) the configuration arrays for each menuitem. Useful to debug optionSplit things and such...
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="expAll" type="boolean">
			<description><![CDATA[If this is true, the menu will always show the menu on the level underneath the menuitem. This corresponds to a situation where a user has clicked a menuitem and the menu folds out the next level. This can enable that to happen on all items as default.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="forceTypeValue" type="int">
			<description><![CDATA[If set, the &type parameter of the link is forced to this value regardless of target.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="JSWindow" type="boolean">
			<description><![CDATA[If set, the links of the menu-items will open by JavaScript in a pop-up window. 

.newWindow boolean, that lets every menuitem open in its own window opposite to opening in the same window for each click.

.params is the list of parameters sent to the JavaScript open-window function, eg: 
width=200,height=300,status=0,menubar=0

NOTE: Does not work with JSMENU's]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="noBlur" type="boolean">
			<description><![CDATA[Normally links are "blurred" if the browser is MSIE. Blurring removes the ugly box around a clicked link. 
If this property is set, the link is NOT blurred (browser-default) with "onFocus".]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="overrideId" type="int">
			<description><![CDATA[integer (page-id)
			If set, then all links in the menu will point to this pageid. Instead the real uid of the page is sent by the parameter "&real_uid=[uid]".
This feature is smart, if you have inserted a menu from somewhere else, perhaps a shared menu, but wants the menuitems to call the same page, which then generates a proper output based on the real_uid.
Applies to GMENU, TMENU, IMGMENU]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[Wraps the whole item using stdWrap

Example: see GMENU.stdWrap]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="submenuObjSuffixes" type="string">
			<description><![CDATA[Defines a suffix for alternative sub-level menu objects. Useful to create special submenus depending on their parent menu element. See example below.

Example:
This example will generate a menu where the menu objects for the second level will differ depending on the number of the first level item for which the submenu is rendered. The second level objects used are “2” (the default), “2a” and “2b” (the alternatives). Which of them is used is defined by “1.submenuObjSuffixes” which has the configuration “a |*| |*| b”. This configuration means that the first menu element will use configuration “2a” and the last will use “2b” while anything in between will use “2” (no suffix applied)

page.200 = HMENU
page.200 {
  1 = TMENU
  1.wrap = <div style="width:200px; border: 1px solid;">|</div>
  1.expAll = 1
  1.submenuObjSuffixes = a |*|  |*| b
  1.NO.allWrap = <b>|</b><br/>

  2 = TMENU
  2.NO.allWrap = <div style="background:red;">|</div>

  2a = TMENU
  2a.NO.allWrap = <div style="background:yellow;">|</div>

  2b = TMENU
  2b.NO.allWrap = <div style="background:green;">|</div>
}

The result can be seen in the image below (applied on the testsite package):



Applies to GMENU, TMENU, GMENU_LAYERS, TMENU_LAYERS and GMENU_FOLDOUT on >= 2nd level in a menu.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="target" type="string">
			<description><![CDATA[target
			Target of the menulinks]]></description>
			<default><![CDATA[self]]></default>
		</property>
		<property name="wrap" type="wrap">
			<description><![CDATA[Wraps only if there were items in the menu!]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
	<type id="TMENUITEM">
		<property name="ATagBeforeWrap" type="boolean">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagParams" type="stdWrap">
			<description><![CDATA[&lt;A&gt;-params /stdWrap
			Additional parameters

Example:
class=”board”]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="ATagTitle" type="stdWrap">
			<description><![CDATA[Allows you to specify the "title" attribute of the <a> tag around the menu item.

Example:
ATagTitle.field = abstract // description

This would use the abstract or description field for the <a title=""> attribute.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="RO" type="boolean">
			<description><![CDATA[if set, rollOver is enabled for this link]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="RO_chBgColor" type="string">
			<description><![CDATA[If property RO is set (see below) then you can set this property to a certain set of parameters which will allow you to change the background color of eg. the tablecell when the mouse rolls over you text-link.

Syntax:
[over-color] | [out-color] | [id-prefix]

Example:
page = PAGE
page.typeNum = 0
page.10 = HMENU
page.10.wrap = <table border=1>|</table>
page.10.1 = TMENU
page.10.1.NO {
  allWrap = <tr><td valign=top id="1tmenu{elementUid}" style="background:#eeeeee;">|</td></tr>
  subst_elementUid = 1
  RO_chBgColor = #cccccc | #eeeeee | 1tmenu
  RO = 1
}

This example will start out with the table cells in #eeeeee and change them to #cccccc (and back) when rolled over. The “1tmenu” string is a unique id for the menu items. You may not need it (unless the same menu items are more than once on a page), but the important thing is that the id of the table cell has the exact same label before the {elementUid} (red marks). The other important thing is that you DO set a default background color for the cell with the style-attribute (blue marking). If you do not, Mozilla browsers will behave a little strange by not capturing the mouseout event the first time it's triggered. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="additionalParams" type="stdWrap">
			<description><![CDATA[Define parameters that are added to the end of the URL. This must be code ready to insert after the last parameter.

For details, see typolink->additionalParams]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="after" type="stdWrap">
			<description><![CDATA[HTML /stdWrap
			The series of “before...” properties are duplicated to “after...” properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before.
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="afterImg" type="imgResource">The series of “before...” properties are duplicated to “after...” properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before.
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="afterImgLink" type="boolean">
			<description><![CDATA[If set, this image is linked with the same <A> tag as the text
			The series of “before...” properties are duplicated to “after...” properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="afterImgTagParams" type="string">
			<description><![CDATA[&lt;img&gt;-params
			The series of “before...” properties are duplicated to “after...” properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before.
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="afterROImg" type="imgResource">
			<description><![CDATA[If set, ".afterImg" and ".afterROImg" is expected to create a rollOver-pair.
			The series of “before...” properties are duplicated to “after...” properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="afterWrap" type="wrap">
			<description><![CDATA[wrap around the ".after"-code
			The series of “before...” properties are duplicated to “after...” properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before.]]></description>
			<default><![CDATA[
]]></default>
		</property>		
		<property name="allStdWrap" type="stdWrap">
			<description><![CDATA[stdWrap of the whole item]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="allWrap" type="stdWrap">
			<description><![CDATA[wrap /stdWrap
			Wraps the whole item]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="altTarget" type="string">
			<description><![CDATA[target
			Alternative target overriding the target property of the TMENU if set.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="before" type="stdWrap">
			<description><![CDATA[HTML /stdWrap
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beforeImg" type="imgResource">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beforeImgLink" type="boolean">
			<description><![CDATA[If set, this image is linked with the same <A> tag as the text]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beforeImgTagParams" type="string">
			<description><![CDATA[&lt;img&gt;-params
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beforeROImg" type="imgResource">
			<description><![CDATA[If set, ".beforeImg" and ".beforeROImg" is expected to create a rollOver-pair. ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="beforeWrap" type="wrap">
			<description><![CDATA[wrap around the ".before"-code]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="doNotLinkIt" type="boolean">
			<description><![CDATA[if set, the linktext are not linked at all!]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="doNotShowLink" type="boolean">
			<description><![CDATA[if set, the text will not be shown at all (smart with spacers)]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="linkWrap" type="wrap">
			<description><![CDATA[
]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap" type="stdWrap">
			<description><![CDATA[stdWrap to the link-text! ]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="stdWrap2" type="stdWrap">
			<description><![CDATA[stdWrap to the total link-text and ATag.  (Notice that the plain default value passed to stdWrap function is “|“.)]]></description>
			<default><![CDATA[ | ]]></default>
		</property>
		<property name="subst_elementUid" type="boolean">
			<description><![CDATA[If set, all appearances of the string '{elementUid}' in the total element html-code (after wrapped in .allWrap} is substituted with the uid number of the menu item. 
This is useful if you want to insert an identification code in the HTML in order to manipulate properties with JavaScript.]]></description>
			<default><![CDATA[
]]></default>
		</property>
		<property name="wrapItemAndSub " type="wrap">
			<description><![CDATA[Wraps the whole item and any submenu concatenated to it.]]></description>
			<default><![CDATA[
]]></default>
		</property>
	</type>
</tsRef>
